
testLoRa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cbc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003d7c  08003d7c  00004d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003de8  08003de8  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003de8  08003de8  00004de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003df0  08003df0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003df0  08003df0  00004df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003df4  08003df4  00004df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003df8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  2000000c  08003e04  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08003e04  00005130  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d9a8  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020cf  00000000  00000000  000129dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  00014ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000092a  00000000  00000000  00015680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014822  00000000  00000000  00015faa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e578  00000000  00000000  0002a7cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008070e  00000000  00000000  00038d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b9452  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a10  00000000  00000000  000b9498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000bbea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003d64 	.word	0x08003d64

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003d64 	.word	0x08003d64

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1824      	adds	r4, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	42a3      	cmp	r3, r4
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0424      	lsls	r4, r4, #16
 80002ae:	1960      	adds	r0, r4, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			@ (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	@ (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 fbd4 	bl	8000c58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f822 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f9a2 	bl	80007fc <MX_GPIO_Init>
  MX_RTC_Init();
 80004b8:	f000 f898 	bl	80005ec <MX_RTC_Init>
  MX_SPI1_Init();
 80004bc:	f000 f936 	bl	800072c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80004c0:	f000 f96c 	bl	800079c <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 80004c4:	4b0b      	ldr	r3, [pc, #44]	@ (80004f4 <main+0x4c>)
 80004c6:	2201      	movs	r2, #1
 80004c8:	2120      	movs	r1, #32
 80004ca:	0018      	movs	r0, r3
 80004cc:	f000 ff3c 	bl	8001348 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80004d0:	23fa      	movs	r3, #250	@ 0xfa
 80004d2:	005b      	lsls	r3, r3, #1
 80004d4:	0018      	movs	r0, r3
 80004d6:	f000 fc2f 	bl	8000d38 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 80004da:	4b06      	ldr	r3, [pc, #24]	@ (80004f4 <main+0x4c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	2120      	movs	r1, #32
 80004e0:	0018      	movs	r0, r3
 80004e2:	f000 ff31 	bl	8001348 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80004e6:	23fa      	movs	r3, #250	@ 0xfa
 80004e8:	005b      	lsls	r3, r3, #1
 80004ea:	0018      	movs	r0, r3
 80004ec:	f000 fc24 	bl	8000d38 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 80004f0:	46c0      	nop			@ (mov r8, r8)
 80004f2:	e7e7      	b.n	80004c4 <main+0x1c>
 80004f4:	50000400 	.word	0x50000400

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b590      	push	{r4, r7, lr}
 80004fa:	b09d      	sub	sp, #116	@ 0x74
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	2438      	movs	r4, #56	@ 0x38
 8000500:	193b      	adds	r3, r7, r4
 8000502:	0018      	movs	r0, r3
 8000504:	2338      	movs	r3, #56	@ 0x38
 8000506:	001a      	movs	r2, r3
 8000508:	2100      	movs	r1, #0
 800050a:	f003 fbff 	bl	8003d0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050e:	2324      	movs	r3, #36	@ 0x24
 8000510:	18fb      	adds	r3, r7, r3
 8000512:	0018      	movs	r0, r3
 8000514:	2314      	movs	r3, #20
 8000516:	001a      	movs	r2, r3
 8000518:	2100      	movs	r1, #0
 800051a:	f003 fbf7 	bl	8003d0c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800051e:	003b      	movs	r3, r7
 8000520:	0018      	movs	r0, r3
 8000522:	2324      	movs	r3, #36	@ 0x24
 8000524:	001a      	movs	r2, r3
 8000526:	2100      	movs	r1, #0
 8000528:	f003 fbf0 	bl	8003d0c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800052c:	4b2d      	ldr	r3, [pc, #180]	@ (80005e4 <SystemClock_Config+0xec>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a2d      	ldr	r2, [pc, #180]	@ (80005e8 <SystemClock_Config+0xf0>)
 8000532:	401a      	ands	r2, r3
 8000534:	4b2b      	ldr	r3, [pc, #172]	@ (80005e4 <SystemClock_Config+0xec>)
 8000536:	2180      	movs	r1, #128	@ 0x80
 8000538:	0109      	lsls	r1, r1, #4
 800053a:	430a      	orrs	r2, r1
 800053c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800053e:	0021      	movs	r1, r4
 8000540:	187b      	adds	r3, r7, r1
 8000542:	220a      	movs	r2, #10
 8000544:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000546:	187b      	adds	r3, r7, r1
 8000548:	2201      	movs	r2, #1
 800054a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2210      	movs	r2, #16
 8000550:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2201      	movs	r2, #1
 8000556:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2202      	movs	r2, #2
 800055c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2200      	movs	r2, #0
 8000562:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2280      	movs	r2, #128	@ 0x80
 8000568:	0312      	lsls	r2, r2, #12
 800056a:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2280      	movs	r2, #128	@ 0x80
 8000570:	0412      	lsls	r2, r2, #16
 8000572:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000574:	187b      	adds	r3, r7, r1
 8000576:	0018      	movs	r0, r3
 8000578:	f000 ff2a 	bl	80013d0 <HAL_RCC_OscConfig>
 800057c:	1e03      	subs	r3, r0, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000580:	f000 fa04 	bl	800098c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000584:	2124      	movs	r1, #36	@ 0x24
 8000586:	187b      	adds	r3, r7, r1
 8000588:	220f      	movs	r2, #15
 800058a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2203      	movs	r2, #3
 8000590:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2200      	movs	r2, #0
 800059c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2200      	movs	r2, #0
 80005a2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2101      	movs	r1, #1
 80005a8:	0018      	movs	r0, r3
 80005aa:	f001 fae5 	bl	8001b78 <HAL_RCC_ClockConfig>
 80005ae:	1e03      	subs	r3, r0, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80005b2:	f000 f9eb 	bl	800098c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC;
 80005b6:	003b      	movs	r3, r7
 80005b8:	2222      	movs	r2, #34	@ 0x22
 80005ba:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005bc:	003b      	movs	r3, r7
 80005be:	2200      	movs	r2, #0
 80005c0:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80005c2:	003b      	movs	r3, r7
 80005c4:	2280      	movs	r2, #128	@ 0x80
 80005c6:	0292      	lsls	r2, r2, #10
 80005c8:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ca:	003b      	movs	r3, r7
 80005cc:	0018      	movs	r0, r3
 80005ce:	f001 fcf7 	bl	8001fc0 <HAL_RCCEx_PeriphCLKConfig>
 80005d2:	1e03      	subs	r3, r0, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80005d6:	f000 f9d9 	bl	800098c <Error_Handler>
  }
}
 80005da:	46c0      	nop			@ (mov r8, r8)
 80005dc:	46bd      	mov	sp, r7
 80005de:	b01d      	add	sp, #116	@ 0x74
 80005e0:	bd90      	pop	{r4, r7, pc}
 80005e2:	46c0      	nop			@ (mov r8, r8)
 80005e4:	40007000 	.word	0x40007000
 80005e8:	ffffe7ff 	.word	0xffffe7ff

080005ec <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b090      	sub	sp, #64	@ 0x40
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80005f2:	232c      	movs	r3, #44	@ 0x2c
 80005f4:	18fb      	adds	r3, r7, r3
 80005f6:	0018      	movs	r0, r3
 80005f8:	2314      	movs	r3, #20
 80005fa:	001a      	movs	r2, r3
 80005fc:	2100      	movs	r1, #0
 80005fe:	f003 fb85 	bl	8003d0c <memset>
  RTC_DateTypeDef sDate = {0};
 8000602:	2328      	movs	r3, #40	@ 0x28
 8000604:	18fb      	adds	r3, r7, r3
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 800060a:	003b      	movs	r3, r7
 800060c:	0018      	movs	r0, r3
 800060e:	2328      	movs	r3, #40	@ 0x28
 8000610:	001a      	movs	r2, r3
 8000612:	2100      	movs	r1, #0
 8000614:	f003 fb7a 	bl	8003d0c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000618:	4b41      	ldr	r3, [pc, #260]	@ (8000720 <MX_RTC_Init+0x134>)
 800061a:	4a42      	ldr	r2, [pc, #264]	@ (8000724 <MX_RTC_Init+0x138>)
 800061c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800061e:	4b40      	ldr	r3, [pc, #256]	@ (8000720 <MX_RTC_Init+0x134>)
 8000620:	2200      	movs	r2, #0
 8000622:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 31;
 8000624:	4b3e      	ldr	r3, [pc, #248]	@ (8000720 <MX_RTC_Init+0x134>)
 8000626:	221f      	movs	r2, #31
 8000628:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 1023;
 800062a:	4b3d      	ldr	r3, [pc, #244]	@ (8000720 <MX_RTC_Init+0x134>)
 800062c:	4a3e      	ldr	r2, [pc, #248]	@ (8000728 <MX_RTC_Init+0x13c>)
 800062e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000630:	4b3b      	ldr	r3, [pc, #236]	@ (8000720 <MX_RTC_Init+0x134>)
 8000632:	2200      	movs	r2, #0
 8000634:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000636:	4b3a      	ldr	r3, [pc, #232]	@ (8000720 <MX_RTC_Init+0x134>)
 8000638:	2200      	movs	r2, #0
 800063a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800063c:	4b38      	ldr	r3, [pc, #224]	@ (8000720 <MX_RTC_Init+0x134>)
 800063e:	2200      	movs	r2, #0
 8000640:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000642:	4b37      	ldr	r3, [pc, #220]	@ (8000720 <MX_RTC_Init+0x134>)
 8000644:	2200      	movs	r2, #0
 8000646:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000648:	4b35      	ldr	r3, [pc, #212]	@ (8000720 <MX_RTC_Init+0x134>)
 800064a:	0018      	movs	r0, r3
 800064c:	f001 fe14 	bl	8002278 <HAL_RTC_Init>
 8000650:	1e03      	subs	r3, r0, #0
 8000652:	d001      	beq.n	8000658 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8000654:	f000 f99a 	bl	800098c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000658:	212c      	movs	r1, #44	@ 0x2c
 800065a:	187b      	adds	r3, r7, r1
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8000660:	187b      	adds	r3, r7, r1
 8000662:	2200      	movs	r2, #0
 8000664:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8000666:	187b      	adds	r3, r7, r1
 8000668:	2200      	movs	r2, #0
 800066a:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800066c:	187b      	adds	r3, r7, r1
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000672:	187b      	adds	r3, r7, r1
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000678:	1879      	adds	r1, r7, r1
 800067a:	4b29      	ldr	r3, [pc, #164]	@ (8000720 <MX_RTC_Init+0x134>)
 800067c:	2200      	movs	r2, #0
 800067e:	0018      	movs	r0, r3
 8000680:	f001 fe96 	bl	80023b0 <HAL_RTC_SetTime>
 8000684:	1e03      	subs	r3, r0, #0
 8000686:	d001      	beq.n	800068c <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8000688:	f000 f980 	bl	800098c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800068c:	2128      	movs	r1, #40	@ 0x28
 800068e:	187b      	adds	r3, r7, r1
 8000690:	2201      	movs	r2, #1
 8000692:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000694:	187b      	adds	r3, r7, r1
 8000696:	2201      	movs	r2, #1
 8000698:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 800069a:	187b      	adds	r3, r7, r1
 800069c:	2201      	movs	r2, #1
 800069e:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	2200      	movs	r2, #0
 80006a4:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80006a6:	1879      	adds	r1, r7, r1
 80006a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000720 <MX_RTC_Init+0x134>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	0018      	movs	r0, r3
 80006ae:	f001 ff29 	bl	8002504 <HAL_RTC_SetDate>
 80006b2:	1e03      	subs	r3, r0, #0
 80006b4:	d001      	beq.n	80006ba <MX_RTC_Init+0xce>
  {
    Error_Handler();
 80006b6:	f000 f969 	bl	800098c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 80006ba:	003b      	movs	r3, r7
 80006bc:	2200      	movs	r2, #0
 80006be:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 80006c0:	003b      	movs	r3, r7
 80006c2:	2200      	movs	r2, #0
 80006c4:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 80006c6:	003b      	movs	r3, r7
 80006c8:	2200      	movs	r2, #0
 80006ca:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 80006cc:	003b      	movs	r3, r7
 80006ce:	2200      	movs	r2, #0
 80006d0:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006d2:	003b      	movs	r3, r7
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006d8:	003b      	movs	r3, r7
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80006de:	003b      	movs	r3, r7
 80006e0:	2200      	movs	r2, #0
 80006e2:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 80006e4:	003b      	movs	r3, r7
 80006e6:	22f0      	movs	r2, #240	@ 0xf0
 80006e8:	0512      	lsls	r2, r2, #20
 80006ea:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80006ec:	003b      	movs	r3, r7
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 80006f2:	003b      	movs	r3, r7
 80006f4:	2220      	movs	r2, #32
 80006f6:	2101      	movs	r1, #1
 80006f8:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80006fa:	003b      	movs	r3, r7
 80006fc:	2280      	movs	r2, #128	@ 0x80
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000702:	0039      	movs	r1, r7
 8000704:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <MX_RTC_Init+0x134>)
 8000706:	2200      	movs	r2, #0
 8000708:	0018      	movs	r0, r3
 800070a:	f001 ff8f 	bl	800262c <HAL_RTC_SetAlarm_IT>
 800070e:	1e03      	subs	r3, r0, #0
 8000710:	d001      	beq.n	8000716 <MX_RTC_Init+0x12a>
  {
    Error_Handler();
 8000712:	f000 f93b 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000716:	46c0      	nop			@ (mov r8, r8)
 8000718:	46bd      	mov	sp, r7
 800071a:	b010      	add	sp, #64	@ 0x40
 800071c:	bd80      	pop	{r7, pc}
 800071e:	46c0      	nop			@ (mov r8, r8)
 8000720:	20000028 	.word	0x20000028
 8000724:	40002800 	.word	0x40002800
 8000728:	000003ff 	.word	0x000003ff

0800072c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000730:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <MX_SPI1_Init+0x68>)
 8000732:	4a19      	ldr	r2, [pc, #100]	@ (8000798 <MX_SPI1_Init+0x6c>)
 8000734:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000736:	4b17      	ldr	r3, [pc, #92]	@ (8000794 <MX_SPI1_Init+0x68>)
 8000738:	2282      	movs	r2, #130	@ 0x82
 800073a:	0052      	lsls	r2, r2, #1
 800073c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800073e:	4b15      	ldr	r3, [pc, #84]	@ (8000794 <MX_SPI1_Init+0x68>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000744:	4b13      	ldr	r3, [pc, #76]	@ (8000794 <MX_SPI1_Init+0x68>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800074a:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <MX_SPI1_Init+0x68>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000750:	4b10      	ldr	r3, [pc, #64]	@ (8000794 <MX_SPI1_Init+0x68>)
 8000752:	2200      	movs	r2, #0
 8000754:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000756:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <MX_SPI1_Init+0x68>)
 8000758:	2280      	movs	r2, #128	@ 0x80
 800075a:	0092      	lsls	r2, r2, #2
 800075c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800075e:	4b0d      	ldr	r3, [pc, #52]	@ (8000794 <MX_SPI1_Init+0x68>)
 8000760:	2220      	movs	r2, #32
 8000762:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000764:	4b0b      	ldr	r3, [pc, #44]	@ (8000794 <MX_SPI1_Init+0x68>)
 8000766:	2200      	movs	r2, #0
 8000768:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800076a:	4b0a      	ldr	r3, [pc, #40]	@ (8000794 <MX_SPI1_Init+0x68>)
 800076c:	2200      	movs	r2, #0
 800076e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000770:	4b08      	ldr	r3, [pc, #32]	@ (8000794 <MX_SPI1_Init+0x68>)
 8000772:	2200      	movs	r2, #0
 8000774:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000776:	4b07      	ldr	r3, [pc, #28]	@ (8000794 <MX_SPI1_Init+0x68>)
 8000778:	2207      	movs	r2, #7
 800077a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800077c:	4b05      	ldr	r3, [pc, #20]	@ (8000794 <MX_SPI1_Init+0x68>)
 800077e:	0018      	movs	r0, r3
 8000780:	f002 f9cc 	bl	8002b1c <HAL_SPI_Init>
 8000784:	1e03      	subs	r3, r0, #0
 8000786:	d001      	beq.n	800078c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000788:	f000 f900 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800078c:	46c0      	nop			@ (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	46c0      	nop			@ (mov r8, r8)
 8000794:	2000004c 	.word	0x2000004c
 8000798:	40013000 	.word	0x40013000

0800079c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a0:	4b14      	ldr	r3, [pc, #80]	@ (80007f4 <MX_USART2_UART_Init+0x58>)
 80007a2:	4a15      	ldr	r2, [pc, #84]	@ (80007f8 <MX_USART2_UART_Init+0x5c>)
 80007a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007a6:	4b13      	ldr	r3, [pc, #76]	@ (80007f4 <MX_USART2_UART_Init+0x58>)
 80007a8:	22e1      	movs	r2, #225	@ 0xe1
 80007aa:	0252      	lsls	r2, r2, #9
 80007ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ae:	4b11      	ldr	r3, [pc, #68]	@ (80007f4 <MX_USART2_UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	@ (80007f4 <MX_USART2_UART_Init+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <MX_USART2_UART_Init+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	@ (80007f4 <MX_USART2_UART_Init+0x58>)
 80007c2:	220c      	movs	r2, #12
 80007c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c6:	4b0b      	ldr	r3, [pc, #44]	@ (80007f4 <MX_USART2_UART_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007cc:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <MX_USART2_UART_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d2:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <MX_USART2_UART_Init+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d8:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <MX_USART2_UART_Init+0x58>)
 80007da:	2200      	movs	r2, #0
 80007dc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007de:	4b05      	ldr	r3, [pc, #20]	@ (80007f4 <MX_USART2_UART_Init+0x58>)
 80007e0:	0018      	movs	r0, r3
 80007e2:	f002 fa2f 	bl	8002c44 <HAL_UART_Init>
 80007e6:	1e03      	subs	r3, r0, #0
 80007e8:	d001      	beq.n	80007ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007ea:	f000 f8cf 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ee:	46c0      	nop			@ (mov r8, r8)
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	200000a4 	.word	0x200000a4
 80007f8:	40004400 	.word	0x40004400

080007fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007fc:	b590      	push	{r4, r7, lr}
 80007fe:	b08b      	sub	sp, #44	@ 0x2c
 8000800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	2414      	movs	r4, #20
 8000804:	193b      	adds	r3, r7, r4
 8000806:	0018      	movs	r0, r3
 8000808:	2314      	movs	r3, #20
 800080a:	001a      	movs	r2, r3
 800080c:	2100      	movs	r1, #0
 800080e:	f003 fa7d 	bl	8003d0c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	4b5a      	ldr	r3, [pc, #360]	@ (800097c <MX_GPIO_Init+0x180>)
 8000814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000816:	4b59      	ldr	r3, [pc, #356]	@ (800097c <MX_GPIO_Init+0x180>)
 8000818:	2101      	movs	r1, #1
 800081a:	430a      	orrs	r2, r1
 800081c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800081e:	4b57      	ldr	r3, [pc, #348]	@ (800097c <MX_GPIO_Init+0x180>)
 8000820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000822:	2201      	movs	r2, #1
 8000824:	4013      	ands	r3, r2
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082a:	4b54      	ldr	r3, [pc, #336]	@ (800097c <MX_GPIO_Init+0x180>)
 800082c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800082e:	4b53      	ldr	r3, [pc, #332]	@ (800097c <MX_GPIO_Init+0x180>)
 8000830:	2102      	movs	r1, #2
 8000832:	430a      	orrs	r2, r1
 8000834:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000836:	4b51      	ldr	r3, [pc, #324]	@ (800097c <MX_GPIO_Init+0x180>)
 8000838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800083a:	2202      	movs	r2, #2
 800083c:	4013      	ands	r3, r2
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000842:	4b4e      	ldr	r3, [pc, #312]	@ (800097c <MX_GPIO_Init+0x180>)
 8000844:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000846:	4b4d      	ldr	r3, [pc, #308]	@ (800097c <MX_GPIO_Init+0x180>)
 8000848:	2104      	movs	r1, #4
 800084a:	430a      	orrs	r2, r1
 800084c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800084e:	4b4b      	ldr	r3, [pc, #300]	@ (800097c <MX_GPIO_Init+0x180>)
 8000850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000852:	2204      	movs	r2, #4
 8000854:	4013      	ands	r3, r2
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085a:	4b48      	ldr	r3, [pc, #288]	@ (800097c <MX_GPIO_Init+0x180>)
 800085c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800085e:	4b47      	ldr	r3, [pc, #284]	@ (800097c <MX_GPIO_Init+0x180>)
 8000860:	2180      	movs	r1, #128	@ 0x80
 8000862:	430a      	orrs	r2, r1
 8000864:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000866:	4b45      	ldr	r3, [pc, #276]	@ (800097c <MX_GPIO_Init+0x180>)
 8000868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800086a:	2280      	movs	r2, #128	@ 0x80
 800086c:	4013      	ands	r3, r2
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA15_RESERVED_Pin|PA12_RESERVED_Pin|PA1_RESERVED_Pin, GPIO_PIN_RESET);
 8000872:	4943      	ldr	r1, [pc, #268]	@ (8000980 <MX_GPIO_Init+0x184>)
 8000874:	23a0      	movs	r3, #160	@ 0xa0
 8000876:	05db      	lsls	r3, r3, #23
 8000878:	2200      	movs	r2, #0
 800087a:	0018      	movs	r0, r3
 800087c:	f000 fd64 	bl	8001348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000880:	4b40      	ldr	r3, [pc, #256]	@ (8000984 <MX_GPIO_Init+0x188>)
 8000882:	2200      	movs	r2, #0
 8000884:	2120      	movs	r1, #32
 8000886:	0018      	movs	r0, r3
 8000888:	f000 fd5e 	bl	8001348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PC1_RESERVED_Pin|PC0_RESERVED_Pin|PC2_RESERVED_Pin, GPIO_PIN_RESET);
 800088c:	4b3e      	ldr	r3, [pc, #248]	@ (8000988 <MX_GPIO_Init+0x18c>)
 800088e:	2200      	movs	r2, #0
 8000890:	2107      	movs	r1, #7
 8000892:	0018      	movs	r0, r3
 8000894:	f000 fd58 	bl	8001348 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA15_RESERVED_Pin PA12_RESERVED_Pin PA1_RESERVED_Pin */
  GPIO_InitStruct.Pin = PA15_RESERVED_Pin|PA12_RESERVED_Pin|PA1_RESERVED_Pin;
 8000898:	193b      	adds	r3, r7, r4
 800089a:	4a39      	ldr	r2, [pc, #228]	@ (8000980 <MX_GPIO_Init+0x184>)
 800089c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	193b      	adds	r3, r7, r4
 80008a0:	2201      	movs	r2, #1
 80008a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	193b      	adds	r3, r7, r4
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008aa:	193b      	adds	r3, r7, r4
 80008ac:	2202      	movs	r2, #2
 80008ae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b0:	193a      	adds	r2, r7, r4
 80008b2:	23a0      	movs	r3, #160	@ 0xa0
 80008b4:	05db      	lsls	r3, r3, #23
 80008b6:	0011      	movs	r1, r2
 80008b8:	0018      	movs	r0, r3
 80008ba:	f000 fbc7 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80008be:	193b      	adds	r3, r7, r4
 80008c0:	2220      	movs	r2, #32
 80008c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c4:	193b      	adds	r3, r7, r4
 80008c6:	2201      	movs	r2, #1
 80008c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	193b      	adds	r3, r7, r4
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d0:	193b      	adds	r3, r7, r4
 80008d2:	2203      	movs	r2, #3
 80008d4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d6:	193b      	adds	r3, r7, r4
 80008d8:	4a2a      	ldr	r2, [pc, #168]	@ (8000984 <MX_GPIO_Init+0x188>)
 80008da:	0019      	movs	r1, r3
 80008dc:	0010      	movs	r0, r2
 80008de:	f000 fbb5 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4_RESERVED_Pin PB1_RESERVED_Pin PB0_RESERVED_Pin */
  GPIO_InitStruct.Pin = PB4_RESERVED_Pin|PB1_RESERVED_Pin|PB0_RESERVED_Pin;
 80008e2:	0021      	movs	r1, r4
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	2213      	movs	r2, #19
 80008e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	2288      	movs	r2, #136	@ 0x88
 80008ee:	0352      	lsls	r2, r2, #13
 80008f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f8:	000c      	movs	r4, r1
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	4a21      	ldr	r2, [pc, #132]	@ (8000984 <MX_GPIO_Init+0x188>)
 80008fe:	0019      	movs	r1, r3
 8000900:	0010      	movs	r0, r2
 8000902:	f000 fba3 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13_RESERVED_Pin */
  GPIO_InitStruct.Pin = PC13_RESERVED_Pin;
 8000906:	0021      	movs	r1, r4
 8000908:	187b      	adds	r3, r7, r1
 800090a:	2280      	movs	r2, #128	@ 0x80
 800090c:	0192      	lsls	r2, r2, #6
 800090e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000910:	187b      	adds	r3, r7, r1
 8000912:	2288      	movs	r2, #136	@ 0x88
 8000914:	0352      	lsls	r2, r2, #13
 8000916:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	187b      	adds	r3, r7, r1
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(PC13_RESERVED_GPIO_Port, &GPIO_InitStruct);
 800091e:	000c      	movs	r4, r1
 8000920:	187b      	adds	r3, r7, r1
 8000922:	4a19      	ldr	r2, [pc, #100]	@ (8000988 <MX_GPIO_Init+0x18c>)
 8000924:	0019      	movs	r1, r3
 8000926:	0010      	movs	r0, r2
 8000928:	f000 fb90 	bl	800104c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1_RESERVED_Pin PC0_RESERVED_Pin PC2_RESERVED_Pin */
  GPIO_InitStruct.Pin = PC1_RESERVED_Pin|PC0_RESERVED_Pin|PC2_RESERVED_Pin;
 800092c:	0021      	movs	r1, r4
 800092e:	187b      	adds	r3, r7, r1
 8000930:	2207      	movs	r2, #7
 8000932:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000934:	187b      	adds	r3, r7, r1
 8000936:	2201      	movs	r2, #1
 8000938:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	187b      	adds	r3, r7, r1
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000940:	187b      	adds	r3, r7, r1
 8000942:	2202      	movs	r2, #2
 8000944:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000946:	187b      	adds	r3, r7, r1
 8000948:	4a0f      	ldr	r2, [pc, #60]	@ (8000988 <MX_GPIO_Init+0x18c>)
 800094a:	0019      	movs	r1, r3
 800094c:	0010      	movs	r0, r2
 800094e:	f000 fb7d 	bl	800104c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	2100      	movs	r1, #0
 8000956:	2005      	movs	r0, #5
 8000958:	f000 fabe 	bl	8000ed8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800095c:	2005      	movs	r0, #5
 800095e:	f000 fad0 	bl	8000f02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	2100      	movs	r1, #0
 8000966:	2007      	movs	r0, #7
 8000968:	f000 fab6 	bl	8000ed8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800096c:	2007      	movs	r0, #7
 800096e:	f000 fac8 	bl	8000f02 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000972:	46c0      	nop			@ (mov r8, r8)
 8000974:	46bd      	mov	sp, r7
 8000976:	b00b      	add	sp, #44	@ 0x2c
 8000978:	bd90      	pop	{r4, r7, pc}
 800097a:	46c0      	nop			@ (mov r8, r8)
 800097c:	40021000 	.word	0x40021000
 8000980:	00009002 	.word	0x00009002
 8000984:	50000400 	.word	0x50000400
 8000988:	50000800 	.word	0x50000800

0800098c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
}
 8000992:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000994:	46c0      	nop			@ (mov r8, r8)
 8000996:	e7fd      	b.n	8000994 <Error_Handler+0x8>

08000998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099c:	4b07      	ldr	r3, [pc, #28]	@ (80009bc <HAL_MspInit+0x24>)
 800099e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009a0:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <HAL_MspInit+0x24>)
 80009a2:	2101      	movs	r1, #1
 80009a4:	430a      	orrs	r2, r1
 80009a6:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a8:	4b04      	ldr	r3, [pc, #16]	@ (80009bc <HAL_MspInit+0x24>)
 80009aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80009ac:	4b03      	ldr	r3, [pc, #12]	@ (80009bc <HAL_MspInit+0x24>)
 80009ae:	2180      	movs	r1, #128	@ 0x80
 80009b0:	0549      	lsls	r1, r1, #21
 80009b2:	430a      	orrs	r2, r1
 80009b4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b6:	46c0      	nop			@ (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40021000 	.word	0x40021000

080009c0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a0a      	ldr	r2, [pc, #40]	@ (80009f8 <HAL_RTC_MspInit+0x38>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d10e      	bne.n	80009f0 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80009d2:	4b0a      	ldr	r3, [pc, #40]	@ (80009fc <HAL_RTC_MspInit+0x3c>)
 80009d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80009d6:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <HAL_RTC_MspInit+0x3c>)
 80009d8:	2180      	movs	r1, #128	@ 0x80
 80009da:	02c9      	lsls	r1, r1, #11
 80009dc:	430a      	orrs	r2, r1
 80009de:	651a      	str	r2, [r3, #80]	@ 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2100      	movs	r1, #0
 80009e4:	2002      	movs	r0, #2
 80009e6:	f000 fa77 	bl	8000ed8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80009ea:	2002      	movs	r0, #2
 80009ec:	f000 fa89 	bl	8000f02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80009f0:	46c0      	nop			@ (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	b002      	add	sp, #8
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40002800 	.word	0x40002800
 80009fc:	40021000 	.word	0x40021000

08000a00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a00:	b590      	push	{r4, r7, lr}
 8000a02:	b08b      	sub	sp, #44	@ 0x2c
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	2414      	movs	r4, #20
 8000a0a:	193b      	adds	r3, r7, r4
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	2314      	movs	r3, #20
 8000a10:	001a      	movs	r2, r3
 8000a12:	2100      	movs	r1, #0
 8000a14:	f003 f97a 	bl	8003d0c <memset>
  if(hspi->Instance==SPI1)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a28      	ldr	r2, [pc, #160]	@ (8000ac0 <HAL_SPI_MspInit+0xc0>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d14a      	bne.n	8000ab8 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a22:	4b28      	ldr	r3, [pc, #160]	@ (8000ac4 <HAL_SPI_MspInit+0xc4>)
 8000a24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a26:	4b27      	ldr	r3, [pc, #156]	@ (8000ac4 <HAL_SPI_MspInit+0xc4>)
 8000a28:	2180      	movs	r1, #128	@ 0x80
 8000a2a:	0149      	lsls	r1, r1, #5
 8000a2c:	430a      	orrs	r2, r1
 8000a2e:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a30:	4b24      	ldr	r3, [pc, #144]	@ (8000ac4 <HAL_SPI_MspInit+0xc4>)
 8000a32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a34:	4b23      	ldr	r3, [pc, #140]	@ (8000ac4 <HAL_SPI_MspInit+0xc4>)
 8000a36:	2102      	movs	r1, #2
 8000a38:	430a      	orrs	r2, r1
 8000a3a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a3c:	4b21      	ldr	r3, [pc, #132]	@ (8000ac4 <HAL_SPI_MspInit+0xc4>)
 8000a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a40:	2202      	movs	r2, #2
 8000a42:	4013      	ands	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
 8000a46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a48:	4b1e      	ldr	r3, [pc, #120]	@ (8000ac4 <HAL_SPI_MspInit+0xc4>)
 8000a4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac4 <HAL_SPI_MspInit+0xc4>)
 8000a4e:	2101      	movs	r1, #1
 8000a50:	430a      	orrs	r2, r1
 8000a52:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a54:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac4 <HAL_SPI_MspInit+0xc4>)
 8000a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a58:	2201      	movs	r2, #1
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = PB3_RESERVED_Pin;
 8000a60:	193b      	adds	r3, r7, r4
 8000a62:	2208      	movs	r2, #8
 8000a64:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a66:	193b      	adds	r3, r7, r4
 8000a68:	2202      	movs	r2, #2
 8000a6a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	193b      	adds	r3, r7, r4
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a72:	193b      	adds	r3, r7, r4
 8000a74:	2203      	movs	r2, #3
 8000a76:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000a78:	193b      	adds	r3, r7, r4
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PB3_RESERVED_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	193b      	adds	r3, r7, r4
 8000a80:	4a11      	ldr	r2, [pc, #68]	@ (8000ac8 <HAL_SPI_MspInit+0xc8>)
 8000a82:	0019      	movs	r1, r3
 8000a84:	0010      	movs	r0, r2
 8000a86:	f000 fae1 	bl	800104c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PA7_RESERVED_Pin|PA6_RESERVED_Pin;
 8000a8a:	0021      	movs	r1, r4
 8000a8c:	187b      	adds	r3, r7, r1
 8000a8e:	22c0      	movs	r2, #192	@ 0xc0
 8000a90:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	187b      	adds	r3, r7, r1
 8000a94:	2202      	movs	r2, #2
 8000a96:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	187b      	adds	r3, r7, r1
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9e:	187b      	adds	r3, r7, r1
 8000aa0:	2203      	movs	r2, #3
 8000aa2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aaa:	187a      	adds	r2, r7, r1
 8000aac:	23a0      	movs	r3, #160	@ 0xa0
 8000aae:	05db      	lsls	r3, r3, #23
 8000ab0:	0011      	movs	r1, r2
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f000 faca 	bl	800104c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ab8:	46c0      	nop			@ (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	b00b      	add	sp, #44	@ 0x2c
 8000abe:	bd90      	pop	{r4, r7, pc}
 8000ac0:	40013000 	.word	0x40013000
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	50000400 	.word	0x50000400

08000acc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b089      	sub	sp, #36	@ 0x24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	240c      	movs	r4, #12
 8000ad6:	193b      	adds	r3, r7, r4
 8000ad8:	0018      	movs	r0, r3
 8000ada:	2314      	movs	r3, #20
 8000adc:	001a      	movs	r2, r3
 8000ade:	2100      	movs	r1, #0
 8000ae0:	f003 f914 	bl	8003d0c <memset>
  if(huart->Instance==USART2)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a1c      	ldr	r2, [pc, #112]	@ (8000b5c <HAL_UART_MspInit+0x90>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d131      	bne.n	8000b52 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aee:	4b1c      	ldr	r3, [pc, #112]	@ (8000b60 <HAL_UART_MspInit+0x94>)
 8000af0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000af2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b60 <HAL_UART_MspInit+0x94>)
 8000af4:	2180      	movs	r1, #128	@ 0x80
 8000af6:	0289      	lsls	r1, r1, #10
 8000af8:	430a      	orrs	r2, r1
 8000afa:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afc:	4b18      	ldr	r3, [pc, #96]	@ (8000b60 <HAL_UART_MspInit+0x94>)
 8000afe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b00:	4b17      	ldr	r3, [pc, #92]	@ (8000b60 <HAL_UART_MspInit+0x94>)
 8000b02:	2101      	movs	r1, #1
 8000b04:	430a      	orrs	r2, r1
 8000b06:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b08:	4b15      	ldr	r3, [pc, #84]	@ (8000b60 <HAL_UART_MspInit+0x94>)
 8000b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	4013      	ands	r3, r2
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000b14:	0021      	movs	r1, r4
 8000b16:	187b      	adds	r3, r7, r1
 8000b18:	220c      	movs	r2, #12
 8000b1a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1c:	187b      	adds	r3, r7, r1
 8000b1e:	2202      	movs	r2, #2
 8000b20:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	187b      	adds	r3, r7, r1
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b28:	187b      	adds	r3, r7, r1
 8000b2a:	2203      	movs	r2, #3
 8000b2c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000b2e:	187b      	adds	r3, r7, r1
 8000b30:	2204      	movs	r2, #4
 8000b32:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b34:	187a      	adds	r2, r7, r1
 8000b36:	23a0      	movs	r3, #160	@ 0xa0
 8000b38:	05db      	lsls	r3, r3, #23
 8000b3a:	0011      	movs	r1, r2
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f000 fa85 	bl	800104c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2100      	movs	r1, #0
 8000b46:	201c      	movs	r0, #28
 8000b48:	f000 f9c6 	bl	8000ed8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b4c:	201c      	movs	r0, #28
 8000b4e:	f000 f9d8 	bl	8000f02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b52:	46c0      	nop			@ (mov r8, r8)
 8000b54:	46bd      	mov	sp, r7
 8000b56:	b009      	add	sp, #36	@ 0x24
 8000b58:	bd90      	pop	{r4, r7, pc}
 8000b5a:	46c0      	nop			@ (mov r8, r8)
 8000b5c:	40004400 	.word	0x40004400
 8000b60:	40021000 	.word	0x40021000

08000b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b68:	46c0      	nop			@ (mov r8, r8)
 8000b6a:	e7fd      	b.n	8000b68 <NMI_Handler+0x4>

08000b6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b70:	46c0      	nop			@ (mov r8, r8)
 8000b72:	e7fd      	b.n	8000b70 <HardFault_Handler+0x4>

08000b74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b78:	46c0      	nop			@ (mov r8, r8)
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b82:	46c0      	nop			@ (mov r8, r8)
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b8c:	f000 f8b8 	bl	8000d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b90:	46c0      	nop			@ (mov r8, r8)
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000b9c:	4b03      	ldr	r3, [pc, #12]	@ (8000bac <RTC_IRQHandler+0x14>)
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f001 fea6 	bl	80028f0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000ba4:	46c0      	nop			@ (mov r8, r8)
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	46c0      	nop			@ (mov r8, r8)
 8000bac:	20000028 	.word	0x20000028

08000bb0 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB0_RESERVED_Pin);
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	f000 fbe5 	bl	8001384 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PB1_RESERVED_Pin);
 8000bba:	2002      	movs	r0, #2
 8000bbc:	f000 fbe2 	bl	8001384 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000bc0:	46c0      	nop			@ (mov r8, r8)
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB4_RESERVED_Pin);
 8000bca:	2010      	movs	r0, #16
 8000bcc:	f000 fbda 	bl	8001384 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PC13_RESERVED_Pin);
 8000bd0:	2380      	movs	r3, #128	@ 0x80
 8000bd2:	019b      	lsls	r3, r3, #6
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f000 fbd5 	bl	8001384 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000bda:	46c0      	nop			@ (mov r8, r8)
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000be4:	4b03      	ldr	r3, [pc, #12]	@ (8000bf4 <USART2_IRQHandler+0x14>)
 8000be6:	0018      	movs	r0, r3
 8000be8:	f002 f880 	bl	8002cec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bec:	46c0      	nop			@ (mov r8, r8)
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	46c0      	nop			@ (mov r8, r8)
 8000bf4:	200000a4 	.word	0x200000a4

08000bf8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bfc:	46c0      	nop			@ (mov r8, r8)
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000c04:	480d      	ldr	r0, [pc, #52]	@ (8000c3c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000c06:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c08:	f7ff fff6 	bl	8000bf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c0c:	480c      	ldr	r0, [pc, #48]	@ (8000c40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c0e:	490d      	ldr	r1, [pc, #52]	@ (8000c44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c10:	4a0d      	ldr	r2, [pc, #52]	@ (8000c48 <LoopForever+0xe>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c14:	e002      	b.n	8000c1c <LoopCopyDataInit>

08000c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1a:	3304      	adds	r3, #4

08000c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c20:	d3f9      	bcc.n	8000c16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c22:	4a0a      	ldr	r2, [pc, #40]	@ (8000c4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c24:	4c0a      	ldr	r4, [pc, #40]	@ (8000c50 <LoopForever+0x16>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c28:	e001      	b.n	8000c2e <LoopFillZerobss>

08000c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c2c:	3204      	adds	r2, #4

08000c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c30:	d3fb      	bcc.n	8000c2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c32:	f003 f873 	bl	8003d1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c36:	f7ff fc37 	bl	80004a8 <main>

08000c3a <LoopForever>:

LoopForever:
    b LoopForever
 8000c3a:	e7fe      	b.n	8000c3a <LoopForever>
   ldr   r0, =_estack
 8000c3c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c44:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c48:	08003df8 	.word	0x08003df8
  ldr r2, =_sbss
 8000c4c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c50:	20000130 	.word	0x20000130

08000c54 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c54:	e7fe      	b.n	8000c54 <ADC1_COMP_IRQHandler>
	...

08000c58 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c5e:	1dfb      	adds	r3, r7, #7
 8000c60:	2200      	movs	r2, #0
 8000c62:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000c64:	4b0b      	ldr	r3, [pc, #44]	@ (8000c94 <HAL_Init+0x3c>)
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	4b0a      	ldr	r3, [pc, #40]	@ (8000c94 <HAL_Init+0x3c>)
 8000c6a:	2140      	movs	r1, #64	@ 0x40
 8000c6c:	430a      	orrs	r2, r1
 8000c6e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c70:	2000      	movs	r0, #0
 8000c72:	f000 f811 	bl	8000c98 <HAL_InitTick>
 8000c76:	1e03      	subs	r3, r0, #0
 8000c78:	d003      	beq.n	8000c82 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000c7a:	1dfb      	adds	r3, r7, #7
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	701a      	strb	r2, [r3, #0]
 8000c80:	e001      	b.n	8000c86 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c82:	f7ff fe89 	bl	8000998 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c86:	1dfb      	adds	r3, r7, #7
 8000c88:	781b      	ldrb	r3, [r3, #0]
}
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	b002      	add	sp, #8
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	46c0      	nop			@ (mov r8, r8)
 8000c94:	40022000 	.word	0x40022000

08000c98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c98:	b590      	push	{r4, r7, lr}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca0:	4b14      	ldr	r3, [pc, #80]	@ (8000cf4 <HAL_InitTick+0x5c>)
 8000ca2:	681c      	ldr	r4, [r3, #0]
 8000ca4:	4b14      	ldr	r3, [pc, #80]	@ (8000cf8 <HAL_InitTick+0x60>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	0019      	movs	r1, r3
 8000caa:	23fa      	movs	r3, #250	@ 0xfa
 8000cac:	0098      	lsls	r0, r3, #2
 8000cae:	f7ff fa2b 	bl	8000108 <__udivsi3>
 8000cb2:	0003      	movs	r3, r0
 8000cb4:	0019      	movs	r1, r3
 8000cb6:	0020      	movs	r0, r4
 8000cb8:	f7ff fa26 	bl	8000108 <__udivsi3>
 8000cbc:	0003      	movs	r3, r0
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f000 f92f 	bl	8000f22 <HAL_SYSTICK_Config>
 8000cc4:	1e03      	subs	r3, r0, #0
 8000cc6:	d001      	beq.n	8000ccc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e00f      	b.n	8000cec <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2b03      	cmp	r3, #3
 8000cd0:	d80b      	bhi.n	8000cea <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd2:	6879      	ldr	r1, [r7, #4]
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	425b      	negs	r3, r3
 8000cd8:	2200      	movs	r2, #0
 8000cda:	0018      	movs	r0, r3
 8000cdc:	f000 f8fc 	bl	8000ed8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <HAL_InitTick+0x64>)
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e000      	b.n	8000cec <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
}
 8000cec:	0018      	movs	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	b003      	add	sp, #12
 8000cf2:	bd90      	pop	{r4, r7, pc}
 8000cf4:	20000000 	.word	0x20000000
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20000004 	.word	0x20000004

08000d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d04:	4b05      	ldr	r3, [pc, #20]	@ (8000d1c <HAL_IncTick+0x1c>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	001a      	movs	r2, r3
 8000d0a:	4b05      	ldr	r3, [pc, #20]	@ (8000d20 <HAL_IncTick+0x20>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	18d2      	adds	r2, r2, r3
 8000d10:	4b03      	ldr	r3, [pc, #12]	@ (8000d20 <HAL_IncTick+0x20>)
 8000d12:	601a      	str	r2, [r3, #0]
}
 8000d14:	46c0      	nop			@ (mov r8, r8)
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	46c0      	nop			@ (mov r8, r8)
 8000d1c:	20000008 	.word	0x20000008
 8000d20:	2000012c 	.word	0x2000012c

08000d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  return uwTick;
 8000d28:	4b02      	ldr	r3, [pc, #8]	@ (8000d34 <HAL_GetTick+0x10>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
}
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	46c0      	nop			@ (mov r8, r8)
 8000d34:	2000012c 	.word	0x2000012c

08000d38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d40:	f7ff fff0 	bl	8000d24 <HAL_GetTick>
 8000d44:	0003      	movs	r3, r0
 8000d46:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	d005      	beq.n	8000d5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d52:	4b0a      	ldr	r3, [pc, #40]	@ (8000d7c <HAL_Delay+0x44>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	001a      	movs	r2, r3
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	189b      	adds	r3, r3, r2
 8000d5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d5e:	46c0      	nop			@ (mov r8, r8)
 8000d60:	f7ff ffe0 	bl	8000d24 <HAL_GetTick>
 8000d64:	0002      	movs	r2, r0
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d8f7      	bhi.n	8000d60 <HAL_Delay+0x28>
  {
  }
}
 8000d70:	46c0      	nop			@ (mov r8, r8)
 8000d72:	46c0      	nop			@ (mov r8, r8)
 8000d74:	46bd      	mov	sp, r7
 8000d76:	b004      	add	sp, #16
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	46c0      	nop			@ (mov r8, r8)
 8000d7c:	20000008 	.word	0x20000008

08000d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	0002      	movs	r2, r0
 8000d88:	1dfb      	adds	r3, r7, #7
 8000d8a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d8c:	1dfb      	adds	r3, r7, #7
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d92:	d809      	bhi.n	8000da8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d94:	1dfb      	adds	r3, r7, #7
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	001a      	movs	r2, r3
 8000d9a:	231f      	movs	r3, #31
 8000d9c:	401a      	ands	r2, r3
 8000d9e:	4b04      	ldr	r3, [pc, #16]	@ (8000db0 <__NVIC_EnableIRQ+0x30>)
 8000da0:	2101      	movs	r1, #1
 8000da2:	4091      	lsls	r1, r2
 8000da4:	000a      	movs	r2, r1
 8000da6:	601a      	str	r2, [r3, #0]
  }
}
 8000da8:	46c0      	nop			@ (mov r8, r8)
 8000daa:	46bd      	mov	sp, r7
 8000dac:	b002      	add	sp, #8
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	e000e100 	.word	0xe000e100

08000db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db4:	b590      	push	{r4, r7, lr}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	0002      	movs	r2, r0
 8000dbc:	6039      	str	r1, [r7, #0]
 8000dbe:	1dfb      	adds	r3, r7, #7
 8000dc0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dc2:	1dfb      	adds	r3, r7, #7
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b7f      	cmp	r3, #127	@ 0x7f
 8000dc8:	d828      	bhi.n	8000e1c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dca:	4a2f      	ldr	r2, [pc, #188]	@ (8000e88 <__NVIC_SetPriority+0xd4>)
 8000dcc:	1dfb      	adds	r3, r7, #7
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	b25b      	sxtb	r3, r3
 8000dd2:	089b      	lsrs	r3, r3, #2
 8000dd4:	33c0      	adds	r3, #192	@ 0xc0
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	589b      	ldr	r3, [r3, r2]
 8000dda:	1dfa      	adds	r2, r7, #7
 8000ddc:	7812      	ldrb	r2, [r2, #0]
 8000dde:	0011      	movs	r1, r2
 8000de0:	2203      	movs	r2, #3
 8000de2:	400a      	ands	r2, r1
 8000de4:	00d2      	lsls	r2, r2, #3
 8000de6:	21ff      	movs	r1, #255	@ 0xff
 8000de8:	4091      	lsls	r1, r2
 8000dea:	000a      	movs	r2, r1
 8000dec:	43d2      	mvns	r2, r2
 8000dee:	401a      	ands	r2, r3
 8000df0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	019b      	lsls	r3, r3, #6
 8000df6:	22ff      	movs	r2, #255	@ 0xff
 8000df8:	401a      	ands	r2, r3
 8000dfa:	1dfb      	adds	r3, r7, #7
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	0018      	movs	r0, r3
 8000e00:	2303      	movs	r3, #3
 8000e02:	4003      	ands	r3, r0
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e08:	481f      	ldr	r0, [pc, #124]	@ (8000e88 <__NVIC_SetPriority+0xd4>)
 8000e0a:	1dfb      	adds	r3, r7, #7
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	b25b      	sxtb	r3, r3
 8000e10:	089b      	lsrs	r3, r3, #2
 8000e12:	430a      	orrs	r2, r1
 8000e14:	33c0      	adds	r3, #192	@ 0xc0
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e1a:	e031      	b.n	8000e80 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e1c:	4a1b      	ldr	r2, [pc, #108]	@ (8000e8c <__NVIC_SetPriority+0xd8>)
 8000e1e:	1dfb      	adds	r3, r7, #7
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	0019      	movs	r1, r3
 8000e24:	230f      	movs	r3, #15
 8000e26:	400b      	ands	r3, r1
 8000e28:	3b08      	subs	r3, #8
 8000e2a:	089b      	lsrs	r3, r3, #2
 8000e2c:	3306      	adds	r3, #6
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	18d3      	adds	r3, r2, r3
 8000e32:	3304      	adds	r3, #4
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	1dfa      	adds	r2, r7, #7
 8000e38:	7812      	ldrb	r2, [r2, #0]
 8000e3a:	0011      	movs	r1, r2
 8000e3c:	2203      	movs	r2, #3
 8000e3e:	400a      	ands	r2, r1
 8000e40:	00d2      	lsls	r2, r2, #3
 8000e42:	21ff      	movs	r1, #255	@ 0xff
 8000e44:	4091      	lsls	r1, r2
 8000e46:	000a      	movs	r2, r1
 8000e48:	43d2      	mvns	r2, r2
 8000e4a:	401a      	ands	r2, r3
 8000e4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	019b      	lsls	r3, r3, #6
 8000e52:	22ff      	movs	r2, #255	@ 0xff
 8000e54:	401a      	ands	r2, r3
 8000e56:	1dfb      	adds	r3, r7, #7
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	4003      	ands	r3, r0
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e64:	4809      	ldr	r0, [pc, #36]	@ (8000e8c <__NVIC_SetPriority+0xd8>)
 8000e66:	1dfb      	adds	r3, r7, #7
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	001c      	movs	r4, r3
 8000e6c:	230f      	movs	r3, #15
 8000e6e:	4023      	ands	r3, r4
 8000e70:	3b08      	subs	r3, #8
 8000e72:	089b      	lsrs	r3, r3, #2
 8000e74:	430a      	orrs	r2, r1
 8000e76:	3306      	adds	r3, #6
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	18c3      	adds	r3, r0, r3
 8000e7c:	3304      	adds	r3, #4
 8000e7e:	601a      	str	r2, [r3, #0]
}
 8000e80:	46c0      	nop			@ (mov r8, r8)
 8000e82:	46bd      	mov	sp, r7
 8000e84:	b003      	add	sp, #12
 8000e86:	bd90      	pop	{r4, r7, pc}
 8000e88:	e000e100 	.word	0xe000e100
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	1e5a      	subs	r2, r3, #1
 8000e9c:	2380      	movs	r3, #128	@ 0x80
 8000e9e:	045b      	lsls	r3, r3, #17
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d301      	bcc.n	8000ea8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e010      	b.n	8000eca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed4 <SysTick_Config+0x44>)
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	3a01      	subs	r2, #1
 8000eae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	425b      	negs	r3, r3
 8000eb4:	2103      	movs	r1, #3
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f7ff ff7c 	bl	8000db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ebc:	4b05      	ldr	r3, [pc, #20]	@ (8000ed4 <SysTick_Config+0x44>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ec2:	4b04      	ldr	r3, [pc, #16]	@ (8000ed4 <SysTick_Config+0x44>)
 8000ec4:	2207      	movs	r2, #7
 8000ec6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	0018      	movs	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	b002      	add	sp, #8
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	46c0      	nop			@ (mov r8, r8)
 8000ed4:	e000e010 	.word	0xe000e010

08000ed8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60b9      	str	r1, [r7, #8]
 8000ee0:	607a      	str	r2, [r7, #4]
 8000ee2:	210f      	movs	r1, #15
 8000ee4:	187b      	adds	r3, r7, r1
 8000ee6:	1c02      	adds	r2, r0, #0
 8000ee8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	187b      	adds	r3, r7, r1
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	b25b      	sxtb	r3, r3
 8000ef2:	0011      	movs	r1, r2
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f7ff ff5d 	bl	8000db4 <__NVIC_SetPriority>
}
 8000efa:	46c0      	nop			@ (mov r8, r8)
 8000efc:	46bd      	mov	sp, r7
 8000efe:	b004      	add	sp, #16
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	0002      	movs	r2, r0
 8000f0a:	1dfb      	adds	r3, r7, #7
 8000f0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f0e:	1dfb      	adds	r3, r7, #7
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	b25b      	sxtb	r3, r3
 8000f14:	0018      	movs	r0, r3
 8000f16:	f7ff ff33 	bl	8000d80 <__NVIC_EnableIRQ>
}
 8000f1a:	46c0      	nop			@ (mov r8, r8)
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	b002      	add	sp, #8
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f7ff ffaf 	bl	8000e90 <SysTick_Config>
 8000f32:	0003      	movs	r3, r0
}
 8000f34:	0018      	movs	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	b002      	add	sp, #8
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f44:	230f      	movs	r3, #15
 8000f46:	18fb      	adds	r3, r7, r3
 8000f48:	2200      	movs	r2, #0
 8000f4a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2225      	movs	r2, #37	@ 0x25
 8000f50:	5c9b      	ldrb	r3, [r3, r2]
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d008      	beq.n	8000f6a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2204      	movs	r2, #4
 8000f5c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2224      	movs	r2, #36	@ 0x24
 8000f62:	2100      	movs	r1, #0
 8000f64:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e024      	b.n	8000fb4 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	210e      	movs	r1, #14
 8000f76:	438a      	bics	r2, r1
 8000f78:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2101      	movs	r1, #1
 8000f86:	438a      	bics	r2, r1
 8000f88:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f8e:	221c      	movs	r2, #28
 8000f90:	401a      	ands	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f96:	2101      	movs	r1, #1
 8000f98:	4091      	lsls	r1, r2
 8000f9a:	000a      	movs	r2, r1
 8000f9c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2225      	movs	r2, #37	@ 0x25
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2224      	movs	r2, #36	@ 0x24
 8000faa:	2100      	movs	r1, #0
 8000fac:	5499      	strb	r1, [r3, r2]

    return status;
 8000fae:	230f      	movs	r3, #15
 8000fb0:	18fb      	adds	r3, r7, r3
 8000fb2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	b004      	add	sp, #16
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fc4:	210f      	movs	r1, #15
 8000fc6:	187b      	adds	r3, r7, r1
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2225      	movs	r2, #37	@ 0x25
 8000fd0:	5c9b      	ldrb	r3, [r3, r2]
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d006      	beq.n	8000fe6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2204      	movs	r2, #4
 8000fdc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000fde:	187b      	adds	r3, r7, r1
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	701a      	strb	r2, [r3, #0]
 8000fe4:	e02a      	b.n	800103c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	210e      	movs	r1, #14
 8000ff2:	438a      	bics	r2, r1
 8000ff4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2101      	movs	r1, #1
 8001002:	438a      	bics	r2, r1
 8001004:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800100a:	221c      	movs	r2, #28
 800100c:	401a      	ands	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001012:	2101      	movs	r1, #1
 8001014:	4091      	lsls	r1, r2
 8001016:	000a      	movs	r2, r1
 8001018:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2225      	movs	r2, #37	@ 0x25
 800101e:	2101      	movs	r1, #1
 8001020:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2224      	movs	r2, #36	@ 0x24
 8001026:	2100      	movs	r1, #0
 8001028:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800102e:	2b00      	cmp	r3, #0
 8001030:	d004      	beq.n	800103c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	0010      	movs	r0, r2
 800103a:	4798      	blx	r3
    }
  }
  return status;
 800103c:	230f      	movs	r3, #15
 800103e:	18fb      	adds	r3, r7, r3
 8001040:	781b      	ldrb	r3, [r3, #0]
}
 8001042:	0018      	movs	r0, r3
 8001044:	46bd      	mov	sp, r7
 8001046:	b004      	add	sp, #16
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001062:	e155      	b.n	8001310 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2101      	movs	r1, #1
 800106a:	697a      	ldr	r2, [r7, #20]
 800106c:	4091      	lsls	r1, r2
 800106e:	000a      	movs	r2, r1
 8001070:	4013      	ands	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d100      	bne.n	800107c <HAL_GPIO_Init+0x30>
 800107a:	e146      	b.n	800130a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	2203      	movs	r2, #3
 8001082:	4013      	ands	r3, r2
 8001084:	2b01      	cmp	r3, #1
 8001086:	d005      	beq.n	8001094 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	2203      	movs	r2, #3
 800108e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001090:	2b02      	cmp	r3, #2
 8001092:	d130      	bne.n	80010f6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	2203      	movs	r2, #3
 80010a0:	409a      	lsls	r2, r3
 80010a2:	0013      	movs	r3, r2
 80010a4:	43da      	mvns	r2, r3
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	68da      	ldr	r2, [r3, #12]
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	409a      	lsls	r2, r3
 80010b6:	0013      	movs	r3, r2
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ca:	2201      	movs	r2, #1
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	409a      	lsls	r2, r3
 80010d0:	0013      	movs	r3, r2
 80010d2:	43da      	mvns	r2, r3
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	4013      	ands	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	091b      	lsrs	r3, r3, #4
 80010e0:	2201      	movs	r2, #1
 80010e2:	401a      	ands	r2, r3
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	409a      	lsls	r2, r3
 80010e8:	0013      	movs	r3, r2
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2203      	movs	r2, #3
 80010fc:	4013      	ands	r3, r2
 80010fe:	2b03      	cmp	r3, #3
 8001100:	d017      	beq.n	8001132 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	2203      	movs	r2, #3
 800110e:	409a      	lsls	r2, r3
 8001110:	0013      	movs	r3, r2
 8001112:	43da      	mvns	r2, r3
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	689a      	ldr	r2, [r3, #8]
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	409a      	lsls	r2, r3
 8001124:	0013      	movs	r3, r2
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2203      	movs	r2, #3
 8001138:	4013      	ands	r3, r2
 800113a:	2b02      	cmp	r3, #2
 800113c:	d123      	bne.n	8001186 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	08da      	lsrs	r2, r3, #3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	3208      	adds	r2, #8
 8001146:	0092      	lsls	r2, r2, #2
 8001148:	58d3      	ldr	r3, [r2, r3]
 800114a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	2207      	movs	r2, #7
 8001150:	4013      	ands	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	220f      	movs	r2, #15
 8001156:	409a      	lsls	r2, r3
 8001158:	0013      	movs	r3, r2
 800115a:	43da      	mvns	r2, r3
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	4013      	ands	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	691a      	ldr	r2, [r3, #16]
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	2107      	movs	r1, #7
 800116a:	400b      	ands	r3, r1
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	409a      	lsls	r2, r3
 8001170:	0013      	movs	r3, r2
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	08da      	lsrs	r2, r3, #3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3208      	adds	r2, #8
 8001180:	0092      	lsls	r2, r2, #2
 8001182:	6939      	ldr	r1, [r7, #16]
 8001184:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	2203      	movs	r2, #3
 8001192:	409a      	lsls	r2, r3
 8001194:	0013      	movs	r3, r2
 8001196:	43da      	mvns	r2, r3
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	4013      	ands	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2203      	movs	r2, #3
 80011a4:	401a      	ands	r2, r3
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	409a      	lsls	r2, r3
 80011ac:	0013      	movs	r3, r2
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685a      	ldr	r2, [r3, #4]
 80011be:	23c0      	movs	r3, #192	@ 0xc0
 80011c0:	029b      	lsls	r3, r3, #10
 80011c2:	4013      	ands	r3, r2
 80011c4:	d100      	bne.n	80011c8 <HAL_GPIO_Init+0x17c>
 80011c6:	e0a0      	b.n	800130a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c8:	4b57      	ldr	r3, [pc, #348]	@ (8001328 <HAL_GPIO_Init+0x2dc>)
 80011ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011cc:	4b56      	ldr	r3, [pc, #344]	@ (8001328 <HAL_GPIO_Init+0x2dc>)
 80011ce:	2101      	movs	r1, #1
 80011d0:	430a      	orrs	r2, r1
 80011d2:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80011d4:	4a55      	ldr	r2, [pc, #340]	@ (800132c <HAL_GPIO_Init+0x2e0>)
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	089b      	lsrs	r3, r3, #2
 80011da:	3302      	adds	r3, #2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	589b      	ldr	r3, [r3, r2]
 80011e0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	2203      	movs	r2, #3
 80011e6:	4013      	ands	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	220f      	movs	r2, #15
 80011ec:	409a      	lsls	r2, r3
 80011ee:	0013      	movs	r3, r2
 80011f0:	43da      	mvns	r2, r3
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	4013      	ands	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	23a0      	movs	r3, #160	@ 0xa0
 80011fc:	05db      	lsls	r3, r3, #23
 80011fe:	429a      	cmp	r2, r3
 8001200:	d01f      	beq.n	8001242 <HAL_GPIO_Init+0x1f6>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4a      	ldr	r2, [pc, #296]	@ (8001330 <HAL_GPIO_Init+0x2e4>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d019      	beq.n	800123e <HAL_GPIO_Init+0x1f2>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a49      	ldr	r2, [pc, #292]	@ (8001334 <HAL_GPIO_Init+0x2e8>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d013      	beq.n	800123a <HAL_GPIO_Init+0x1ee>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a48      	ldr	r2, [pc, #288]	@ (8001338 <HAL_GPIO_Init+0x2ec>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d00d      	beq.n	8001236 <HAL_GPIO_Init+0x1ea>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a47      	ldr	r2, [pc, #284]	@ (800133c <HAL_GPIO_Init+0x2f0>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d007      	beq.n	8001232 <HAL_GPIO_Init+0x1e6>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a46      	ldr	r2, [pc, #280]	@ (8001340 <HAL_GPIO_Init+0x2f4>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d101      	bne.n	800122e <HAL_GPIO_Init+0x1e2>
 800122a:	2305      	movs	r3, #5
 800122c:	e00a      	b.n	8001244 <HAL_GPIO_Init+0x1f8>
 800122e:	2306      	movs	r3, #6
 8001230:	e008      	b.n	8001244 <HAL_GPIO_Init+0x1f8>
 8001232:	2304      	movs	r3, #4
 8001234:	e006      	b.n	8001244 <HAL_GPIO_Init+0x1f8>
 8001236:	2303      	movs	r3, #3
 8001238:	e004      	b.n	8001244 <HAL_GPIO_Init+0x1f8>
 800123a:	2302      	movs	r3, #2
 800123c:	e002      	b.n	8001244 <HAL_GPIO_Init+0x1f8>
 800123e:	2301      	movs	r3, #1
 8001240:	e000      	b.n	8001244 <HAL_GPIO_Init+0x1f8>
 8001242:	2300      	movs	r3, #0
 8001244:	697a      	ldr	r2, [r7, #20]
 8001246:	2103      	movs	r1, #3
 8001248:	400a      	ands	r2, r1
 800124a:	0092      	lsls	r2, r2, #2
 800124c:	4093      	lsls	r3, r2
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001254:	4935      	ldr	r1, [pc, #212]	@ (800132c <HAL_GPIO_Init+0x2e0>)
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	089b      	lsrs	r3, r3, #2
 800125a:	3302      	adds	r3, #2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001262:	4b38      	ldr	r3, [pc, #224]	@ (8001344 <HAL_GPIO_Init+0x2f8>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	43da      	mvns	r2, r3
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	2380      	movs	r3, #128	@ 0x80
 8001278:	035b      	lsls	r3, r3, #13
 800127a:	4013      	ands	r3, r2
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4313      	orrs	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001286:	4b2f      	ldr	r3, [pc, #188]	@ (8001344 <HAL_GPIO_Init+0x2f8>)
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800128c:	4b2d      	ldr	r3, [pc, #180]	@ (8001344 <HAL_GPIO_Init+0x2f8>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	43da      	mvns	r2, r3
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	4013      	ands	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	2380      	movs	r3, #128	@ 0x80
 80012a2:	039b      	lsls	r3, r3, #14
 80012a4:	4013      	ands	r3, r2
 80012a6:	d003      	beq.n	80012b0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012b0:	4b24      	ldr	r3, [pc, #144]	@ (8001344 <HAL_GPIO_Init+0x2f8>)
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80012b6:	4b23      	ldr	r3, [pc, #140]	@ (8001344 <HAL_GPIO_Init+0x2f8>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	43da      	mvns	r2, r3
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	4013      	ands	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	2380      	movs	r3, #128	@ 0x80
 80012cc:	029b      	lsls	r3, r3, #10
 80012ce:	4013      	ands	r3, r2
 80012d0:	d003      	beq.n	80012da <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012da:	4b1a      	ldr	r3, [pc, #104]	@ (8001344 <HAL_GPIO_Init+0x2f8>)
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012e0:	4b18      	ldr	r3, [pc, #96]	@ (8001344 <HAL_GPIO_Init+0x2f8>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	43da      	mvns	r2, r3
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	4013      	ands	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685a      	ldr	r2, [r3, #4]
 80012f4:	2380      	movs	r3, #128	@ 0x80
 80012f6:	025b      	lsls	r3, r3, #9
 80012f8:	4013      	ands	r3, r2
 80012fa:	d003      	beq.n	8001304 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	4313      	orrs	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001304:	4b0f      	ldr	r3, [pc, #60]	@ (8001344 <HAL_GPIO_Init+0x2f8>)
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	3301      	adds	r3, #1
 800130e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	40da      	lsrs	r2, r3
 8001318:	1e13      	subs	r3, r2, #0
 800131a:	d000      	beq.n	800131e <HAL_GPIO_Init+0x2d2>
 800131c:	e6a2      	b.n	8001064 <HAL_GPIO_Init+0x18>
  }
}
 800131e:	46c0      	nop			@ (mov r8, r8)
 8001320:	46c0      	nop			@ (mov r8, r8)
 8001322:	46bd      	mov	sp, r7
 8001324:	b006      	add	sp, #24
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40021000 	.word	0x40021000
 800132c:	40010000 	.word	0x40010000
 8001330:	50000400 	.word	0x50000400
 8001334:	50000800 	.word	0x50000800
 8001338:	50000c00 	.word	0x50000c00
 800133c:	50001000 	.word	0x50001000
 8001340:	50001c00 	.word	0x50001c00
 8001344:	40010400 	.word	0x40010400

08001348 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	0008      	movs	r0, r1
 8001352:	0011      	movs	r1, r2
 8001354:	1cbb      	adds	r3, r7, #2
 8001356:	1c02      	adds	r2, r0, #0
 8001358:	801a      	strh	r2, [r3, #0]
 800135a:	1c7b      	adds	r3, r7, #1
 800135c:	1c0a      	adds	r2, r1, #0
 800135e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001360:	1c7b      	adds	r3, r7, #1
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d004      	beq.n	8001372 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001368:	1cbb      	adds	r3, r7, #2
 800136a:	881a      	ldrh	r2, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001370:	e003      	b.n	800137a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001372:	1cbb      	adds	r3, r7, #2
 8001374:	881a      	ldrh	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800137a:	46c0      	nop			@ (mov r8, r8)
 800137c:	46bd      	mov	sp, r7
 800137e:	b002      	add	sp, #8
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	0002      	movs	r2, r0
 800138c:	1dbb      	adds	r3, r7, #6
 800138e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001390:	4b09      	ldr	r3, [pc, #36]	@ (80013b8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001392:	695b      	ldr	r3, [r3, #20]
 8001394:	1dba      	adds	r2, r7, #6
 8001396:	8812      	ldrh	r2, [r2, #0]
 8001398:	4013      	ands	r3, r2
 800139a:	d008      	beq.n	80013ae <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800139c:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800139e:	1dba      	adds	r2, r7, #6
 80013a0:	8812      	ldrh	r2, [r2, #0]
 80013a2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013a4:	1dbb      	adds	r3, r7, #6
 80013a6:	881b      	ldrh	r3, [r3, #0]
 80013a8:	0018      	movs	r0, r3
 80013aa:	f000 f807 	bl	80013bc <HAL_GPIO_EXTI_Callback>
  }
}
 80013ae:	46c0      	nop			@ (mov r8, r8)
 80013b0:	46bd      	mov	sp, r7
 80013b2:	b002      	add	sp, #8
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	46c0      	nop			@ (mov r8, r8)
 80013b8:	40010400 	.word	0x40010400

080013bc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	0002      	movs	r2, r0
 80013c4:	1dbb      	adds	r3, r7, #6
 80013c6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80013c8:	46c0      	nop			@ (mov r8, r8)
 80013ca:	46bd      	mov	sp, r7
 80013cc:	b002      	add	sp, #8
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013d0:	b5b0      	push	{r4, r5, r7, lr}
 80013d2:	b08a      	sub	sp, #40	@ 0x28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d102      	bne.n	80013e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	f000 fbbf 	bl	8001b62 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013e4:	4bc9      	ldr	r3, [pc, #804]	@ (800170c <HAL_RCC_OscConfig+0x33c>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	220c      	movs	r2, #12
 80013ea:	4013      	ands	r3, r2
 80013ec:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013ee:	4bc7      	ldr	r3, [pc, #796]	@ (800170c <HAL_RCC_OscConfig+0x33c>)
 80013f0:	68da      	ldr	r2, [r3, #12]
 80013f2:	2380      	movs	r3, #128	@ 0x80
 80013f4:	025b      	lsls	r3, r3, #9
 80013f6:	4013      	ands	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2201      	movs	r2, #1
 8001400:	4013      	ands	r3, r2
 8001402:	d100      	bne.n	8001406 <HAL_RCC_OscConfig+0x36>
 8001404:	e07e      	b.n	8001504 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	2b08      	cmp	r3, #8
 800140a:	d007      	beq.n	800141c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	2b0c      	cmp	r3, #12
 8001410:	d112      	bne.n	8001438 <HAL_RCC_OscConfig+0x68>
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	2380      	movs	r3, #128	@ 0x80
 8001416:	025b      	lsls	r3, r3, #9
 8001418:	429a      	cmp	r2, r3
 800141a:	d10d      	bne.n	8001438 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800141c:	4bbb      	ldr	r3, [pc, #748]	@ (800170c <HAL_RCC_OscConfig+0x33c>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	2380      	movs	r3, #128	@ 0x80
 8001422:	029b      	lsls	r3, r3, #10
 8001424:	4013      	ands	r3, r2
 8001426:	d100      	bne.n	800142a <HAL_RCC_OscConfig+0x5a>
 8001428:	e06b      	b.n	8001502 <HAL_RCC_OscConfig+0x132>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d167      	bne.n	8001502 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	f000 fb95 	bl	8001b62 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	2380      	movs	r3, #128	@ 0x80
 800143e:	025b      	lsls	r3, r3, #9
 8001440:	429a      	cmp	r2, r3
 8001442:	d107      	bne.n	8001454 <HAL_RCC_OscConfig+0x84>
 8001444:	4bb1      	ldr	r3, [pc, #708]	@ (800170c <HAL_RCC_OscConfig+0x33c>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4bb0      	ldr	r3, [pc, #704]	@ (800170c <HAL_RCC_OscConfig+0x33c>)
 800144a:	2180      	movs	r1, #128	@ 0x80
 800144c:	0249      	lsls	r1, r1, #9
 800144e:	430a      	orrs	r2, r1
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	e027      	b.n	80014a4 <HAL_RCC_OscConfig+0xd4>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	23a0      	movs	r3, #160	@ 0xa0
 800145a:	02db      	lsls	r3, r3, #11
 800145c:	429a      	cmp	r2, r3
 800145e:	d10e      	bne.n	800147e <HAL_RCC_OscConfig+0xae>
 8001460:	4baa      	ldr	r3, [pc, #680]	@ (800170c <HAL_RCC_OscConfig+0x33c>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4ba9      	ldr	r3, [pc, #676]	@ (800170c <HAL_RCC_OscConfig+0x33c>)
 8001466:	2180      	movs	r1, #128	@ 0x80
 8001468:	02c9      	lsls	r1, r1, #11
 800146a:	430a      	orrs	r2, r1
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	4ba7      	ldr	r3, [pc, #668]	@ (800170c <HAL_RCC_OscConfig+0x33c>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	4ba6      	ldr	r3, [pc, #664]	@ (800170c <HAL_RCC_OscConfig+0x33c>)
 8001474:	2180      	movs	r1, #128	@ 0x80
 8001476:	0249      	lsls	r1, r1, #9
 8001478:	430a      	orrs	r2, r1
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	e012      	b.n	80014a4 <HAL_RCC_OscConfig+0xd4>
 800147e:	4ba3      	ldr	r3, [pc, #652]	@ (800170c <HAL_RCC_OscConfig+0x33c>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	4ba2      	ldr	r3, [pc, #648]	@ (800170c <HAL_RCC_OscConfig+0x33c>)
 8001484:	49a2      	ldr	r1, [pc, #648]	@ (8001710 <HAL_RCC_OscConfig+0x340>)
 8001486:	400a      	ands	r2, r1
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	4ba0      	ldr	r3, [pc, #640]	@ (800170c <HAL_RCC_OscConfig+0x33c>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	2380      	movs	r3, #128	@ 0x80
 8001490:	025b      	lsls	r3, r3, #9
 8001492:	4013      	ands	r3, r2
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	4b9c      	ldr	r3, [pc, #624]	@ (800170c <HAL_RCC_OscConfig+0x33c>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4b9b      	ldr	r3, [pc, #620]	@ (800170c <HAL_RCC_OscConfig+0x33c>)
 800149e:	499d      	ldr	r1, [pc, #628]	@ (8001714 <HAL_RCC_OscConfig+0x344>)
 80014a0:	400a      	ands	r2, r1
 80014a2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d015      	beq.n	80014d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ac:	f7ff fc3a 	bl	8000d24 <HAL_GetTick>
 80014b0:	0003      	movs	r3, r0
 80014b2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014b4:	e009      	b.n	80014ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014b6:	f7ff fc35 	bl	8000d24 <HAL_GetTick>
 80014ba:	0002      	movs	r2, r0
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b64      	cmp	r3, #100	@ 0x64
 80014c2:	d902      	bls.n	80014ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	f000 fb4c 	bl	8001b62 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80014ca:	4b90      	ldr	r3, [pc, #576]	@ (800170c <HAL_RCC_OscConfig+0x33c>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	2380      	movs	r3, #128	@ 0x80
 80014d0:	029b      	lsls	r3, r3, #10
 80014d2:	4013      	ands	r3, r2
 80014d4:	d0ef      	beq.n	80014b6 <HAL_RCC_OscConfig+0xe6>
 80014d6:	e015      	b.n	8001504 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d8:	f7ff fc24 	bl	8000d24 <HAL_GetTick>
 80014dc:	0003      	movs	r3, r0
 80014de:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014e0:	e008      	b.n	80014f4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014e2:	f7ff fc1f 	bl	8000d24 <HAL_GetTick>
 80014e6:	0002      	movs	r2, r0
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b64      	cmp	r3, #100	@ 0x64
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e336      	b.n	8001b62 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014f4:	4b85      	ldr	r3, [pc, #532]	@ (800170c <HAL_RCC_OscConfig+0x33c>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	2380      	movs	r3, #128	@ 0x80
 80014fa:	029b      	lsls	r3, r3, #10
 80014fc:	4013      	ands	r3, r2
 80014fe:	d1f0      	bne.n	80014e2 <HAL_RCC_OscConfig+0x112>
 8001500:	e000      	b.n	8001504 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001502:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2202      	movs	r2, #2
 800150a:	4013      	ands	r3, r2
 800150c:	d100      	bne.n	8001510 <HAL_RCC_OscConfig+0x140>
 800150e:	e099      	b.n	8001644 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001518:	2220      	movs	r2, #32
 800151a:	4013      	ands	r3, r2
 800151c:	d009      	beq.n	8001532 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800151e:	4b7b      	ldr	r3, [pc, #492]	@ (800170c <HAL_RCC_OscConfig+0x33c>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	4b7a      	ldr	r3, [pc, #488]	@ (800170c <HAL_RCC_OscConfig+0x33c>)
 8001524:	2120      	movs	r1, #32
 8001526:	430a      	orrs	r2, r1
 8001528:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800152a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152c:	2220      	movs	r2, #32
 800152e:	4393      	bics	r3, r2
 8001530:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	2b04      	cmp	r3, #4
 8001536:	d005      	beq.n	8001544 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	2b0c      	cmp	r3, #12
 800153c:	d13e      	bne.n	80015bc <HAL_RCC_OscConfig+0x1ec>
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d13b      	bne.n	80015bc <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001544:	4b71      	ldr	r3, [pc, #452]	@ (800170c <HAL_RCC_OscConfig+0x33c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2204      	movs	r2, #4
 800154a:	4013      	ands	r3, r2
 800154c:	d004      	beq.n	8001558 <HAL_RCC_OscConfig+0x188>
 800154e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001550:	2b00      	cmp	r3, #0
 8001552:	d101      	bne.n	8001558 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e304      	b.n	8001b62 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001558:	4b6c      	ldr	r3, [pc, #432]	@ (800170c <HAL_RCC_OscConfig+0x33c>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	4a6e      	ldr	r2, [pc, #440]	@ (8001718 <HAL_RCC_OscConfig+0x348>)
 800155e:	4013      	ands	r3, r2
 8001560:	0019      	movs	r1, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	021a      	lsls	r2, r3, #8
 8001568:	4b68      	ldr	r3, [pc, #416]	@ (800170c <HAL_RCC_OscConfig+0x33c>)
 800156a:	430a      	orrs	r2, r1
 800156c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800156e:	4b67      	ldr	r3, [pc, #412]	@ (800170c <HAL_RCC_OscConfig+0x33c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2209      	movs	r2, #9
 8001574:	4393      	bics	r3, r2
 8001576:	0019      	movs	r1, r3
 8001578:	4b64      	ldr	r3, [pc, #400]	@ (800170c <HAL_RCC_OscConfig+0x33c>)
 800157a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800157c:	430a      	orrs	r2, r1
 800157e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001580:	f000 fc42 	bl	8001e08 <HAL_RCC_GetSysClockFreq>
 8001584:	0001      	movs	r1, r0
 8001586:	4b61      	ldr	r3, [pc, #388]	@ (800170c <HAL_RCC_OscConfig+0x33c>)
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	091b      	lsrs	r3, r3, #4
 800158c:	220f      	movs	r2, #15
 800158e:	4013      	ands	r3, r2
 8001590:	4a62      	ldr	r2, [pc, #392]	@ (800171c <HAL_RCC_OscConfig+0x34c>)
 8001592:	5cd3      	ldrb	r3, [r2, r3]
 8001594:	000a      	movs	r2, r1
 8001596:	40da      	lsrs	r2, r3
 8001598:	4b61      	ldr	r3, [pc, #388]	@ (8001720 <HAL_RCC_OscConfig+0x350>)
 800159a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800159c:	4b61      	ldr	r3, [pc, #388]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2513      	movs	r5, #19
 80015a2:	197c      	adds	r4, r7, r5
 80015a4:	0018      	movs	r0, r3
 80015a6:	f7ff fb77 	bl	8000c98 <HAL_InitTick>
 80015aa:	0003      	movs	r3, r0
 80015ac:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80015ae:	197b      	adds	r3, r7, r5
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d046      	beq.n	8001644 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80015b6:	197b      	adds	r3, r7, r5
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	e2d2      	b.n	8001b62 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80015bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d027      	beq.n	8001612 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80015c2:	4b52      	ldr	r3, [pc, #328]	@ (800170c <HAL_RCC_OscConfig+0x33c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2209      	movs	r2, #9
 80015c8:	4393      	bics	r3, r2
 80015ca:	0019      	movs	r1, r3
 80015cc:	4b4f      	ldr	r3, [pc, #316]	@ (800170c <HAL_RCC_OscConfig+0x33c>)
 80015ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015d0:	430a      	orrs	r2, r1
 80015d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d4:	f7ff fba6 	bl	8000d24 <HAL_GetTick>
 80015d8:	0003      	movs	r3, r0
 80015da:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015de:	f7ff fba1 	bl	8000d24 <HAL_GetTick>
 80015e2:	0002      	movs	r2, r0
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e2b8      	b.n	8001b62 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015f0:	4b46      	ldr	r3, [pc, #280]	@ (800170c <HAL_RCC_OscConfig+0x33c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2204      	movs	r2, #4
 80015f6:	4013      	ands	r3, r2
 80015f8:	d0f1      	beq.n	80015de <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015fa:	4b44      	ldr	r3, [pc, #272]	@ (800170c <HAL_RCC_OscConfig+0x33c>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	4a46      	ldr	r2, [pc, #280]	@ (8001718 <HAL_RCC_OscConfig+0x348>)
 8001600:	4013      	ands	r3, r2
 8001602:	0019      	movs	r1, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	021a      	lsls	r2, r3, #8
 800160a:	4b40      	ldr	r3, [pc, #256]	@ (800170c <HAL_RCC_OscConfig+0x33c>)
 800160c:	430a      	orrs	r2, r1
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	e018      	b.n	8001644 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001612:	4b3e      	ldr	r3, [pc, #248]	@ (800170c <HAL_RCC_OscConfig+0x33c>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	4b3d      	ldr	r3, [pc, #244]	@ (800170c <HAL_RCC_OscConfig+0x33c>)
 8001618:	2101      	movs	r1, #1
 800161a:	438a      	bics	r2, r1
 800161c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161e:	f7ff fb81 	bl	8000d24 <HAL_GetTick>
 8001622:	0003      	movs	r3, r0
 8001624:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001628:	f7ff fb7c 	bl	8000d24 <HAL_GetTick>
 800162c:	0002      	movs	r2, r0
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e293      	b.n	8001b62 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800163a:	4b34      	ldr	r3, [pc, #208]	@ (800170c <HAL_RCC_OscConfig+0x33c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2204      	movs	r2, #4
 8001640:	4013      	ands	r3, r2
 8001642:	d1f1      	bne.n	8001628 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2210      	movs	r2, #16
 800164a:	4013      	ands	r3, r2
 800164c:	d100      	bne.n	8001650 <HAL_RCC_OscConfig+0x280>
 800164e:	e0a2      	b.n	8001796 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d140      	bne.n	80016d8 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001656:	4b2d      	ldr	r3, [pc, #180]	@ (800170c <HAL_RCC_OscConfig+0x33c>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	2380      	movs	r3, #128	@ 0x80
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4013      	ands	r3, r2
 8001660:	d005      	beq.n	800166e <HAL_RCC_OscConfig+0x29e>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e279      	b.n	8001b62 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800166e:	4b27      	ldr	r3, [pc, #156]	@ (800170c <HAL_RCC_OscConfig+0x33c>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	4a2d      	ldr	r2, [pc, #180]	@ (8001728 <HAL_RCC_OscConfig+0x358>)
 8001674:	4013      	ands	r3, r2
 8001676:	0019      	movs	r1, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800167c:	4b23      	ldr	r3, [pc, #140]	@ (800170c <HAL_RCC_OscConfig+0x33c>)
 800167e:	430a      	orrs	r2, r1
 8001680:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001682:	4b22      	ldr	r3, [pc, #136]	@ (800170c <HAL_RCC_OscConfig+0x33c>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	021b      	lsls	r3, r3, #8
 8001688:	0a19      	lsrs	r1, r3, #8
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	061a      	lsls	r2, r3, #24
 8001690:	4b1e      	ldr	r3, [pc, #120]	@ (800170c <HAL_RCC_OscConfig+0x33c>)
 8001692:	430a      	orrs	r2, r1
 8001694:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800169a:	0b5b      	lsrs	r3, r3, #13
 800169c:	3301      	adds	r3, #1
 800169e:	2280      	movs	r2, #128	@ 0x80
 80016a0:	0212      	lsls	r2, r2, #8
 80016a2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80016a4:	4b19      	ldr	r3, [pc, #100]	@ (800170c <HAL_RCC_OscConfig+0x33c>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	091b      	lsrs	r3, r3, #4
 80016aa:	210f      	movs	r1, #15
 80016ac:	400b      	ands	r3, r1
 80016ae:	491b      	ldr	r1, [pc, #108]	@ (800171c <HAL_RCC_OscConfig+0x34c>)
 80016b0:	5ccb      	ldrb	r3, [r1, r3]
 80016b2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80016b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001720 <HAL_RCC_OscConfig+0x350>)
 80016b6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80016b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001724 <HAL_RCC_OscConfig+0x354>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2513      	movs	r5, #19
 80016be:	197c      	adds	r4, r7, r5
 80016c0:	0018      	movs	r0, r3
 80016c2:	f7ff fae9 	bl	8000c98 <HAL_InitTick>
 80016c6:	0003      	movs	r3, r0
 80016c8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80016ca:	197b      	adds	r3, r7, r5
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d061      	beq.n	8001796 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80016d2:	197b      	adds	r3, r7, r5
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	e244      	b.n	8001b62 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	69db      	ldr	r3, [r3, #28]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d040      	beq.n	8001762 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016e0:	4b0a      	ldr	r3, [pc, #40]	@ (800170c <HAL_RCC_OscConfig+0x33c>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4b09      	ldr	r3, [pc, #36]	@ (800170c <HAL_RCC_OscConfig+0x33c>)
 80016e6:	2180      	movs	r1, #128	@ 0x80
 80016e8:	0049      	lsls	r1, r1, #1
 80016ea:	430a      	orrs	r2, r1
 80016ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ee:	f7ff fb19 	bl	8000d24 <HAL_GetTick>
 80016f2:	0003      	movs	r3, r0
 80016f4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016f6:	e019      	b.n	800172c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016f8:	f7ff fb14 	bl	8000d24 <HAL_GetTick>
 80016fc:	0002      	movs	r2, r0
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d912      	bls.n	800172c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e22b      	b.n	8001b62 <HAL_RCC_OscConfig+0x792>
 800170a:	46c0      	nop			@ (mov r8, r8)
 800170c:	40021000 	.word	0x40021000
 8001710:	fffeffff 	.word	0xfffeffff
 8001714:	fffbffff 	.word	0xfffbffff
 8001718:	ffffe0ff 	.word	0xffffe0ff
 800171c:	08003d7c 	.word	0x08003d7c
 8001720:	20000000 	.word	0x20000000
 8001724:	20000004 	.word	0x20000004
 8001728:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800172c:	4bca      	ldr	r3, [pc, #808]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	2380      	movs	r3, #128	@ 0x80
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4013      	ands	r3, r2
 8001736:	d0df      	beq.n	80016f8 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001738:	4bc7      	ldr	r3, [pc, #796]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	4ac7      	ldr	r2, [pc, #796]	@ (8001a5c <HAL_RCC_OscConfig+0x68c>)
 800173e:	4013      	ands	r3, r2
 8001740:	0019      	movs	r1, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001746:	4bc4      	ldr	r3, [pc, #784]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 8001748:	430a      	orrs	r2, r1
 800174a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800174c:	4bc2      	ldr	r3, [pc, #776]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	021b      	lsls	r3, r3, #8
 8001752:	0a19      	lsrs	r1, r3, #8
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a1b      	ldr	r3, [r3, #32]
 8001758:	061a      	lsls	r2, r3, #24
 800175a:	4bbf      	ldr	r3, [pc, #764]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 800175c:	430a      	orrs	r2, r1
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	e019      	b.n	8001796 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001762:	4bbd      	ldr	r3, [pc, #756]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	4bbc      	ldr	r3, [pc, #752]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 8001768:	49bd      	ldr	r1, [pc, #756]	@ (8001a60 <HAL_RCC_OscConfig+0x690>)
 800176a:	400a      	ands	r2, r1
 800176c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176e:	f7ff fad9 	bl	8000d24 <HAL_GetTick>
 8001772:	0003      	movs	r3, r0
 8001774:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001778:	f7ff fad4 	bl	8000d24 <HAL_GetTick>
 800177c:	0002      	movs	r2, r0
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e1eb      	b.n	8001b62 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800178a:	4bb3      	ldr	r3, [pc, #716]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	2380      	movs	r3, #128	@ 0x80
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4013      	ands	r3, r2
 8001794:	d1f0      	bne.n	8001778 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2208      	movs	r2, #8
 800179c:	4013      	ands	r3, r2
 800179e:	d036      	beq.n	800180e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	695b      	ldr	r3, [r3, #20]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d019      	beq.n	80017dc <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017a8:	4bab      	ldr	r3, [pc, #684]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 80017aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80017ac:	4baa      	ldr	r3, [pc, #680]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 80017ae:	2101      	movs	r1, #1
 80017b0:	430a      	orrs	r2, r1
 80017b2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b4:	f7ff fab6 	bl	8000d24 <HAL_GetTick>
 80017b8:	0003      	movs	r3, r0
 80017ba:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017be:	f7ff fab1 	bl	8000d24 <HAL_GetTick>
 80017c2:	0002      	movs	r2, r0
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e1c8      	b.n	8001b62 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017d0:	4ba1      	ldr	r3, [pc, #644]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 80017d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017d4:	2202      	movs	r2, #2
 80017d6:	4013      	ands	r3, r2
 80017d8:	d0f1      	beq.n	80017be <HAL_RCC_OscConfig+0x3ee>
 80017da:	e018      	b.n	800180e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017dc:	4b9e      	ldr	r3, [pc, #632]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 80017de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80017e0:	4b9d      	ldr	r3, [pc, #628]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 80017e2:	2101      	movs	r1, #1
 80017e4:	438a      	bics	r2, r1
 80017e6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e8:	f7ff fa9c 	bl	8000d24 <HAL_GetTick>
 80017ec:	0003      	movs	r3, r0
 80017ee:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017f2:	f7ff fa97 	bl	8000d24 <HAL_GetTick>
 80017f6:	0002      	movs	r2, r0
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e1ae      	b.n	8001b62 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001804:	4b94      	ldr	r3, [pc, #592]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 8001806:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001808:	2202      	movs	r2, #2
 800180a:	4013      	ands	r3, r2
 800180c:	d1f1      	bne.n	80017f2 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2204      	movs	r2, #4
 8001814:	4013      	ands	r3, r2
 8001816:	d100      	bne.n	800181a <HAL_RCC_OscConfig+0x44a>
 8001818:	e0ae      	b.n	8001978 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800181a:	2023      	movs	r0, #35	@ 0x23
 800181c:	183b      	adds	r3, r7, r0
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001822:	4b8d      	ldr	r3, [pc, #564]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 8001824:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001826:	2380      	movs	r3, #128	@ 0x80
 8001828:	055b      	lsls	r3, r3, #21
 800182a:	4013      	ands	r3, r2
 800182c:	d109      	bne.n	8001842 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800182e:	4b8a      	ldr	r3, [pc, #552]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 8001830:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001832:	4b89      	ldr	r3, [pc, #548]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 8001834:	2180      	movs	r1, #128	@ 0x80
 8001836:	0549      	lsls	r1, r1, #21
 8001838:	430a      	orrs	r2, r1
 800183a:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800183c:	183b      	adds	r3, r7, r0
 800183e:	2201      	movs	r2, #1
 8001840:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001842:	4b88      	ldr	r3, [pc, #544]	@ (8001a64 <HAL_RCC_OscConfig+0x694>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	2380      	movs	r3, #128	@ 0x80
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	4013      	ands	r3, r2
 800184c:	d11a      	bne.n	8001884 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800184e:	4b85      	ldr	r3, [pc, #532]	@ (8001a64 <HAL_RCC_OscConfig+0x694>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	4b84      	ldr	r3, [pc, #528]	@ (8001a64 <HAL_RCC_OscConfig+0x694>)
 8001854:	2180      	movs	r1, #128	@ 0x80
 8001856:	0049      	lsls	r1, r1, #1
 8001858:	430a      	orrs	r2, r1
 800185a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800185c:	f7ff fa62 	bl	8000d24 <HAL_GetTick>
 8001860:	0003      	movs	r3, r0
 8001862:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001866:	f7ff fa5d 	bl	8000d24 <HAL_GetTick>
 800186a:	0002      	movs	r2, r0
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b64      	cmp	r3, #100	@ 0x64
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e174      	b.n	8001b62 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001878:	4b7a      	ldr	r3, [pc, #488]	@ (8001a64 <HAL_RCC_OscConfig+0x694>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	2380      	movs	r3, #128	@ 0x80
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	4013      	ands	r3, r2
 8001882:	d0f0      	beq.n	8001866 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	2380      	movs	r3, #128	@ 0x80
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	429a      	cmp	r2, r3
 800188e:	d107      	bne.n	80018a0 <HAL_RCC_OscConfig+0x4d0>
 8001890:	4b71      	ldr	r3, [pc, #452]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 8001892:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001894:	4b70      	ldr	r3, [pc, #448]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 8001896:	2180      	movs	r1, #128	@ 0x80
 8001898:	0049      	lsls	r1, r1, #1
 800189a:	430a      	orrs	r2, r1
 800189c:	651a      	str	r2, [r3, #80]	@ 0x50
 800189e:	e031      	b.n	8001904 <HAL_RCC_OscConfig+0x534>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d10c      	bne.n	80018c2 <HAL_RCC_OscConfig+0x4f2>
 80018a8:	4b6b      	ldr	r3, [pc, #428]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 80018aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80018ac:	4b6a      	ldr	r3, [pc, #424]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 80018ae:	496c      	ldr	r1, [pc, #432]	@ (8001a60 <HAL_RCC_OscConfig+0x690>)
 80018b0:	400a      	ands	r2, r1
 80018b2:	651a      	str	r2, [r3, #80]	@ 0x50
 80018b4:	4b68      	ldr	r3, [pc, #416]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 80018b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80018b8:	4b67      	ldr	r3, [pc, #412]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 80018ba:	496b      	ldr	r1, [pc, #428]	@ (8001a68 <HAL_RCC_OscConfig+0x698>)
 80018bc:	400a      	ands	r2, r1
 80018be:	651a      	str	r2, [r3, #80]	@ 0x50
 80018c0:	e020      	b.n	8001904 <HAL_RCC_OscConfig+0x534>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689a      	ldr	r2, [r3, #8]
 80018c6:	23a0      	movs	r3, #160	@ 0xa0
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d10e      	bne.n	80018ec <HAL_RCC_OscConfig+0x51c>
 80018ce:	4b62      	ldr	r3, [pc, #392]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 80018d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80018d2:	4b61      	ldr	r3, [pc, #388]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 80018d4:	2180      	movs	r1, #128	@ 0x80
 80018d6:	00c9      	lsls	r1, r1, #3
 80018d8:	430a      	orrs	r2, r1
 80018da:	651a      	str	r2, [r3, #80]	@ 0x50
 80018dc:	4b5e      	ldr	r3, [pc, #376]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 80018de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80018e0:	4b5d      	ldr	r3, [pc, #372]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 80018e2:	2180      	movs	r1, #128	@ 0x80
 80018e4:	0049      	lsls	r1, r1, #1
 80018e6:	430a      	orrs	r2, r1
 80018e8:	651a      	str	r2, [r3, #80]	@ 0x50
 80018ea:	e00b      	b.n	8001904 <HAL_RCC_OscConfig+0x534>
 80018ec:	4b5a      	ldr	r3, [pc, #360]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 80018ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80018f0:	4b59      	ldr	r3, [pc, #356]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 80018f2:	495b      	ldr	r1, [pc, #364]	@ (8001a60 <HAL_RCC_OscConfig+0x690>)
 80018f4:	400a      	ands	r2, r1
 80018f6:	651a      	str	r2, [r3, #80]	@ 0x50
 80018f8:	4b57      	ldr	r3, [pc, #348]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 80018fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80018fc:	4b56      	ldr	r3, [pc, #344]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 80018fe:	495a      	ldr	r1, [pc, #360]	@ (8001a68 <HAL_RCC_OscConfig+0x698>)
 8001900:	400a      	ands	r2, r1
 8001902:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d015      	beq.n	8001938 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800190c:	f7ff fa0a 	bl	8000d24 <HAL_GetTick>
 8001910:	0003      	movs	r3, r0
 8001912:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001914:	e009      	b.n	800192a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001916:	f7ff fa05 	bl	8000d24 <HAL_GetTick>
 800191a:	0002      	movs	r2, r0
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	4a52      	ldr	r2, [pc, #328]	@ (8001a6c <HAL_RCC_OscConfig+0x69c>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e11b      	b.n	8001b62 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800192a:	4b4b      	ldr	r3, [pc, #300]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 800192c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800192e:	2380      	movs	r3, #128	@ 0x80
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4013      	ands	r3, r2
 8001934:	d0ef      	beq.n	8001916 <HAL_RCC_OscConfig+0x546>
 8001936:	e014      	b.n	8001962 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001938:	f7ff f9f4 	bl	8000d24 <HAL_GetTick>
 800193c:	0003      	movs	r3, r0
 800193e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001940:	e009      	b.n	8001956 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001942:	f7ff f9ef 	bl	8000d24 <HAL_GetTick>
 8001946:	0002      	movs	r2, r0
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	4a47      	ldr	r2, [pc, #284]	@ (8001a6c <HAL_RCC_OscConfig+0x69c>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e105      	b.n	8001b62 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001956:	4b40      	ldr	r3, [pc, #256]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 8001958:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800195a:	2380      	movs	r3, #128	@ 0x80
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4013      	ands	r3, r2
 8001960:	d1ef      	bne.n	8001942 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001962:	2323      	movs	r3, #35	@ 0x23
 8001964:	18fb      	adds	r3, r7, r3
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d105      	bne.n	8001978 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800196c:	4b3a      	ldr	r3, [pc, #232]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 800196e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001970:	4b39      	ldr	r3, [pc, #228]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 8001972:	493f      	ldr	r1, [pc, #252]	@ (8001a70 <HAL_RCC_OscConfig+0x6a0>)
 8001974:	400a      	ands	r2, r1
 8001976:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2220      	movs	r2, #32
 800197e:	4013      	ands	r3, r2
 8001980:	d049      	beq.n	8001a16 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d026      	beq.n	80019d8 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800198a:	4b33      	ldr	r3, [pc, #204]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 800198c:	689a      	ldr	r2, [r3, #8]
 800198e:	4b32      	ldr	r3, [pc, #200]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 8001990:	2101      	movs	r1, #1
 8001992:	430a      	orrs	r2, r1
 8001994:	609a      	str	r2, [r3, #8]
 8001996:	4b30      	ldr	r3, [pc, #192]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 8001998:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800199a:	4b2f      	ldr	r3, [pc, #188]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 800199c:	2101      	movs	r1, #1
 800199e:	430a      	orrs	r2, r1
 80019a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80019a2:	4b34      	ldr	r3, [pc, #208]	@ (8001a74 <HAL_RCC_OscConfig+0x6a4>)
 80019a4:	6a1a      	ldr	r2, [r3, #32]
 80019a6:	4b33      	ldr	r3, [pc, #204]	@ (8001a74 <HAL_RCC_OscConfig+0x6a4>)
 80019a8:	2180      	movs	r1, #128	@ 0x80
 80019aa:	0189      	lsls	r1, r1, #6
 80019ac:	430a      	orrs	r2, r1
 80019ae:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b0:	f7ff f9b8 	bl	8000d24 <HAL_GetTick>
 80019b4:	0003      	movs	r3, r0
 80019b6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019ba:	f7ff f9b3 	bl	8000d24 <HAL_GetTick>
 80019be:	0002      	movs	r2, r0
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e0ca      	b.n	8001b62 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80019cc:	4b22      	ldr	r3, [pc, #136]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	2202      	movs	r2, #2
 80019d2:	4013      	ands	r3, r2
 80019d4:	d0f1      	beq.n	80019ba <HAL_RCC_OscConfig+0x5ea>
 80019d6:	e01e      	b.n	8001a16 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80019d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 80019de:	2101      	movs	r1, #1
 80019e0:	438a      	bics	r2, r1
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	4b23      	ldr	r3, [pc, #140]	@ (8001a74 <HAL_RCC_OscConfig+0x6a4>)
 80019e6:	6a1a      	ldr	r2, [r3, #32]
 80019e8:	4b22      	ldr	r3, [pc, #136]	@ (8001a74 <HAL_RCC_OscConfig+0x6a4>)
 80019ea:	4923      	ldr	r1, [pc, #140]	@ (8001a78 <HAL_RCC_OscConfig+0x6a8>)
 80019ec:	400a      	ands	r2, r1
 80019ee:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f0:	f7ff f998 	bl	8000d24 <HAL_GetTick>
 80019f4:	0003      	movs	r3, r0
 80019f6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019fa:	f7ff f993 	bl	8000d24 <HAL_GetTick>
 80019fe:	0002      	movs	r2, r0
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e0aa      	b.n	8001b62 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a0c:	4b12      	ldr	r3, [pc, #72]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	2202      	movs	r2, #2
 8001a12:	4013      	ands	r3, r2
 8001a14:	d1f1      	bne.n	80019fa <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d100      	bne.n	8001a20 <HAL_RCC_OscConfig+0x650>
 8001a1e:	e09f      	b.n	8001b60 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	2b0c      	cmp	r3, #12
 8001a24:	d100      	bne.n	8001a28 <HAL_RCC_OscConfig+0x658>
 8001a26:	e078      	b.n	8001b1a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d159      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a30:	4b09      	ldr	r3, [pc, #36]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4b08      	ldr	r3, [pc, #32]	@ (8001a58 <HAL_RCC_OscConfig+0x688>)
 8001a36:	4911      	ldr	r1, [pc, #68]	@ (8001a7c <HAL_RCC_OscConfig+0x6ac>)
 8001a38:	400a      	ands	r2, r1
 8001a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3c:	f7ff f972 	bl	8000d24 <HAL_GetTick>
 8001a40:	0003      	movs	r3, r0
 8001a42:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a44:	e01c      	b.n	8001a80 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a46:	f7ff f96d 	bl	8000d24 <HAL_GetTick>
 8001a4a:	0002      	movs	r2, r0
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d915      	bls.n	8001a80 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e084      	b.n	8001b62 <HAL_RCC_OscConfig+0x792>
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	ffff1fff 	.word	0xffff1fff
 8001a60:	fffffeff 	.word	0xfffffeff
 8001a64:	40007000 	.word	0x40007000
 8001a68:	fffffbff 	.word	0xfffffbff
 8001a6c:	00001388 	.word	0x00001388
 8001a70:	efffffff 	.word	0xefffffff
 8001a74:	40010000 	.word	0x40010000
 8001a78:	ffffdfff 	.word	0xffffdfff
 8001a7c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a80:	4b3a      	ldr	r3, [pc, #232]	@ (8001b6c <HAL_RCC_OscConfig+0x79c>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	2380      	movs	r3, #128	@ 0x80
 8001a86:	049b      	lsls	r3, r3, #18
 8001a88:	4013      	ands	r3, r2
 8001a8a:	d1dc      	bne.n	8001a46 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a8c:	4b37      	ldr	r3, [pc, #220]	@ (8001b6c <HAL_RCC_OscConfig+0x79c>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	4a37      	ldr	r2, [pc, #220]	@ (8001b70 <HAL_RCC_OscConfig+0x7a0>)
 8001a92:	4013      	ands	r3, r2
 8001a94:	0019      	movs	r1, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	4b31      	ldr	r3, [pc, #196]	@ (8001b6c <HAL_RCC_OscConfig+0x79c>)
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aac:	4b2f      	ldr	r3, [pc, #188]	@ (8001b6c <HAL_RCC_OscConfig+0x79c>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8001b6c <HAL_RCC_OscConfig+0x79c>)
 8001ab2:	2180      	movs	r1, #128	@ 0x80
 8001ab4:	0449      	lsls	r1, r1, #17
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aba:	f7ff f933 	bl	8000d24 <HAL_GetTick>
 8001abe:	0003      	movs	r3, r0
 8001ac0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac4:	f7ff f92e 	bl	8000d24 <HAL_GetTick>
 8001ac8:	0002      	movs	r2, r0
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e045      	b.n	8001b62 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001ad6:	4b25      	ldr	r3, [pc, #148]	@ (8001b6c <HAL_RCC_OscConfig+0x79c>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	2380      	movs	r3, #128	@ 0x80
 8001adc:	049b      	lsls	r3, r3, #18
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d0f0      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x6f4>
 8001ae2:	e03d      	b.n	8001b60 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae4:	4b21      	ldr	r3, [pc, #132]	@ (8001b6c <HAL_RCC_OscConfig+0x79c>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4b20      	ldr	r3, [pc, #128]	@ (8001b6c <HAL_RCC_OscConfig+0x79c>)
 8001aea:	4922      	ldr	r1, [pc, #136]	@ (8001b74 <HAL_RCC_OscConfig+0x7a4>)
 8001aec:	400a      	ands	r2, r1
 8001aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af0:	f7ff f918 	bl	8000d24 <HAL_GetTick>
 8001af4:	0003      	movs	r3, r0
 8001af6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001afa:	f7ff f913 	bl	8000d24 <HAL_GetTick>
 8001afe:	0002      	movs	r2, r0
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e02a      	b.n	8001b62 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b0c:	4b17      	ldr	r3, [pc, #92]	@ (8001b6c <HAL_RCC_OscConfig+0x79c>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	2380      	movs	r3, #128	@ 0x80
 8001b12:	049b      	lsls	r3, r3, #18
 8001b14:	4013      	ands	r3, r2
 8001b16:	d1f0      	bne.n	8001afa <HAL_RCC_OscConfig+0x72a>
 8001b18:	e022      	b.n	8001b60 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d101      	bne.n	8001b26 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e01d      	b.n	8001b62 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b26:	4b11      	ldr	r3, [pc, #68]	@ (8001b6c <HAL_RCC_OscConfig+0x79c>)
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	2380      	movs	r3, #128	@ 0x80
 8001b30:	025b      	lsls	r3, r3, #9
 8001b32:	401a      	ands	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d10f      	bne.n	8001b5c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	23f0      	movs	r3, #240	@ 0xf0
 8001b40:	039b      	lsls	r3, r3, #14
 8001b42:	401a      	ands	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d107      	bne.n	8001b5c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	23c0      	movs	r3, #192	@ 0xc0
 8001b50:	041b      	lsls	r3, r3, #16
 8001b52:	401a      	ands	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d001      	beq.n	8001b60 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	0018      	movs	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	b00a      	add	sp, #40	@ 0x28
 8001b68:	bdb0      	pop	{r4, r5, r7, pc}
 8001b6a:	46c0      	nop			@ (mov r8, r8)
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	ff02ffff 	.word	0xff02ffff
 8001b74:	feffffff 	.word	0xfeffffff

08001b78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b78:	b5b0      	push	{r4, r5, r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d101      	bne.n	8001b8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e128      	b.n	8001dde <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b8c:	4b96      	ldr	r3, [pc, #600]	@ (8001de8 <HAL_RCC_ClockConfig+0x270>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2201      	movs	r2, #1
 8001b92:	4013      	ands	r3, r2
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d91e      	bls.n	8001bd8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9a:	4b93      	ldr	r3, [pc, #588]	@ (8001de8 <HAL_RCC_ClockConfig+0x270>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	4393      	bics	r3, r2
 8001ba2:	0019      	movs	r1, r3
 8001ba4:	4b90      	ldr	r3, [pc, #576]	@ (8001de8 <HAL_RCC_ClockConfig+0x270>)
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001bac:	f7ff f8ba 	bl	8000d24 <HAL_GetTick>
 8001bb0:	0003      	movs	r3, r0
 8001bb2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb4:	e009      	b.n	8001bca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb6:	f7ff f8b5 	bl	8000d24 <HAL_GetTick>
 8001bba:	0002      	movs	r2, r0
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	4a8a      	ldr	r2, [pc, #552]	@ (8001dec <HAL_RCC_ClockConfig+0x274>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e109      	b.n	8001dde <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bca:	4b87      	ldr	r3, [pc, #540]	@ (8001de8 <HAL_RCC_ClockConfig+0x270>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d1ee      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2202      	movs	r2, #2
 8001bde:	4013      	ands	r3, r2
 8001be0:	d009      	beq.n	8001bf6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001be2:	4b83      	ldr	r3, [pc, #524]	@ (8001df0 <HAL_RCC_ClockConfig+0x278>)
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	22f0      	movs	r2, #240	@ 0xf0
 8001be8:	4393      	bics	r3, r2
 8001bea:	0019      	movs	r1, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	4b7f      	ldr	r3, [pc, #508]	@ (8001df0 <HAL_RCC_ClockConfig+0x278>)
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d100      	bne.n	8001c02 <HAL_RCC_ClockConfig+0x8a>
 8001c00:	e089      	b.n	8001d16 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d107      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c0a:	4b79      	ldr	r3, [pc, #484]	@ (8001df0 <HAL_RCC_ClockConfig+0x278>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	2380      	movs	r3, #128	@ 0x80
 8001c10:	029b      	lsls	r3, r3, #10
 8001c12:	4013      	ands	r3, r2
 8001c14:	d120      	bne.n	8001c58 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e0e1      	b.n	8001dde <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b03      	cmp	r3, #3
 8001c20:	d107      	bne.n	8001c32 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c22:	4b73      	ldr	r3, [pc, #460]	@ (8001df0 <HAL_RCC_ClockConfig+0x278>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	2380      	movs	r3, #128	@ 0x80
 8001c28:	049b      	lsls	r3, r3, #18
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	d114      	bne.n	8001c58 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e0d5      	b.n	8001dde <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d106      	bne.n	8001c48 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c3a:	4b6d      	ldr	r3, [pc, #436]	@ (8001df0 <HAL_RCC_ClockConfig+0x278>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2204      	movs	r2, #4
 8001c40:	4013      	ands	r3, r2
 8001c42:	d109      	bne.n	8001c58 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e0ca      	b.n	8001dde <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c48:	4b69      	ldr	r3, [pc, #420]	@ (8001df0 <HAL_RCC_ClockConfig+0x278>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	2380      	movs	r3, #128	@ 0x80
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4013      	ands	r3, r2
 8001c52:	d101      	bne.n	8001c58 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e0c2      	b.n	8001dde <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c58:	4b65      	ldr	r3, [pc, #404]	@ (8001df0 <HAL_RCC_ClockConfig+0x278>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	4393      	bics	r3, r2
 8001c60:	0019      	movs	r1, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	4b62      	ldr	r3, [pc, #392]	@ (8001df0 <HAL_RCC_ClockConfig+0x278>)
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c6c:	f7ff f85a 	bl	8000d24 <HAL_GetTick>
 8001c70:	0003      	movs	r3, r0
 8001c72:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d111      	bne.n	8001ca0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c7c:	e009      	b.n	8001c92 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c7e:	f7ff f851 	bl	8000d24 <HAL_GetTick>
 8001c82:	0002      	movs	r2, r0
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	4a58      	ldr	r2, [pc, #352]	@ (8001dec <HAL_RCC_ClockConfig+0x274>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e0a5      	b.n	8001dde <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c92:	4b57      	ldr	r3, [pc, #348]	@ (8001df0 <HAL_RCC_ClockConfig+0x278>)
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	220c      	movs	r2, #12
 8001c98:	4013      	ands	r3, r2
 8001c9a:	2b08      	cmp	r3, #8
 8001c9c:	d1ef      	bne.n	8001c7e <HAL_RCC_ClockConfig+0x106>
 8001c9e:	e03a      	b.n	8001d16 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b03      	cmp	r3, #3
 8001ca6:	d111      	bne.n	8001ccc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ca8:	e009      	b.n	8001cbe <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001caa:	f7ff f83b 	bl	8000d24 <HAL_GetTick>
 8001cae:	0002      	movs	r2, r0
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	4a4d      	ldr	r2, [pc, #308]	@ (8001dec <HAL_RCC_ClockConfig+0x274>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e08f      	b.n	8001dde <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cbe:	4b4c      	ldr	r3, [pc, #304]	@ (8001df0 <HAL_RCC_ClockConfig+0x278>)
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	220c      	movs	r2, #12
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	2b0c      	cmp	r3, #12
 8001cc8:	d1ef      	bne.n	8001caa <HAL_RCC_ClockConfig+0x132>
 8001cca:	e024      	b.n	8001d16 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d11b      	bne.n	8001d0c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cd4:	e009      	b.n	8001cea <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd6:	f7ff f825 	bl	8000d24 <HAL_GetTick>
 8001cda:	0002      	movs	r2, r0
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	4a42      	ldr	r2, [pc, #264]	@ (8001dec <HAL_RCC_ClockConfig+0x274>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e079      	b.n	8001dde <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cea:	4b41      	ldr	r3, [pc, #260]	@ (8001df0 <HAL_RCC_ClockConfig+0x278>)
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	220c      	movs	r2, #12
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d1ef      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0x15e>
 8001cf6:	e00e      	b.n	8001d16 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf8:	f7ff f814 	bl	8000d24 <HAL_GetTick>
 8001cfc:	0002      	movs	r2, r0
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	4a3a      	ldr	r2, [pc, #232]	@ (8001dec <HAL_RCC_ClockConfig+0x274>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e068      	b.n	8001dde <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001d0c:	4b38      	ldr	r3, [pc, #224]	@ (8001df0 <HAL_RCC_ClockConfig+0x278>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	220c      	movs	r2, #12
 8001d12:	4013      	ands	r3, r2
 8001d14:	d1f0      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d16:	4b34      	ldr	r3, [pc, #208]	@ (8001de8 <HAL_RCC_ClockConfig+0x270>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d21e      	bcs.n	8001d62 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d24:	4b30      	ldr	r3, [pc, #192]	@ (8001de8 <HAL_RCC_ClockConfig+0x270>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	4393      	bics	r3, r2
 8001d2c:	0019      	movs	r1, r3
 8001d2e:	4b2e      	ldr	r3, [pc, #184]	@ (8001de8 <HAL_RCC_ClockConfig+0x270>)
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d36:	f7fe fff5 	bl	8000d24 <HAL_GetTick>
 8001d3a:	0003      	movs	r3, r0
 8001d3c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3e:	e009      	b.n	8001d54 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d40:	f7fe fff0 	bl	8000d24 <HAL_GetTick>
 8001d44:	0002      	movs	r2, r0
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	4a28      	ldr	r2, [pc, #160]	@ (8001dec <HAL_RCC_ClockConfig+0x274>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e044      	b.n	8001dde <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d54:	4b24      	ldr	r3, [pc, #144]	@ (8001de8 <HAL_RCC_ClockConfig+0x270>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d1ee      	bne.n	8001d40 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2204      	movs	r2, #4
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d009      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d6c:	4b20      	ldr	r3, [pc, #128]	@ (8001df0 <HAL_RCC_ClockConfig+0x278>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	4a20      	ldr	r2, [pc, #128]	@ (8001df4 <HAL_RCC_ClockConfig+0x27c>)
 8001d72:	4013      	ands	r3, r2
 8001d74:	0019      	movs	r1, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68da      	ldr	r2, [r3, #12]
 8001d7a:	4b1d      	ldr	r3, [pc, #116]	@ (8001df0 <HAL_RCC_ClockConfig+0x278>)
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2208      	movs	r2, #8
 8001d86:	4013      	ands	r3, r2
 8001d88:	d00a      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d8a:	4b19      	ldr	r3, [pc, #100]	@ (8001df0 <HAL_RCC_ClockConfig+0x278>)
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	4a1a      	ldr	r2, [pc, #104]	@ (8001df8 <HAL_RCC_ClockConfig+0x280>)
 8001d90:	4013      	ands	r3, r2
 8001d92:	0019      	movs	r1, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	00da      	lsls	r2, r3, #3
 8001d9a:	4b15      	ldr	r3, [pc, #84]	@ (8001df0 <HAL_RCC_ClockConfig+0x278>)
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001da0:	f000 f832 	bl	8001e08 <HAL_RCC_GetSysClockFreq>
 8001da4:	0001      	movs	r1, r0
 8001da6:	4b12      	ldr	r3, [pc, #72]	@ (8001df0 <HAL_RCC_ClockConfig+0x278>)
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	091b      	lsrs	r3, r3, #4
 8001dac:	220f      	movs	r2, #15
 8001dae:	4013      	ands	r3, r2
 8001db0:	4a12      	ldr	r2, [pc, #72]	@ (8001dfc <HAL_RCC_ClockConfig+0x284>)
 8001db2:	5cd3      	ldrb	r3, [r2, r3]
 8001db4:	000a      	movs	r2, r1
 8001db6:	40da      	lsrs	r2, r3
 8001db8:	4b11      	ldr	r3, [pc, #68]	@ (8001e00 <HAL_RCC_ClockConfig+0x288>)
 8001dba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001dbc:	4b11      	ldr	r3, [pc, #68]	@ (8001e04 <HAL_RCC_ClockConfig+0x28c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	250b      	movs	r5, #11
 8001dc2:	197c      	adds	r4, r7, r5
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	f7fe ff67 	bl	8000c98 <HAL_InitTick>
 8001dca:	0003      	movs	r3, r0
 8001dcc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001dce:	197b      	adds	r3, r7, r5
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d002      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001dd6:	197b      	adds	r3, r7, r5
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	e000      	b.n	8001dde <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	0018      	movs	r0, r3
 8001de0:	46bd      	mov	sp, r7
 8001de2:	b004      	add	sp, #16
 8001de4:	bdb0      	pop	{r4, r5, r7, pc}
 8001de6:	46c0      	nop			@ (mov r8, r8)
 8001de8:	40022000 	.word	0x40022000
 8001dec:	00001388 	.word	0x00001388
 8001df0:	40021000 	.word	0x40021000
 8001df4:	fffff8ff 	.word	0xfffff8ff
 8001df8:	ffffc7ff 	.word	0xffffc7ff
 8001dfc:	08003d7c 	.word	0x08003d7c
 8001e00:	20000000 	.word	0x20000000
 8001e04:	20000004 	.word	0x20000004

08001e08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e08:	b5b0      	push	{r4, r5, r7, lr}
 8001e0a:	b08e      	sub	sp, #56	@ 0x38
 8001e0c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001e0e:	4b4c      	ldr	r3, [pc, #304]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x138>)
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e16:	230c      	movs	r3, #12
 8001e18:	4013      	ands	r3, r2
 8001e1a:	2b0c      	cmp	r3, #12
 8001e1c:	d014      	beq.n	8001e48 <HAL_RCC_GetSysClockFreq+0x40>
 8001e1e:	d900      	bls.n	8001e22 <HAL_RCC_GetSysClockFreq+0x1a>
 8001e20:	e07b      	b.n	8001f1a <HAL_RCC_GetSysClockFreq+0x112>
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d002      	beq.n	8001e2c <HAL_RCC_GetSysClockFreq+0x24>
 8001e26:	2b08      	cmp	r3, #8
 8001e28:	d00b      	beq.n	8001e42 <HAL_RCC_GetSysClockFreq+0x3a>
 8001e2a:	e076      	b.n	8001f1a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001e2c:	4b44      	ldr	r3, [pc, #272]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x138>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2210      	movs	r2, #16
 8001e32:	4013      	ands	r3, r2
 8001e34:	d002      	beq.n	8001e3c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001e36:	4b43      	ldr	r3, [pc, #268]	@ (8001f44 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001e38:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001e3a:	e07c      	b.n	8001f36 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001e3c:	4b42      	ldr	r3, [pc, #264]	@ (8001f48 <HAL_RCC_GetSysClockFreq+0x140>)
 8001e3e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001e40:	e079      	b.n	8001f36 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e42:	4b42      	ldr	r3, [pc, #264]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0x144>)
 8001e44:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001e46:	e076      	b.n	8001f36 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e4a:	0c9a      	lsrs	r2, r3, #18
 8001e4c:	230f      	movs	r3, #15
 8001e4e:	401a      	ands	r2, r3
 8001e50:	4b3f      	ldr	r3, [pc, #252]	@ (8001f50 <HAL_RCC_GetSysClockFreq+0x148>)
 8001e52:	5c9b      	ldrb	r3, [r3, r2]
 8001e54:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e58:	0d9a      	lsrs	r2, r3, #22
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	3301      	adds	r3, #1
 8001e60:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e62:	4b37      	ldr	r3, [pc, #220]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x138>)
 8001e64:	68da      	ldr	r2, [r3, #12]
 8001e66:	2380      	movs	r3, #128	@ 0x80
 8001e68:	025b      	lsls	r3, r3, #9
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d01a      	beq.n	8001ea4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e70:	61bb      	str	r3, [r7, #24]
 8001e72:	2300      	movs	r3, #0
 8001e74:	61fb      	str	r3, [r7, #28]
 8001e76:	4a35      	ldr	r2, [pc, #212]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0x144>)
 8001e78:	2300      	movs	r3, #0
 8001e7a:	69b8      	ldr	r0, [r7, #24]
 8001e7c:	69f9      	ldr	r1, [r7, #28]
 8001e7e:	f7fe f9ef 	bl	8000260 <__aeabi_lmul>
 8001e82:	0002      	movs	r2, r0
 8001e84:	000b      	movs	r3, r1
 8001e86:	0010      	movs	r0, r2
 8001e88:	0019      	movs	r1, r3
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8c:	613b      	str	r3, [r7, #16]
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	f7fe f9c3 	bl	8000220 <__aeabi_uldivmod>
 8001e9a:	0002      	movs	r2, r0
 8001e9c:	000b      	movs	r3, r1
 8001e9e:	0013      	movs	r3, r2
 8001ea0:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ea2:	e037      	b.n	8001f14 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001ea4:	4b26      	ldr	r3, [pc, #152]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x138>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2210      	movs	r2, #16
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d01a      	beq.n	8001ee4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	4a23      	ldr	r2, [pc, #140]	@ (8001f44 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001eb8:	2300      	movs	r3, #0
 8001eba:	68b8      	ldr	r0, [r7, #8]
 8001ebc:	68f9      	ldr	r1, [r7, #12]
 8001ebe:	f7fe f9cf 	bl	8000260 <__aeabi_lmul>
 8001ec2:	0002      	movs	r2, r0
 8001ec4:	000b      	movs	r3, r1
 8001ec6:	0010      	movs	r0, r2
 8001ec8:	0019      	movs	r1, r3
 8001eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ecc:	603b      	str	r3, [r7, #0]
 8001ece:	2300      	movs	r3, #0
 8001ed0:	607b      	str	r3, [r7, #4]
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f7fe f9a3 	bl	8000220 <__aeabi_uldivmod>
 8001eda:	0002      	movs	r2, r0
 8001edc:	000b      	movs	r3, r1
 8001ede:	0013      	movs	r3, r2
 8001ee0:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ee2:	e017      	b.n	8001f14 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	2300      	movs	r3, #0
 8001eea:	0019      	movs	r1, r3
 8001eec:	4a16      	ldr	r2, [pc, #88]	@ (8001f48 <HAL_RCC_GetSysClockFreq+0x140>)
 8001eee:	2300      	movs	r3, #0
 8001ef0:	f7fe f9b6 	bl	8000260 <__aeabi_lmul>
 8001ef4:	0002      	movs	r2, r0
 8001ef6:	000b      	movs	r3, r1
 8001ef8:	0010      	movs	r0, r2
 8001efa:	0019      	movs	r1, r3
 8001efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efe:	001c      	movs	r4, r3
 8001f00:	2300      	movs	r3, #0
 8001f02:	001d      	movs	r5, r3
 8001f04:	0022      	movs	r2, r4
 8001f06:	002b      	movs	r3, r5
 8001f08:	f7fe f98a 	bl	8000220 <__aeabi_uldivmod>
 8001f0c:	0002      	movs	r2, r0
 8001f0e:	000b      	movs	r3, r1
 8001f10:	0013      	movs	r3, r2
 8001f12:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8001f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f16:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001f18:	e00d      	b.n	8001f36 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001f1a:	4b09      	ldr	r3, [pc, #36]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x138>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	0b5b      	lsrs	r3, r3, #13
 8001f20:	2207      	movs	r2, #7
 8001f22:	4013      	ands	r3, r2
 8001f24:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001f26:	6a3b      	ldr	r3, [r7, #32]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	2280      	movs	r2, #128	@ 0x80
 8001f2c:	0212      	lsls	r2, r2, #8
 8001f2e:	409a      	lsls	r2, r3
 8001f30:	0013      	movs	r3, r2
 8001f32:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001f34:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8001f38:	0018      	movs	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	b00e      	add	sp, #56	@ 0x38
 8001f3e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f40:	40021000 	.word	0x40021000
 8001f44:	003d0900 	.word	0x003d0900
 8001f48:	00f42400 	.word	0x00f42400
 8001f4c:	007a1200 	.word	0x007a1200
 8001f50:	08003d94 	.word	0x08003d94

08001f54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f58:	4b02      	ldr	r3, [pc, #8]	@ (8001f64 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
}
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	46c0      	nop			@ (mov r8, r8)
 8001f64:	20000000 	.word	0x20000000

08001f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f6c:	f7ff fff2 	bl	8001f54 <HAL_RCC_GetHCLKFreq>
 8001f70:	0001      	movs	r1, r0
 8001f72:	4b06      	ldr	r3, [pc, #24]	@ (8001f8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	0a1b      	lsrs	r3, r3, #8
 8001f78:	2207      	movs	r2, #7
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	4a04      	ldr	r2, [pc, #16]	@ (8001f90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f7e:	5cd3      	ldrb	r3, [r2, r3]
 8001f80:	40d9      	lsrs	r1, r3
 8001f82:	000b      	movs	r3, r1
}
 8001f84:	0018      	movs	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	46c0      	nop			@ (mov r8, r8)
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	08003d8c 	.word	0x08003d8c

08001f94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f98:	f7ff ffdc 	bl	8001f54 <HAL_RCC_GetHCLKFreq>
 8001f9c:	0001      	movs	r1, r0
 8001f9e:	4b06      	ldr	r3, [pc, #24]	@ (8001fb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	0adb      	lsrs	r3, r3, #11
 8001fa4:	2207      	movs	r2, #7
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	4a04      	ldr	r2, [pc, #16]	@ (8001fbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001faa:	5cd3      	ldrb	r3, [r2, r3]
 8001fac:	40d9      	lsrs	r1, r3
 8001fae:	000b      	movs	r3, r1
}
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	46c0      	nop			@ (mov r8, r8)
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	08003d8c 	.word	0x08003d8c

08001fc0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001fc8:	2017      	movs	r0, #23
 8001fca:	183b      	adds	r3, r7, r0
 8001fcc:	2200      	movs	r2, #0
 8001fce:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2220      	movs	r2, #32
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d100      	bne.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001fda:	e0c7      	b.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fdc:	4b9b      	ldr	r3, [pc, #620]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001fde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001fe0:	2380      	movs	r3, #128	@ 0x80
 8001fe2:	055b      	lsls	r3, r3, #21
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d109      	bne.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fe8:	4b98      	ldr	r3, [pc, #608]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001fea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001fec:	4b97      	ldr	r3, [pc, #604]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001fee:	2180      	movs	r1, #128	@ 0x80
 8001ff0:	0549      	lsls	r1, r1, #21
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001ff6:	183b      	adds	r3, r7, r0
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ffc:	4b94      	ldr	r3, [pc, #592]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	2380      	movs	r3, #128	@ 0x80
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	4013      	ands	r3, r2
 8002006:	d11a      	bne.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002008:	4b91      	ldr	r3, [pc, #580]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	4b90      	ldr	r3, [pc, #576]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800200e:	2180      	movs	r1, #128	@ 0x80
 8002010:	0049      	lsls	r1, r1, #1
 8002012:	430a      	orrs	r2, r1
 8002014:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002016:	f7fe fe85 	bl	8000d24 <HAL_GetTick>
 800201a:	0003      	movs	r3, r0
 800201c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800201e:	e008      	b.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002020:	f7fe fe80 	bl	8000d24 <HAL_GetTick>
 8002024:	0002      	movs	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b64      	cmp	r3, #100	@ 0x64
 800202c:	d901      	bls.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e107      	b.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002032:	4b87      	ldr	r3, [pc, #540]	@ (8002250 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	2380      	movs	r3, #128	@ 0x80
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	4013      	ands	r3, r2
 800203c:	d0f0      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800203e:	4b83      	ldr	r3, [pc, #524]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	23c0      	movs	r3, #192	@ 0xc0
 8002044:	039b      	lsls	r3, r3, #14
 8002046:	4013      	ands	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	23c0      	movs	r3, #192	@ 0xc0
 8002050:	039b      	lsls	r3, r3, #14
 8002052:	4013      	ands	r3, r2
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	429a      	cmp	r2, r3
 8002058:	d013      	beq.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	23c0      	movs	r3, #192	@ 0xc0
 8002060:	029b      	lsls	r3, r3, #10
 8002062:	401a      	ands	r2, r3
 8002064:	23c0      	movs	r3, #192	@ 0xc0
 8002066:	029b      	lsls	r3, r3, #10
 8002068:	429a      	cmp	r2, r3
 800206a:	d10a      	bne.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800206c:	4b77      	ldr	r3, [pc, #476]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	2380      	movs	r3, #128	@ 0x80
 8002072:	029b      	lsls	r3, r3, #10
 8002074:	401a      	ands	r2, r3
 8002076:	2380      	movs	r3, #128	@ 0x80
 8002078:	029b      	lsls	r3, r3, #10
 800207a:	429a      	cmp	r2, r3
 800207c:	d101      	bne.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e0df      	b.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002082:	4b72      	ldr	r3, [pc, #456]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002084:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002086:	23c0      	movs	r3, #192	@ 0xc0
 8002088:	029b      	lsls	r3, r3, #10
 800208a:	4013      	ands	r3, r2
 800208c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d03b      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	23c0      	movs	r3, #192	@ 0xc0
 800209a:	029b      	lsls	r3, r3, #10
 800209c:	4013      	ands	r3, r2
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d033      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2220      	movs	r2, #32
 80020aa:	4013      	ands	r3, r2
 80020ac:	d02e      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80020ae:	4b67      	ldr	r3, [pc, #412]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80020b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020b2:	4a68      	ldr	r2, [pc, #416]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80020b4:	4013      	ands	r3, r2
 80020b6:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020b8:	4b64      	ldr	r3, [pc, #400]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80020ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80020bc:	4b63      	ldr	r3, [pc, #396]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80020be:	2180      	movs	r1, #128	@ 0x80
 80020c0:	0309      	lsls	r1, r1, #12
 80020c2:	430a      	orrs	r2, r1
 80020c4:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020c6:	4b61      	ldr	r3, [pc, #388]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80020c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80020ca:	4b60      	ldr	r3, [pc, #384]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80020cc:	4962      	ldr	r1, [pc, #392]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80020ce:	400a      	ands	r2, r1
 80020d0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80020d2:	4b5e      	ldr	r3, [pc, #376]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	2380      	movs	r3, #128	@ 0x80
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	4013      	ands	r3, r2
 80020e0:	d014      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e2:	f7fe fe1f 	bl	8000d24 <HAL_GetTick>
 80020e6:	0003      	movs	r3, r0
 80020e8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020ea:	e009      	b.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020ec:	f7fe fe1a 	bl	8000d24 <HAL_GetTick>
 80020f0:	0002      	movs	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	4a59      	ldr	r2, [pc, #356]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d901      	bls.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e0a0      	b.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002100:	4b52      	ldr	r3, [pc, #328]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002102:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002104:	2380      	movs	r3, #128	@ 0x80
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4013      	ands	r3, r2
 800210a:	d0ef      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2220      	movs	r2, #32
 8002112:	4013      	ands	r3, r2
 8002114:	d01f      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	23c0      	movs	r3, #192	@ 0xc0
 800211c:	029b      	lsls	r3, r3, #10
 800211e:	401a      	ands	r2, r3
 8002120:	23c0      	movs	r3, #192	@ 0xc0
 8002122:	029b      	lsls	r3, r3, #10
 8002124:	429a      	cmp	r2, r3
 8002126:	d10c      	bne.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8002128:	4b48      	ldr	r3, [pc, #288]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a4c      	ldr	r2, [pc, #304]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800212e:	4013      	ands	r3, r2
 8002130:	0019      	movs	r1, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	23c0      	movs	r3, #192	@ 0xc0
 8002138:	039b      	lsls	r3, r3, #14
 800213a:	401a      	ands	r2, r3
 800213c:	4b43      	ldr	r3, [pc, #268]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800213e:	430a      	orrs	r2, r1
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	4b42      	ldr	r3, [pc, #264]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002144:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	23c0      	movs	r3, #192	@ 0xc0
 800214c:	029b      	lsls	r3, r3, #10
 800214e:	401a      	ands	r2, r3
 8002150:	4b3e      	ldr	r3, [pc, #248]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002152:	430a      	orrs	r2, r1
 8002154:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002156:	2317      	movs	r3, #23
 8002158:	18fb      	adds	r3, r7, r3
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d105      	bne.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002160:	4b3a      	ldr	r3, [pc, #232]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002162:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002164:	4b39      	ldr	r3, [pc, #228]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002166:	493f      	ldr	r1, [pc, #252]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8002168:	400a      	ands	r2, r1
 800216a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2201      	movs	r2, #1
 8002172:	4013      	ands	r3, r2
 8002174:	d009      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002176:	4b35      	ldr	r3, [pc, #212]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800217a:	2203      	movs	r2, #3
 800217c:	4393      	bics	r3, r2
 800217e:	0019      	movs	r1, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	4b31      	ldr	r3, [pc, #196]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002186:	430a      	orrs	r2, r1
 8002188:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2202      	movs	r2, #2
 8002190:	4013      	ands	r3, r2
 8002192:	d009      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002194:	4b2d      	ldr	r3, [pc, #180]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002196:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002198:	220c      	movs	r2, #12
 800219a:	4393      	bics	r3, r2
 800219c:	0019      	movs	r1, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	4b2a      	ldr	r3, [pc, #168]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80021a4:	430a      	orrs	r2, r1
 80021a6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2204      	movs	r2, #4
 80021ae:	4013      	ands	r3, r2
 80021b0:	d009      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021b2:	4b26      	ldr	r3, [pc, #152]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80021b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021b6:	4a2c      	ldr	r2, [pc, #176]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80021b8:	4013      	ands	r3, r2
 80021ba:	0019      	movs	r1, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	691a      	ldr	r2, [r3, #16]
 80021c0:	4b22      	ldr	r3, [pc, #136]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80021c2:	430a      	orrs	r2, r1
 80021c4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2208      	movs	r2, #8
 80021cc:	4013      	ands	r3, r2
 80021ce:	d009      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021d0:	4b1e      	ldr	r3, [pc, #120]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80021d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021d4:	4a25      	ldr	r2, [pc, #148]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80021d6:	4013      	ands	r3, r2
 80021d8:	0019      	movs	r1, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	695a      	ldr	r2, [r3, #20]
 80021de:	4b1b      	ldr	r3, [pc, #108]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80021e0:	430a      	orrs	r2, r1
 80021e2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	2380      	movs	r3, #128	@ 0x80
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	4013      	ands	r3, r2
 80021ee:	d009      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021f0:	4b16      	ldr	r3, [pc, #88]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80021f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021f4:	4a17      	ldr	r2, [pc, #92]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80021f6:	4013      	ands	r3, r2
 80021f8:	0019      	movs	r1, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	699a      	ldr	r2, [r3, #24]
 80021fe:	4b13      	ldr	r3, [pc, #76]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002200:	430a      	orrs	r2, r1
 8002202:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2240      	movs	r2, #64	@ 0x40
 800220a:	4013      	ands	r3, r2
 800220c:	d009      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800220e:	4b0f      	ldr	r3, [pc, #60]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002212:	4a17      	ldr	r2, [pc, #92]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002214:	4013      	ands	r3, r2
 8002216:	0019      	movs	r1, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a1a      	ldr	r2, [r3, #32]
 800221c:	4b0b      	ldr	r3, [pc, #44]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800221e:	430a      	orrs	r2, r1
 8002220:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2280      	movs	r2, #128	@ 0x80
 8002228:	4013      	ands	r3, r2
 800222a:	d009      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800222c:	4b07      	ldr	r3, [pc, #28]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800222e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002230:	4a10      	ldr	r2, [pc, #64]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8002232:	4013      	ands	r3, r2
 8002234:	0019      	movs	r1, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69da      	ldr	r2, [r3, #28]
 800223a:	4b04      	ldr	r3, [pc, #16]	@ (800224c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800223c:	430a      	orrs	r2, r1
 800223e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	0018      	movs	r0, r3
 8002244:	46bd      	mov	sp, r7
 8002246:	b006      	add	sp, #24
 8002248:	bd80      	pop	{r7, pc}
 800224a:	46c0      	nop			@ (mov r8, r8)
 800224c:	40021000 	.word	0x40021000
 8002250:	40007000 	.word	0x40007000
 8002254:	fffcffff 	.word	0xfffcffff
 8002258:	fff7ffff 	.word	0xfff7ffff
 800225c:	00001388 	.word	0x00001388
 8002260:	ffcfffff 	.word	0xffcfffff
 8002264:	efffffff 	.word	0xefffffff
 8002268:	fffff3ff 	.word	0xfffff3ff
 800226c:	ffffcfff 	.word	0xffffcfff
 8002270:	fbffffff 	.word	0xfbffffff
 8002274:	fff3ffff 	.word	0xfff3ffff

08002278 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002278:	b5b0      	push	{r4, r5, r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002280:	230f      	movs	r3, #15
 8002282:	18fb      	adds	r3, r7, r3
 8002284:	2201      	movs	r2, #1
 8002286:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e088      	b.n	80023a4 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2221      	movs	r2, #33	@ 0x21
 8002296:	5c9b      	ldrb	r3, [r3, r2]
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d107      	bne.n	80022ae <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2220      	movs	r2, #32
 80022a2:	2100      	movs	r1, #0
 80022a4:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	0018      	movs	r0, r3
 80022aa:	f7fe fb89 	bl	80009c0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2221      	movs	r2, #33	@ 0x21
 80022b2:	2102      	movs	r1, #2
 80022b4:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	2210      	movs	r2, #16
 80022be:	4013      	ands	r3, r2
 80022c0:	2b10      	cmp	r3, #16
 80022c2:	d05f      	beq.n	8002384 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	22ca      	movs	r2, #202	@ 0xca
 80022ca:	625a      	str	r2, [r3, #36]	@ 0x24
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2253      	movs	r2, #83	@ 0x53
 80022d2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80022d4:	250f      	movs	r5, #15
 80022d6:	197c      	adds	r4, r7, r5
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	0018      	movs	r0, r3
 80022dc:	f000 fb86 	bl	80029ec <RTC_EnterInitMode>
 80022e0:	0003      	movs	r3, r0
 80022e2:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 80022e4:	0028      	movs	r0, r5
 80022e6:	183b      	adds	r3, r7, r0
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d12c      	bne.n	8002348 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	492c      	ldr	r1, [pc, #176]	@ (80023ac <HAL_RTC_Init+0x134>)
 80022fa:	400a      	ands	r2, r1
 80022fc:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6899      	ldr	r1, [r3, #8]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	431a      	orrs	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	430a      	orrs	r2, r1
 800231a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	68d2      	ldr	r2, [r2, #12]
 8002324:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6919      	ldr	r1, [r3, #16]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	041a      	lsls	r2, r3, #16
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800233a:	183c      	adds	r4, r7, r0
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	0018      	movs	r0, r3
 8002340:	f000 fb98 	bl	8002a74 <RTC_ExitInitMode>
 8002344:	0003      	movs	r3, r0
 8002346:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8002348:	230f      	movs	r3, #15
 800234a:	18fb      	adds	r3, r7, r3
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d113      	bne.n	800237a <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2103      	movs	r1, #3
 800235e:	438a      	bics	r2, r1
 8002360:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	69da      	ldr	r2, [r3, #28]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	431a      	orrs	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	430a      	orrs	r2, r1
 8002378:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	22ff      	movs	r2, #255	@ 0xff
 8002380:	625a      	str	r2, [r3, #36]	@ 0x24
 8002382:	e003      	b.n	800238c <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002384:	230f      	movs	r3, #15
 8002386:	18fb      	adds	r3, r7, r3
 8002388:	2200      	movs	r2, #0
 800238a:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 800238c:	230f      	movs	r3, #15
 800238e:	18fb      	adds	r3, r7, r3
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d103      	bne.n	800239e <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2221      	movs	r2, #33	@ 0x21
 800239a:	2101      	movs	r1, #1
 800239c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800239e:	230f      	movs	r3, #15
 80023a0:	18fb      	adds	r3, r7, r3
 80023a2:	781b      	ldrb	r3, [r3, #0]
}
 80023a4:	0018      	movs	r0, r3
 80023a6:	46bd      	mov	sp, r7
 80023a8:	b004      	add	sp, #16
 80023aa:	bdb0      	pop	{r4, r5, r7, pc}
 80023ac:	ff8fffbf 	.word	0xff8fffbf

080023b0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80023b0:	b5b0      	push	{r4, r5, r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2220      	movs	r2, #32
 80023c4:	5c9b      	ldrb	r3, [r3, r2]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d101      	bne.n	80023ce <HAL_RTC_SetTime+0x1e>
 80023ca:	2302      	movs	r3, #2
 80023cc:	e092      	b.n	80024f4 <HAL_RTC_SetTime+0x144>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2220      	movs	r2, #32
 80023d2:	2101      	movs	r1, #1
 80023d4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2221      	movs	r2, #33	@ 0x21
 80023da:	2102      	movs	r1, #2
 80023dc:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d125      	bne.n	8002430 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	2240      	movs	r2, #64	@ 0x40
 80023ec:	4013      	ands	r3, r2
 80023ee:	d102      	bne.n	80023f6 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	2200      	movs	r2, #0
 80023f4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	0018      	movs	r0, r3
 80023fc:	f000 fb64 	bl	8002ac8 <RTC_ByteToBcd2>
 8002400:	0003      	movs	r3, r0
 8002402:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	785b      	ldrb	r3, [r3, #1]
 8002408:	0018      	movs	r0, r3
 800240a:	f000 fb5d 	bl	8002ac8 <RTC_ByteToBcd2>
 800240e:	0003      	movs	r3, r0
 8002410:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002412:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	789b      	ldrb	r3, [r3, #2]
 8002418:	0018      	movs	r0, r3
 800241a:	f000 fb55 	bl	8002ac8 <RTC_ByteToBcd2>
 800241e:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002420:	0022      	movs	r2, r4
 8002422:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	78db      	ldrb	r3, [r3, #3]
 8002428:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800242a:	4313      	orrs	r3, r2
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	e017      	b.n	8002460 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	2240      	movs	r2, #64	@ 0x40
 8002438:	4013      	ands	r3, r2
 800243a:	d102      	bne.n	8002442 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	2200      	movs	r2, #0
 8002440:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	785b      	ldrb	r3, [r3, #1]
 800244c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800244e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002450:	68ba      	ldr	r2, [r7, #8]
 8002452:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002454:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	78db      	ldrb	r3, [r3, #3]
 800245a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800245c:	4313      	orrs	r3, r2
 800245e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	22ca      	movs	r2, #202	@ 0xca
 8002466:	625a      	str	r2, [r3, #36]	@ 0x24
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2253      	movs	r2, #83	@ 0x53
 800246e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002470:	2513      	movs	r5, #19
 8002472:	197c      	adds	r4, r7, r5
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	0018      	movs	r0, r3
 8002478:	f000 fab8 	bl	80029ec <RTC_EnterInitMode>
 800247c:	0003      	movs	r3, r0
 800247e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002480:	0028      	movs	r0, r5
 8002482:	183b      	adds	r3, r7, r0
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d120      	bne.n	80024cc <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	491a      	ldr	r1, [pc, #104]	@ (80024fc <HAL_RTC_SetTime+0x14c>)
 8002492:	400a      	ands	r2, r1
 8002494:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4917      	ldr	r1, [pc, #92]	@ (8002500 <HAL_RTC_SetTime+0x150>)
 80024a2:	400a      	ands	r2, r1
 80024a4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6899      	ldr	r1, [r3, #8]
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	68da      	ldr	r2, [r3, #12]
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	431a      	orrs	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	430a      	orrs	r2, r1
 80024bc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80024be:	183c      	adds	r4, r7, r0
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	0018      	movs	r0, r3
 80024c4:	f000 fad6 	bl	8002a74 <RTC_ExitInitMode>
 80024c8:	0003      	movs	r3, r0
 80024ca:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80024cc:	2313      	movs	r3, #19
 80024ce:	18fb      	adds	r3, r7, r3
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d103      	bne.n	80024de <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2221      	movs	r2, #33	@ 0x21
 80024da:	2101      	movs	r1, #1
 80024dc:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	22ff      	movs	r2, #255	@ 0xff
 80024e4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2220      	movs	r2, #32
 80024ea:	2100      	movs	r1, #0
 80024ec:	5499      	strb	r1, [r3, r2]

  return status;
 80024ee:	2313      	movs	r3, #19
 80024f0:	18fb      	adds	r3, r7, r3
 80024f2:	781b      	ldrb	r3, [r3, #0]
}
 80024f4:	0018      	movs	r0, r3
 80024f6:	46bd      	mov	sp, r7
 80024f8:	b006      	add	sp, #24
 80024fa:	bdb0      	pop	{r4, r5, r7, pc}
 80024fc:	007f7f7f 	.word	0x007f7f7f
 8002500:	fffbffff 	.word	0xfffbffff

08002504 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002504:	b5b0      	push	{r4, r5, r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2220      	movs	r2, #32
 8002518:	5c9b      	ldrb	r3, [r3, r2]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d101      	bne.n	8002522 <HAL_RTC_SetDate+0x1e>
 800251e:	2302      	movs	r3, #2
 8002520:	e07e      	b.n	8002620 <HAL_RTC_SetDate+0x11c>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2220      	movs	r2, #32
 8002526:	2101      	movs	r1, #1
 8002528:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2221      	movs	r2, #33	@ 0x21
 800252e:	2102      	movs	r1, #2
 8002530:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d10e      	bne.n	8002556 <HAL_RTC_SetDate+0x52>
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	785b      	ldrb	r3, [r3, #1]
 800253c:	001a      	movs	r2, r3
 800253e:	2310      	movs	r3, #16
 8002540:	4013      	ands	r3, r2
 8002542:	d008      	beq.n	8002556 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	785b      	ldrb	r3, [r3, #1]
 8002548:	2210      	movs	r2, #16
 800254a:	4393      	bics	r3, r2
 800254c:	b2db      	uxtb	r3, r3
 800254e:	330a      	adds	r3, #10
 8002550:	b2da      	uxtb	r2, r3
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d11c      	bne.n	8002596 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	78db      	ldrb	r3, [r3, #3]
 8002560:	0018      	movs	r0, r3
 8002562:	f000 fab1 	bl	8002ac8 <RTC_ByteToBcd2>
 8002566:	0003      	movs	r3, r0
 8002568:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	785b      	ldrb	r3, [r3, #1]
 800256e:	0018      	movs	r0, r3
 8002570:	f000 faaa 	bl	8002ac8 <RTC_ByteToBcd2>
 8002574:	0003      	movs	r3, r0
 8002576:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002578:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	789b      	ldrb	r3, [r3, #2]
 800257e:	0018      	movs	r0, r3
 8002580:	f000 faa2 	bl	8002ac8 <RTC_ByteToBcd2>
 8002584:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002586:	0022      	movs	r2, r4
 8002588:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002590:	4313      	orrs	r3, r2
 8002592:	617b      	str	r3, [r7, #20]
 8002594:	e00e      	b.n	80025b4 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	78db      	ldrb	r3, [r3, #3]
 800259a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	785b      	ldrb	r3, [r3, #1]
 80025a0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80025a2:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80025a8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80025b0:	4313      	orrs	r3, r2
 80025b2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	22ca      	movs	r2, #202	@ 0xca
 80025ba:	625a      	str	r2, [r3, #36]	@ 0x24
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2253      	movs	r2, #83	@ 0x53
 80025c2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80025c4:	2513      	movs	r5, #19
 80025c6:	197c      	adds	r4, r7, r5
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	0018      	movs	r0, r3
 80025cc:	f000 fa0e 	bl	80029ec <RTC_EnterInitMode>
 80025d0:	0003      	movs	r3, r0
 80025d2:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80025d4:	0028      	movs	r0, r5
 80025d6:	183b      	adds	r3, r7, r0
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10c      	bne.n	80025f8 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	4910      	ldr	r1, [pc, #64]	@ (8002628 <HAL_RTC_SetDate+0x124>)
 80025e6:	400a      	ands	r2, r1
 80025e8:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80025ea:	183c      	adds	r4, r7, r0
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	0018      	movs	r0, r3
 80025f0:	f000 fa40 	bl	8002a74 <RTC_ExitInitMode>
 80025f4:	0003      	movs	r3, r0
 80025f6:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80025f8:	2313      	movs	r3, #19
 80025fa:	18fb      	adds	r3, r7, r3
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d103      	bne.n	800260a <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2221      	movs	r2, #33	@ 0x21
 8002606:	2101      	movs	r1, #1
 8002608:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	22ff      	movs	r2, #255	@ 0xff
 8002610:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2220      	movs	r2, #32
 8002616:	2100      	movs	r1, #0
 8002618:	5499      	strb	r1, [r3, r2]

  return status;
 800261a:	2313      	movs	r3, #19
 800261c:	18fb      	adds	r3, r7, r3
 800261e:	781b      	ldrb	r3, [r3, #0]
}
 8002620:	0018      	movs	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	b006      	add	sp, #24
 8002626:	bdb0      	pop	{r4, r5, r7, pc}
 8002628:	00ffff3f 	.word	0x00ffff3f

0800262c <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800262c:	b590      	push	{r4, r7, lr}
 800262e:	b089      	sub	sp, #36	@ 0x24
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002638:	4ba7      	ldr	r3, [pc, #668]	@ (80028d8 <HAL_RTC_SetAlarm_IT+0x2ac>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	22fa      	movs	r2, #250	@ 0xfa
 800263e:	01d1      	lsls	r1, r2, #7
 8002640:	0018      	movs	r0, r3
 8002642:	f7fd fd61 	bl	8000108 <__udivsi3>
 8002646:	0003      	movs	r3, r0
 8002648:	001a      	movs	r2, r3
 800264a:	0013      	movs	r3, r2
 800264c:	015b      	lsls	r3, r3, #5
 800264e:	1a9b      	subs	r3, r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	189b      	adds	r3, r3, r2
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8002658:	2300      	movs	r3, #0
 800265a:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2220      	movs	r2, #32
 8002664:	5c9b      	ldrb	r3, [r3, r2]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <HAL_RTC_SetAlarm_IT+0x42>
 800266a:	2302      	movs	r3, #2
 800266c:	e130      	b.n	80028d0 <HAL_RTC_SetAlarm_IT+0x2a4>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2220      	movs	r2, #32
 8002672:	2101      	movs	r1, #1
 8002674:	5499      	strb	r1, [r3, r2]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2221      	movs	r2, #33	@ 0x21
 800267a:	2102      	movs	r1, #2
 800267c:	5499      	strb	r1, [r3, r2]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d136      	bne.n	80026f2 <HAL_RTC_SetAlarm_IT+0xc6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	2240      	movs	r2, #64	@ 0x40
 800268c:	4013      	ands	r3, r2
 800268e:	d102      	bne.n	8002696 <HAL_RTC_SetAlarm_IT+0x6a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	2200      	movs	r2, #0
 8002694:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	0018      	movs	r0, r3
 800269c:	f000 fa14 	bl	8002ac8 <RTC_ByteToBcd2>
 80026a0:	0003      	movs	r3, r0
 80026a2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	785b      	ldrb	r3, [r3, #1]
 80026a8:	0018      	movs	r0, r3
 80026aa:	f000 fa0d 	bl	8002ac8 <RTC_ByteToBcd2>
 80026ae:	0003      	movs	r3, r0
 80026b0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80026b2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	789b      	ldrb	r3, [r3, #2]
 80026b8:	0018      	movs	r0, r3
 80026ba:	f000 fa05 	bl	8002ac8 <RTC_ByteToBcd2>
 80026be:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80026c0:	0022      	movs	r2, r4
 80026c2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	78db      	ldrb	r3, [r3, #3]
 80026c8:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80026ca:	431a      	orrs	r2, r3
 80026cc:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	2220      	movs	r2, #32
 80026d2:	5c9b      	ldrb	r3, [r3, r2]
 80026d4:	0018      	movs	r0, r3
 80026d6:	f000 f9f7 	bl	8002ac8 <RTC_ByteToBcd2>
 80026da:	0003      	movs	r3, r0
 80026dc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80026de:	0022      	movs	r2, r4
 80026e0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80026e6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61fb      	str	r3, [r7, #28]
 80026f0:	e022      	b.n	8002738 <HAL_RTC_SetAlarm_IT+0x10c>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	2240      	movs	r2, #64	@ 0x40
 80026fa:	4013      	ands	r3, r2
 80026fc:	d102      	bne.n	8002704 <HAL_RTC_SetAlarm_IT+0xd8>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	2200      	movs	r2, #0
 8002702:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	785b      	ldrb	r3, [r3, #1]
 800270e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002710:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8002716:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	78db      	ldrb	r3, [r3, #3]
 800271c:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800271e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2120      	movs	r1, #32
 8002724:	5c5b      	ldrb	r3, [r3, r1]
 8002726:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8002728:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800272e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8002734:	4313      	orrs	r3, r2
 8002736:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8002740:	4313      	orrs	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	22ca      	movs	r2, #202	@ 0xca
 800274a:	625a      	str	r2, [r3, #36]	@ 0x24
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2253      	movs	r2, #83	@ 0x53
 8002752:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002758:	2380      	movs	r3, #128	@ 0x80
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	429a      	cmp	r2, r3
 800275e:	d146      	bne.n	80027ee <HAL_RTC_SetAlarm_IT+0x1c2>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	495c      	ldr	r1, [pc, #368]	@ (80028dc <HAL_RTC_SetAlarm_IT+0x2b0>)
 800276c:	400a      	ands	r2, r1
 800276e:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	22ff      	movs	r2, #255	@ 0xff
 8002778:	401a      	ands	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4958      	ldr	r1, [pc, #352]	@ (80028e0 <HAL_RTC_SetAlarm_IT+0x2b4>)
 8002780:	430a      	orrs	r2, r1
 8002782:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	3b01      	subs	r3, #1
 8002788:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10d      	bne.n	80027ac <HAL_RTC_SetAlarm_IT+0x180>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	22ff      	movs	r2, #255	@ 0xff
 8002796:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2221      	movs	r2, #33	@ 0x21
 800279c:	2103      	movs	r1, #3
 800279e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2220      	movs	r2, #32
 80027a4:	2100      	movs	r1, #0
 80027a6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e091      	b.n	80028d0 <HAL_RTC_SetAlarm_IT+0x2a4>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	2201      	movs	r2, #1
 80027b4:	4013      	ands	r3, r2
 80027b6:	d0e5      	beq.n	8002784 <HAL_RTC_SetAlarm_IT+0x158>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	69fa      	ldr	r2, [r7, #28]
 80027be:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2180      	movs	r1, #128	@ 0x80
 80027d4:	0049      	lsls	r1, r1, #1
 80027d6:	430a      	orrs	r2, r1
 80027d8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2180      	movs	r1, #128	@ 0x80
 80027e6:	0149      	lsls	r1, r1, #5
 80027e8:	430a      	orrs	r2, r1
 80027ea:	609a      	str	r2, [r3, #8]
 80027ec:	e055      	b.n	800289a <HAL_RTC_SetAlarm_IT+0x26e>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	493a      	ldr	r1, [pc, #232]	@ (80028e4 <HAL_RTC_SetAlarm_IT+0x2b8>)
 80027fa:	400a      	ands	r2, r1
 80027fc:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	22ff      	movs	r2, #255	@ 0xff
 8002806:	401a      	ands	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4936      	ldr	r1, [pc, #216]	@ (80028e8 <HAL_RTC_SetAlarm_IT+0x2bc>)
 800280e:	430a      	orrs	r2, r1
 8002810:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002812:	4b31      	ldr	r3, [pc, #196]	@ (80028d8 <HAL_RTC_SetAlarm_IT+0x2ac>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	22fa      	movs	r2, #250	@ 0xfa
 8002818:	01d1      	lsls	r1, r2, #7
 800281a:	0018      	movs	r0, r3
 800281c:	f7fd fc74 	bl	8000108 <__udivsi3>
 8002820:	0003      	movs	r3, r0
 8002822:	001a      	movs	r2, r3
 8002824:	0013      	movs	r3, r2
 8002826:	015b      	lsls	r3, r3, #5
 8002828:	1a9b      	subs	r3, r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	189b      	adds	r3, r3, r2
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	3b01      	subs	r3, #1
 8002836:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10d      	bne.n	800285a <HAL_RTC_SetAlarm_IT+0x22e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	22ff      	movs	r2, #255	@ 0xff
 8002844:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2221      	movs	r2, #33	@ 0x21
 800284a:	2103      	movs	r1, #3
 800284c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2220      	movs	r2, #32
 8002852:	2100      	movs	r1, #0
 8002854:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e03a      	b.n	80028d0 <HAL_RTC_SetAlarm_IT+0x2a4>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	2202      	movs	r2, #2
 8002862:	4013      	ands	r3, r2
 8002864:	d0e5      	beq.n	8002832 <HAL_RTC_SetAlarm_IT+0x206>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	69fa      	ldr	r2, [r7, #28]
 800286c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2180      	movs	r1, #128	@ 0x80
 8002882:	0089      	lsls	r1, r1, #2
 8002884:	430a      	orrs	r2, r1
 8002886:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2180      	movs	r1, #128	@ 0x80
 8002894:	0189      	lsls	r1, r1, #6
 8002896:	430a      	orrs	r2, r1
 8002898:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800289a:	4b14      	ldr	r3, [pc, #80]	@ (80028ec <HAL_RTC_SetAlarm_IT+0x2c0>)
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	4b13      	ldr	r3, [pc, #76]	@ (80028ec <HAL_RTC_SetAlarm_IT+0x2c0>)
 80028a0:	2180      	movs	r1, #128	@ 0x80
 80028a2:	0289      	lsls	r1, r1, #10
 80028a4:	430a      	orrs	r2, r1
 80028a6:	601a      	str	r2, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80028a8:	4b10      	ldr	r3, [pc, #64]	@ (80028ec <HAL_RTC_SetAlarm_IT+0x2c0>)
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	4b0f      	ldr	r3, [pc, #60]	@ (80028ec <HAL_RTC_SetAlarm_IT+0x2c0>)
 80028ae:	2180      	movs	r1, #128	@ 0x80
 80028b0:	0289      	lsls	r1, r1, #10
 80028b2:	430a      	orrs	r2, r1
 80028b4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	22ff      	movs	r2, #255	@ 0xff
 80028bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2221      	movs	r2, #33	@ 0x21
 80028c2:	2101      	movs	r1, #1
 80028c4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2220      	movs	r2, #32
 80028ca:	2100      	movs	r1, #0
 80028cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	0018      	movs	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	b009      	add	sp, #36	@ 0x24
 80028d6:	bd90      	pop	{r4, r7, pc}
 80028d8:	20000000 	.word	0x20000000
 80028dc:	fffffeff 	.word	0xfffffeff
 80028e0:	fffffe7f 	.word	0xfffffe7f
 80028e4:	fffffdff 	.word	0xfffffdff
 80028e8:	fffffd7f 	.word	0xfffffd7f
 80028ec:	40010400 	.word	0x40010400

080028f0 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80028f8:	4b21      	ldr	r3, [pc, #132]	@ (8002980 <HAL_RTC_AlarmIRQHandler+0x90>)
 80028fa:	2280      	movs	r2, #128	@ 0x80
 80028fc:	0292      	lsls	r2, r2, #10
 80028fe:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	2380      	movs	r3, #128	@ 0x80
 8002908:	015b      	lsls	r3, r3, #5
 800290a:	4013      	ands	r3, r2
 800290c:	d014      	beq.n	8002938 <HAL_RTC_AlarmIRQHandler+0x48>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68da      	ldr	r2, [r3, #12]
 8002914:	2380      	movs	r3, #128	@ 0x80
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	4013      	ands	r3, r2
 800291a:	d00d      	beq.n	8002938 <HAL_RTC_AlarmIRQHandler+0x48>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	22ff      	movs	r2, #255	@ 0xff
 8002924:	401a      	ands	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4916      	ldr	r1, [pc, #88]	@ (8002984 <HAL_RTC_AlarmIRQHandler+0x94>)
 800292c:	430a      	orrs	r2, r1
 800292e:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	0018      	movs	r0, r3
 8002934:	f000 f82a 	bl	800298c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689a      	ldr	r2, [r3, #8]
 800293e:	2380      	movs	r3, #128	@ 0x80
 8002940:	019b      	lsls	r3, r3, #6
 8002942:	4013      	ands	r3, r2
 8002944:	d014      	beq.n	8002970 <HAL_RTC_AlarmIRQHandler+0x80>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68da      	ldr	r2, [r3, #12]
 800294c:	2380      	movs	r3, #128	@ 0x80
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4013      	ands	r3, r2
 8002952:	d00d      	beq.n	8002970 <HAL_RTC_AlarmIRQHandler+0x80>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	22ff      	movs	r2, #255	@ 0xff
 800295c:	401a      	ands	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4909      	ldr	r1, [pc, #36]	@ (8002988 <HAL_RTC_AlarmIRQHandler+0x98>)
 8002964:	430a      	orrs	r2, r1
 8002966:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	0018      	movs	r0, r3
 800296c:	f000 f8cd 	bl	8002b0a <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2221      	movs	r2, #33	@ 0x21
 8002974:	2101      	movs	r1, #1
 8002976:	5499      	strb	r1, [r3, r2]
}
 8002978:	46c0      	nop			@ (mov r8, r8)
 800297a:	46bd      	mov	sp, r7
 800297c:	b002      	add	sp, #8
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40010400 	.word	0x40010400
 8002984:	fffffe7f 	.word	0xfffffe7f
 8002988:	fffffd7f 	.word	0xfffffd7f

0800298c <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8002994:	46c0      	nop			@ (mov r8, r8)
 8002996:	46bd      	mov	sp, r7
 8002998:	b002      	add	sp, #8
 800299a:	bd80      	pop	{r7, pc}

0800299c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a0e      	ldr	r2, [pc, #56]	@ (80029e8 <HAL_RTC_WaitForSynchro+0x4c>)
 80029ae:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029b0:	f7fe f9b8 	bl	8000d24 <HAL_GetTick>
 80029b4:	0003      	movs	r3, r0
 80029b6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80029b8:	e00a      	b.n	80029d0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80029ba:	f7fe f9b3 	bl	8000d24 <HAL_GetTick>
 80029be:	0002      	movs	r2, r0
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	1ad2      	subs	r2, r2, r3
 80029c4:	23fa      	movs	r3, #250	@ 0xfa
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d901      	bls.n	80029d0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e006      	b.n	80029de <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	2220      	movs	r2, #32
 80029d8:	4013      	ands	r3, r2
 80029da:	d0ee      	beq.n	80029ba <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	0018      	movs	r0, r3
 80029e0:	46bd      	mov	sp, r7
 80029e2:	b004      	add	sp, #16
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	46c0      	nop			@ (mov r8, r8)
 80029e8:	0001ff5f 	.word	0x0001ff5f

080029ec <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80029f8:	230f      	movs	r3, #15
 80029fa:	18fb      	adds	r3, r7, r3
 80029fc:	2200      	movs	r2, #0
 80029fe:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	2240      	movs	r2, #64	@ 0x40
 8002a08:	4013      	ands	r3, r2
 8002a0a:	d12c      	bne.n	8002a66 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68da      	ldr	r2, [r3, #12]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2180      	movs	r1, #128	@ 0x80
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a1c:	f7fe f982 	bl	8000d24 <HAL_GetTick>
 8002a20:	0003      	movs	r3, r0
 8002a22:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002a24:	e014      	b.n	8002a50 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002a26:	f7fe f97d 	bl	8000d24 <HAL_GetTick>
 8002a2a:	0002      	movs	r2, r0
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	1ad2      	subs	r2, r2, r3
 8002a30:	200f      	movs	r0, #15
 8002a32:	183b      	adds	r3, r7, r0
 8002a34:	1839      	adds	r1, r7, r0
 8002a36:	7809      	ldrb	r1, [r1, #0]
 8002a38:	7019      	strb	r1, [r3, #0]
 8002a3a:	23fa      	movs	r3, #250	@ 0xfa
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d906      	bls.n	8002a50 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2221      	movs	r2, #33	@ 0x21
 8002a46:	2104      	movs	r1, #4
 8002a48:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8002a4a:	183b      	adds	r3, r7, r0
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	2240      	movs	r2, #64	@ 0x40
 8002a58:	4013      	ands	r3, r2
 8002a5a:	d104      	bne.n	8002a66 <RTC_EnterInitMode+0x7a>
 8002a5c:	230f      	movs	r3, #15
 8002a5e:	18fb      	adds	r3, r7, r3
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d1df      	bne.n	8002a26 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8002a66:	230f      	movs	r3, #15
 8002a68:	18fb      	adds	r3, r7, r3
 8002a6a:	781b      	ldrb	r3, [r3, #0]
}
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	b004      	add	sp, #16
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002a74:	b590      	push	{r4, r7, lr}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a7c:	240f      	movs	r4, #15
 8002a7e:	193b      	adds	r3, r7, r4
 8002a80:	2200      	movs	r2, #0
 8002a82:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68da      	ldr	r2, [r3, #12]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2180      	movs	r1, #128	@ 0x80
 8002a90:	438a      	bics	r2, r1
 8002a92:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	d10c      	bne.n	8002aba <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	f7ff ff7a 	bl	800299c <HAL_RTC_WaitForSynchro>
 8002aa8:	1e03      	subs	r3, r0, #0
 8002aaa:	d006      	beq.n	8002aba <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2221      	movs	r2, #33	@ 0x21
 8002ab0:	2104      	movs	r1, #4
 8002ab2:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8002ab4:	193b      	adds	r3, r7, r4
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8002aba:	230f      	movs	r3, #15
 8002abc:	18fb      	adds	r3, r7, r3
 8002abe:	781b      	ldrb	r3, [r3, #0]
}
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	b005      	add	sp, #20
 8002ac6:	bd90      	pop	{r4, r7, pc}

08002ac8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	0002      	movs	r2, r0
 8002ad0:	1dfb      	adds	r3, r7, #7
 8002ad2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8002ad8:	e007      	b.n	8002aea <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	3301      	adds	r3, #1
 8002ade:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8002ae0:	1dfb      	adds	r3, r7, #7
 8002ae2:	1dfa      	adds	r2, r7, #7
 8002ae4:	7812      	ldrb	r2, [r2, #0]
 8002ae6:	3a0a      	subs	r2, #10
 8002ae8:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8002aea:	1dfb      	adds	r3, r7, #7
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b09      	cmp	r3, #9
 8002af0:	d8f3      	bhi.n	8002ada <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	1dfb      	adds	r3, r7, #7
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	b2db      	uxtb	r3, r3
}
 8002b02:	0018      	movs	r0, r3
 8002b04:	46bd      	mov	sp, r7
 8002b06:	b004      	add	sp, #16
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b082      	sub	sp, #8
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002b12:	46c0      	nop			@ (mov r8, r8)
 8002b14:	46bd      	mov	sp, r7
 8002b16:	b002      	add	sp, #8
 8002b18:	bd80      	pop	{r7, pc}
	...

08002b1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e083      	b.n	8002c36 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d109      	bne.n	8002b4a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	2382      	movs	r3, #130	@ 0x82
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d009      	beq.n	8002b56 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	61da      	str	r2, [r3, #28]
 8002b48:	e005      	b.n	8002b56 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2251      	movs	r2, #81	@ 0x51
 8002b60:	5c9b      	ldrb	r3, [r3, r2]
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d107      	bne.n	8002b78 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2250      	movs	r2, #80	@ 0x50
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	0018      	movs	r0, r3
 8002b74:	f7fd ff44 	bl	8000a00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2251      	movs	r2, #81	@ 0x51
 8002b7c:	2102      	movs	r1, #2
 8002b7e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2140      	movs	r1, #64	@ 0x40
 8002b8c:	438a      	bics	r2, r1
 8002b8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	2382      	movs	r3, #130	@ 0x82
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	401a      	ands	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6899      	ldr	r1, [r3, #8]
 8002b9e:	2384      	movs	r3, #132	@ 0x84
 8002ba0:	021b      	lsls	r3, r3, #8
 8002ba2:	400b      	ands	r3, r1
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68d9      	ldr	r1, [r3, #12]
 8002baa:	2380      	movs	r3, #128	@ 0x80
 8002bac:	011b      	lsls	r3, r3, #4
 8002bae:	400b      	ands	r3, r1
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	2102      	movs	r1, #2
 8002bb8:	400b      	ands	r3, r1
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	400b      	ands	r3, r1
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6999      	ldr	r1, [r3, #24]
 8002bca:	2380      	movs	r3, #128	@ 0x80
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	400b      	ands	r3, r1
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	2138      	movs	r1, #56	@ 0x38
 8002bd8:	400b      	ands	r3, r1
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	2180      	movs	r1, #128	@ 0x80
 8002be2:	400b      	ands	r3, r1
 8002be4:	431a      	orrs	r2, r3
 8002be6:	0011      	movs	r1, r2
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bec:	2380      	movs	r3, #128	@ 0x80
 8002bee:	019b      	lsls	r3, r3, #6
 8002bf0:	401a      	ands	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	0c1b      	lsrs	r3, r3, #16
 8002c00:	2204      	movs	r2, #4
 8002c02:	4013      	ands	r3, r2
 8002c04:	0019      	movs	r1, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0a:	2210      	movs	r2, #16
 8002c0c:	401a      	ands	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	69da      	ldr	r2, [r3, #28]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4907      	ldr	r1, [pc, #28]	@ (8002c40 <HAL_SPI_Init+0x124>)
 8002c22:	400a      	ands	r2, r1
 8002c24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2251      	movs	r2, #81	@ 0x51
 8002c30:	2101      	movs	r1, #1
 8002c32:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	0018      	movs	r0, r3
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	b002      	add	sp, #8
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	46c0      	nop			@ (mov r8, r8)
 8002c40:	fffff7ff 	.word	0xfffff7ff

08002c44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e044      	b.n	8002ce0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d107      	bne.n	8002c6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2278      	movs	r2, #120	@ 0x78
 8002c62:	2100      	movs	r1, #0
 8002c64:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f7fd ff2f 	bl	8000acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2224      	movs	r2, #36	@ 0x24
 8002c72:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2101      	movs	r1, #1
 8002c80:	438a      	bics	r2, r1
 8002c82:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	0018      	movs	r0, r3
 8002c88:	f000 fb2e 	bl	80032e8 <UART_SetConfig>
 8002c8c:	0003      	movs	r3, r0
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d101      	bne.n	8002c96 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e024      	b.n	8002ce0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f000 fdbf 	bl	8003824 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	490d      	ldr	r1, [pc, #52]	@ (8002ce8 <HAL_UART_Init+0xa4>)
 8002cb2:	400a      	ands	r2, r1
 8002cb4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	212a      	movs	r1, #42	@ 0x2a
 8002cc2:	438a      	bics	r2, r1
 8002cc4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	0018      	movs	r0, r3
 8002cda:	f000 fe57 	bl	800398c <UART_CheckIdleState>
 8002cde:	0003      	movs	r3, r0
}
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	b002      	add	sp, #8
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	ffffb7ff 	.word	0xffffb7ff

08002cec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002cec:	b590      	push	{r4, r7, lr}
 8002cee:	b0ab      	sub	sp, #172	@ 0xac
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	22a4      	movs	r2, #164	@ 0xa4
 8002cfc:	18b9      	adds	r1, r7, r2
 8002cfe:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	20a0      	movs	r0, #160	@ 0xa0
 8002d08:	1839      	adds	r1, r7, r0
 8002d0a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	219c      	movs	r1, #156	@ 0x9c
 8002d14:	1879      	adds	r1, r7, r1
 8002d16:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002d18:	0011      	movs	r1, r2
 8002d1a:	18bb      	adds	r3, r7, r2
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a99      	ldr	r2, [pc, #612]	@ (8002f84 <HAL_UART_IRQHandler+0x298>)
 8002d20:	4013      	ands	r3, r2
 8002d22:	2298      	movs	r2, #152	@ 0x98
 8002d24:	18bc      	adds	r4, r7, r2
 8002d26:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002d28:	18bb      	adds	r3, r7, r2
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d114      	bne.n	8002d5a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d30:	187b      	adds	r3, r7, r1
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2220      	movs	r2, #32
 8002d36:	4013      	ands	r3, r2
 8002d38:	d00f      	beq.n	8002d5a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d3a:	183b      	adds	r3, r7, r0
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2220      	movs	r2, #32
 8002d40:	4013      	ands	r3, r2
 8002d42:	d00a      	beq.n	8002d5a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d100      	bne.n	8002d4e <HAL_UART_IRQHandler+0x62>
 8002d4c:	e2a0      	b.n	8003290 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	0010      	movs	r0, r2
 8002d56:	4798      	blx	r3
      }
      return;
 8002d58:	e29a      	b.n	8003290 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002d5a:	2398      	movs	r3, #152	@ 0x98
 8002d5c:	18fb      	adds	r3, r7, r3
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d100      	bne.n	8002d66 <HAL_UART_IRQHandler+0x7a>
 8002d64:	e114      	b.n	8002f90 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002d66:	239c      	movs	r3, #156	@ 0x9c
 8002d68:	18fb      	adds	r3, r7, r3
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	4013      	ands	r3, r2
 8002d70:	d106      	bne.n	8002d80 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002d72:	23a0      	movs	r3, #160	@ 0xa0
 8002d74:	18fb      	adds	r3, r7, r3
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a83      	ldr	r2, [pc, #524]	@ (8002f88 <HAL_UART_IRQHandler+0x29c>)
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d100      	bne.n	8002d80 <HAL_UART_IRQHandler+0x94>
 8002d7e:	e107      	b.n	8002f90 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002d80:	23a4      	movs	r3, #164	@ 0xa4
 8002d82:	18fb      	adds	r3, r7, r3
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2201      	movs	r2, #1
 8002d88:	4013      	ands	r3, r2
 8002d8a:	d012      	beq.n	8002db2 <HAL_UART_IRQHandler+0xc6>
 8002d8c:	23a0      	movs	r3, #160	@ 0xa0
 8002d8e:	18fb      	adds	r3, r7, r3
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	2380      	movs	r3, #128	@ 0x80
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	4013      	ands	r3, r2
 8002d98:	d00b      	beq.n	8002db2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2284      	movs	r2, #132	@ 0x84
 8002da6:	589b      	ldr	r3, [r3, r2]
 8002da8:	2201      	movs	r2, #1
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2184      	movs	r1, #132	@ 0x84
 8002db0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002db2:	23a4      	movs	r3, #164	@ 0xa4
 8002db4:	18fb      	adds	r3, r7, r3
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2202      	movs	r2, #2
 8002dba:	4013      	ands	r3, r2
 8002dbc:	d011      	beq.n	8002de2 <HAL_UART_IRQHandler+0xf6>
 8002dbe:	239c      	movs	r3, #156	@ 0x9c
 8002dc0:	18fb      	adds	r3, r7, r3
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	d00b      	beq.n	8002de2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2284      	movs	r2, #132	@ 0x84
 8002dd6:	589b      	ldr	r3, [r3, r2]
 8002dd8:	2204      	movs	r2, #4
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2184      	movs	r1, #132	@ 0x84
 8002de0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002de2:	23a4      	movs	r3, #164	@ 0xa4
 8002de4:	18fb      	adds	r3, r7, r3
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2204      	movs	r2, #4
 8002dea:	4013      	ands	r3, r2
 8002dec:	d011      	beq.n	8002e12 <HAL_UART_IRQHandler+0x126>
 8002dee:	239c      	movs	r3, #156	@ 0x9c
 8002df0:	18fb      	adds	r3, r7, r3
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2201      	movs	r2, #1
 8002df6:	4013      	ands	r3, r2
 8002df8:	d00b      	beq.n	8002e12 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2204      	movs	r2, #4
 8002e00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2284      	movs	r2, #132	@ 0x84
 8002e06:	589b      	ldr	r3, [r3, r2]
 8002e08:	2202      	movs	r2, #2
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2184      	movs	r1, #132	@ 0x84
 8002e10:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002e12:	23a4      	movs	r3, #164	@ 0xa4
 8002e14:	18fb      	adds	r3, r7, r3
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2208      	movs	r2, #8
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	d017      	beq.n	8002e4e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e1e:	23a0      	movs	r3, #160	@ 0xa0
 8002e20:	18fb      	adds	r3, r7, r3
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2220      	movs	r2, #32
 8002e26:	4013      	ands	r3, r2
 8002e28:	d105      	bne.n	8002e36 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002e2a:	239c      	movs	r3, #156	@ 0x9c
 8002e2c:	18fb      	adds	r3, r7, r3
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2201      	movs	r2, #1
 8002e32:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002e34:	d00b      	beq.n	8002e4e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2208      	movs	r2, #8
 8002e3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2284      	movs	r2, #132	@ 0x84
 8002e42:	589b      	ldr	r3, [r3, r2]
 8002e44:	2208      	movs	r2, #8
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2184      	movs	r1, #132	@ 0x84
 8002e4c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002e4e:	23a4      	movs	r3, #164	@ 0xa4
 8002e50:	18fb      	adds	r3, r7, r3
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	2380      	movs	r3, #128	@ 0x80
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	4013      	ands	r3, r2
 8002e5a:	d013      	beq.n	8002e84 <HAL_UART_IRQHandler+0x198>
 8002e5c:	23a0      	movs	r3, #160	@ 0xa0
 8002e5e:	18fb      	adds	r3, r7, r3
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	2380      	movs	r3, #128	@ 0x80
 8002e64:	04db      	lsls	r3, r3, #19
 8002e66:	4013      	ands	r3, r2
 8002e68:	d00c      	beq.n	8002e84 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2280      	movs	r2, #128	@ 0x80
 8002e70:	0112      	lsls	r2, r2, #4
 8002e72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2284      	movs	r2, #132	@ 0x84
 8002e78:	589b      	ldr	r3, [r3, r2]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2184      	movs	r1, #132	@ 0x84
 8002e82:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2284      	movs	r2, #132	@ 0x84
 8002e88:	589b      	ldr	r3, [r3, r2]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d100      	bne.n	8002e90 <HAL_UART_IRQHandler+0x1a4>
 8002e8e:	e201      	b.n	8003294 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e90:	23a4      	movs	r3, #164	@ 0xa4
 8002e92:	18fb      	adds	r3, r7, r3
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2220      	movs	r2, #32
 8002e98:	4013      	ands	r3, r2
 8002e9a:	d00e      	beq.n	8002eba <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e9c:	23a0      	movs	r3, #160	@ 0xa0
 8002e9e:	18fb      	adds	r3, r7, r3
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	d008      	beq.n	8002eba <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d004      	beq.n	8002eba <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	0010      	movs	r0, r2
 8002eb8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2284      	movs	r2, #132	@ 0x84
 8002ebe:	589b      	ldr	r3, [r3, r2]
 8002ec0:	2194      	movs	r1, #148	@ 0x94
 8002ec2:	187a      	adds	r2, r7, r1
 8002ec4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	2240      	movs	r2, #64	@ 0x40
 8002ece:	4013      	ands	r3, r2
 8002ed0:	2b40      	cmp	r3, #64	@ 0x40
 8002ed2:	d004      	beq.n	8002ede <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002ed4:	187b      	adds	r3, r7, r1
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2228      	movs	r2, #40	@ 0x28
 8002eda:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002edc:	d047      	beq.n	8002f6e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	f000 fe65 	bl	8003bb0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	2240      	movs	r2, #64	@ 0x40
 8002eee:	4013      	ands	r3, r2
 8002ef0:	2b40      	cmp	r3, #64	@ 0x40
 8002ef2:	d137      	bne.n	8002f64 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ef4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ef8:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8002efa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002efc:	2090      	movs	r0, #144	@ 0x90
 8002efe:	183a      	adds	r2, r7, r0
 8002f00:	6013      	str	r3, [r2, #0]
 8002f02:	2301      	movs	r3, #1
 8002f04:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f08:	f383 8810 	msr	PRIMASK, r3
}
 8002f0c:	46c0      	nop			@ (mov r8, r8)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2140      	movs	r1, #64	@ 0x40
 8002f1a:	438a      	bics	r2, r1
 8002f1c:	609a      	str	r2, [r3, #8]
 8002f1e:	183b      	adds	r3, r7, r0
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f26:	f383 8810 	msr	PRIMASK, r3
}
 8002f2a:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d012      	beq.n	8002f5a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f38:	4a14      	ldr	r2, [pc, #80]	@ (8002f8c <HAL_UART_IRQHandler+0x2a0>)
 8002f3a:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f40:	0018      	movs	r0, r3
 8002f42:	f7fe f83b 	bl	8000fbc <HAL_DMA_Abort_IT>
 8002f46:	1e03      	subs	r3, r0, #0
 8002f48:	d01a      	beq.n	8002f80 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f54:	0018      	movs	r0, r3
 8002f56:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f58:	e012      	b.n	8002f80 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	f000 f9af 	bl	80032c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f62:	e00d      	b.n	8002f80 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	0018      	movs	r0, r3
 8002f68:	f000 f9aa 	bl	80032c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f6c:	e008      	b.n	8002f80 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	0018      	movs	r0, r3
 8002f72:	f000 f9a5 	bl	80032c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2284      	movs	r2, #132	@ 0x84
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002f7e:	e189      	b.n	8003294 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f80:	46c0      	nop			@ (mov r8, r8)
    return;
 8002f82:	e187      	b.n	8003294 <HAL_UART_IRQHandler+0x5a8>
 8002f84:	0000080f 	.word	0x0000080f
 8002f88:	04000120 	.word	0x04000120
 8002f8c:	08003c79 	.word	0x08003c79

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d000      	beq.n	8002f9a <HAL_UART_IRQHandler+0x2ae>
 8002f98:	e13b      	b.n	8003212 <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002f9a:	23a4      	movs	r3, #164	@ 0xa4
 8002f9c:	18fb      	adds	r3, r7, r3
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2210      	movs	r2, #16
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	d100      	bne.n	8002fa8 <HAL_UART_IRQHandler+0x2bc>
 8002fa6:	e134      	b.n	8003212 <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002fa8:	23a0      	movs	r3, #160	@ 0xa0
 8002faa:	18fb      	adds	r3, r7, r3
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2210      	movs	r2, #16
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	d100      	bne.n	8002fb6 <HAL_UART_IRQHandler+0x2ca>
 8002fb4:	e12d      	b.n	8003212 <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2210      	movs	r2, #16
 8002fbc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	2240      	movs	r2, #64	@ 0x40
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	2b40      	cmp	r3, #64	@ 0x40
 8002fca:	d000      	beq.n	8002fce <HAL_UART_IRQHandler+0x2e2>
 8002fcc:	e0a1      	b.n	8003112 <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	217e      	movs	r1, #126	@ 0x7e
 8002fd8:	187b      	adds	r3, r7, r1
 8002fda:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002fdc:	187b      	adds	r3, r7, r1
 8002fde:	881b      	ldrh	r3, [r3, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d100      	bne.n	8002fe6 <HAL_UART_IRQHandler+0x2fa>
 8002fe4:	e158      	b.n	8003298 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2258      	movs	r2, #88	@ 0x58
 8002fea:	5a9b      	ldrh	r3, [r3, r2]
 8002fec:	187a      	adds	r2, r7, r1
 8002fee:	8812      	ldrh	r2, [r2, #0]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d300      	bcc.n	8002ff6 <HAL_UART_IRQHandler+0x30a>
 8002ff4:	e150      	b.n	8003298 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	187a      	adds	r2, r7, r1
 8002ffa:	215a      	movs	r1, #90	@ 0x5a
 8002ffc:	8812      	ldrh	r2, [r2, #0]
 8002ffe:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2220      	movs	r2, #32
 800300a:	4013      	ands	r3, r2
 800300c:	d16f      	bne.n	80030ee <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800300e:	f3ef 8310 	mrs	r3, PRIMASK
 8003012:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003016:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003018:	2301      	movs	r3, #1
 800301a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800301c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800301e:	f383 8810 	msr	PRIMASK, r3
}
 8003022:	46c0      	nop			@ (mov r8, r8)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	499e      	ldr	r1, [pc, #632]	@ (80032a8 <HAL_UART_IRQHandler+0x5bc>)
 8003030:	400a      	ands	r2, r1
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003036:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800303a:	f383 8810 	msr	PRIMASK, r3
}
 800303e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003040:	f3ef 8310 	mrs	r3, PRIMASK
 8003044:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003046:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003048:	677b      	str	r3, [r7, #116]	@ 0x74
 800304a:	2301      	movs	r3, #1
 800304c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800304e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003050:	f383 8810 	msr	PRIMASK, r3
}
 8003054:	46c0      	nop			@ (mov r8, r8)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689a      	ldr	r2, [r3, #8]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2101      	movs	r1, #1
 8003062:	438a      	bics	r2, r1
 8003064:	609a      	str	r2, [r3, #8]
 8003066:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003068:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800306a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800306c:	f383 8810 	msr	PRIMASK, r3
}
 8003070:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003072:	f3ef 8310 	mrs	r3, PRIMASK
 8003076:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003078:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800307a:	673b      	str	r3, [r7, #112]	@ 0x70
 800307c:	2301      	movs	r3, #1
 800307e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003080:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003082:	f383 8810 	msr	PRIMASK, r3
}
 8003086:	46c0      	nop			@ (mov r8, r8)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689a      	ldr	r2, [r3, #8]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2140      	movs	r1, #64	@ 0x40
 8003094:	438a      	bics	r2, r1
 8003096:	609a      	str	r2, [r3, #8]
 8003098:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800309a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800309c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800309e:	f383 8810 	msr	PRIMASK, r3
}
 80030a2:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2280      	movs	r2, #128	@ 0x80
 80030a8:	2120      	movs	r1, #32
 80030aa:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030b2:	f3ef 8310 	mrs	r3, PRIMASK
 80030b6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80030b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80030bc:	2301      	movs	r3, #1
 80030be:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80030c2:	f383 8810 	msr	PRIMASK, r3
}
 80030c6:	46c0      	nop			@ (mov r8, r8)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2110      	movs	r1, #16
 80030d4:	438a      	bics	r2, r1
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030da:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030de:	f383 8810 	msr	PRIMASK, r3
}
 80030e2:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030e8:	0018      	movs	r0, r3
 80030ea:	f7fd ff27 	bl	8000f3c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2202      	movs	r2, #2
 80030f2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2258      	movs	r2, #88	@ 0x58
 80030f8:	5a9a      	ldrh	r2, [r3, r2]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	215a      	movs	r1, #90	@ 0x5a
 80030fe:	5a5b      	ldrh	r3, [r3, r1]
 8003100:	b29b      	uxth	r3, r3
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	b29a      	uxth	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	0011      	movs	r1, r2
 800310a:	0018      	movs	r0, r3
 800310c:	f000 f8e0 	bl	80032d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003110:	e0c2      	b.n	8003298 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2258      	movs	r2, #88	@ 0x58
 8003116:	5a99      	ldrh	r1, [r3, r2]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	225a      	movs	r2, #90	@ 0x5a
 800311c:	5a9b      	ldrh	r3, [r3, r2]
 800311e:	b29a      	uxth	r2, r3
 8003120:	208e      	movs	r0, #142	@ 0x8e
 8003122:	183b      	adds	r3, r7, r0
 8003124:	1a8a      	subs	r2, r1, r2
 8003126:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	225a      	movs	r2, #90	@ 0x5a
 800312c:	5a9b      	ldrh	r3, [r3, r2]
 800312e:	b29b      	uxth	r3, r3
 8003130:	2b00      	cmp	r3, #0
 8003132:	d100      	bne.n	8003136 <HAL_UART_IRQHandler+0x44a>
 8003134:	e0b2      	b.n	800329c <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8003136:	183b      	adds	r3, r7, r0
 8003138:	881b      	ldrh	r3, [r3, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d100      	bne.n	8003140 <HAL_UART_IRQHandler+0x454>
 800313e:	e0ad      	b.n	800329c <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003140:	f3ef 8310 	mrs	r3, PRIMASK
 8003144:	60fb      	str	r3, [r7, #12]
  return(result);
 8003146:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003148:	2488      	movs	r4, #136	@ 0x88
 800314a:	193a      	adds	r2, r7, r4
 800314c:	6013      	str	r3, [r2, #0]
 800314e:	2301      	movs	r3, #1
 8003150:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	f383 8810 	msr	PRIMASK, r3
}
 8003158:	46c0      	nop			@ (mov r8, r8)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4951      	ldr	r1, [pc, #324]	@ (80032ac <HAL_UART_IRQHandler+0x5c0>)
 8003166:	400a      	ands	r2, r1
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	193b      	adds	r3, r7, r4
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	f383 8810 	msr	PRIMASK, r3
}
 8003176:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003178:	f3ef 8310 	mrs	r3, PRIMASK
 800317c:	61bb      	str	r3, [r7, #24]
  return(result);
 800317e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003180:	2484      	movs	r4, #132	@ 0x84
 8003182:	193a      	adds	r2, r7, r4
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	2301      	movs	r3, #1
 8003188:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	f383 8810 	msr	PRIMASK, r3
}
 8003190:	46c0      	nop			@ (mov r8, r8)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2101      	movs	r1, #1
 800319e:	438a      	bics	r2, r1
 80031a0:	609a      	str	r2, [r3, #8]
 80031a2:	193b      	adds	r3, r7, r4
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	f383 8810 	msr	PRIMASK, r3
}
 80031ae:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2280      	movs	r2, #128	@ 0x80
 80031b4:	2120      	movs	r1, #32
 80031b6:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031c4:	f3ef 8310 	mrs	r3, PRIMASK
 80031c8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80031ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031cc:	2480      	movs	r4, #128	@ 0x80
 80031ce:	193a      	adds	r2, r7, r4
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	2301      	movs	r3, #1
 80031d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031d8:	f383 8810 	msr	PRIMASK, r3
}
 80031dc:	46c0      	nop			@ (mov r8, r8)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2110      	movs	r1, #16
 80031ea:	438a      	bics	r2, r1
 80031ec:	601a      	str	r2, [r3, #0]
 80031ee:	193b      	adds	r3, r7, r4
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031f6:	f383 8810 	msr	PRIMASK, r3
}
 80031fa:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2202      	movs	r2, #2
 8003200:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003202:	183b      	adds	r3, r7, r0
 8003204:	881a      	ldrh	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	0011      	movs	r1, r2
 800320a:	0018      	movs	r0, r3
 800320c:	f000 f860 	bl	80032d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003210:	e044      	b.n	800329c <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003212:	23a4      	movs	r3, #164	@ 0xa4
 8003214:	18fb      	adds	r3, r7, r3
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	2380      	movs	r3, #128	@ 0x80
 800321a:	035b      	lsls	r3, r3, #13
 800321c:	4013      	ands	r3, r2
 800321e:	d010      	beq.n	8003242 <HAL_UART_IRQHandler+0x556>
 8003220:	239c      	movs	r3, #156	@ 0x9c
 8003222:	18fb      	adds	r3, r7, r3
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	2380      	movs	r3, #128	@ 0x80
 8003228:	03db      	lsls	r3, r3, #15
 800322a:	4013      	ands	r3, r2
 800322c:	d009      	beq.n	8003242 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2280      	movs	r2, #128	@ 0x80
 8003234:	0352      	lsls	r2, r2, #13
 8003236:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	0018      	movs	r0, r3
 800323c:	f000 fd5e 	bl	8003cfc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003240:	e02f      	b.n	80032a2 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003242:	23a4      	movs	r3, #164	@ 0xa4
 8003244:	18fb      	adds	r3, r7, r3
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2280      	movs	r2, #128	@ 0x80
 800324a:	4013      	ands	r3, r2
 800324c:	d00f      	beq.n	800326e <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800324e:	23a0      	movs	r3, #160	@ 0xa0
 8003250:	18fb      	adds	r3, r7, r3
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2280      	movs	r2, #128	@ 0x80
 8003256:	4013      	ands	r3, r2
 8003258:	d009      	beq.n	800326e <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800325e:	2b00      	cmp	r3, #0
 8003260:	d01e      	beq.n	80032a0 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	0010      	movs	r0, r2
 800326a:	4798      	blx	r3
    }
    return;
 800326c:	e018      	b.n	80032a0 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800326e:	23a4      	movs	r3, #164	@ 0xa4
 8003270:	18fb      	adds	r3, r7, r3
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2240      	movs	r2, #64	@ 0x40
 8003276:	4013      	ands	r3, r2
 8003278:	d013      	beq.n	80032a2 <HAL_UART_IRQHandler+0x5b6>
 800327a:	23a0      	movs	r3, #160	@ 0xa0
 800327c:	18fb      	adds	r3, r7, r3
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2240      	movs	r2, #64	@ 0x40
 8003282:	4013      	ands	r3, r2
 8003284:	d00d      	beq.n	80032a2 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	0018      	movs	r0, r3
 800328a:	f000 fd0c 	bl	8003ca6 <UART_EndTransmit_IT>
    return;
 800328e:	e008      	b.n	80032a2 <HAL_UART_IRQHandler+0x5b6>
      return;
 8003290:	46c0      	nop			@ (mov r8, r8)
 8003292:	e006      	b.n	80032a2 <HAL_UART_IRQHandler+0x5b6>
    return;
 8003294:	46c0      	nop			@ (mov r8, r8)
 8003296:	e004      	b.n	80032a2 <HAL_UART_IRQHandler+0x5b6>
      return;
 8003298:	46c0      	nop			@ (mov r8, r8)
 800329a:	e002      	b.n	80032a2 <HAL_UART_IRQHandler+0x5b6>
      return;
 800329c:	46c0      	nop			@ (mov r8, r8)
 800329e:	e000      	b.n	80032a2 <HAL_UART_IRQHandler+0x5b6>
    return;
 80032a0:	46c0      	nop			@ (mov r8, r8)
  }

}
 80032a2:	46bd      	mov	sp, r7
 80032a4:	b02b      	add	sp, #172	@ 0xac
 80032a6:	bd90      	pop	{r4, r7, pc}
 80032a8:	fffffeff 	.word	0xfffffeff
 80032ac:	fffffedf 	.word	0xfffffedf

080032b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80032b8:	46c0      	nop			@ (mov r8, r8)
 80032ba:	46bd      	mov	sp, r7
 80032bc:	b002      	add	sp, #8
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80032c8:	46c0      	nop			@ (mov r8, r8)
 80032ca:	46bd      	mov	sp, r7
 80032cc:	b002      	add	sp, #8
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	000a      	movs	r2, r1
 80032da:	1cbb      	adds	r3, r7, #2
 80032dc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032de:	46c0      	nop			@ (mov r8, r8)
 80032e0:	46bd      	mov	sp, r7
 80032e2:	b002      	add	sp, #8
 80032e4:	bd80      	pop	{r7, pc}
	...

080032e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032e8:	b5b0      	push	{r4, r5, r7, lr}
 80032ea:	b08e      	sub	sp, #56	@ 0x38
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032f0:	231a      	movs	r3, #26
 80032f2:	2218      	movs	r2, #24
 80032f4:	189b      	adds	r3, r3, r2
 80032f6:	19db      	adds	r3, r3, r7
 80032f8:	2200      	movs	r2, #0
 80032fa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	431a      	orrs	r2, r3
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	431a      	orrs	r2, r3
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	69db      	ldr	r3, [r3, #28]
 8003310:	4313      	orrs	r3, r2
 8003312:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4ac3      	ldr	r2, [pc, #780]	@ (8003628 <UART_SetConfig+0x340>)
 800331c:	4013      	ands	r3, r2
 800331e:	0019      	movs	r1, r3
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003326:	430a      	orrs	r2, r1
 8003328:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	4abe      	ldr	r2, [pc, #760]	@ (800362c <UART_SetConfig+0x344>)
 8003332:	4013      	ands	r3, r2
 8003334:	0019      	movs	r1, r3
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	68da      	ldr	r2, [r3, #12]
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	430a      	orrs	r2, r1
 8003340:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4ab8      	ldr	r2, [pc, #736]	@ (8003630 <UART_SetConfig+0x348>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d004      	beq.n	800335c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003358:	4313      	orrs	r3, r2
 800335a:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	4ab4      	ldr	r2, [pc, #720]	@ (8003634 <UART_SetConfig+0x34c>)
 8003364:	4013      	ands	r3, r2
 8003366:	0019      	movs	r1, r3
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800336e:	430a      	orrs	r2, r1
 8003370:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4ab0      	ldr	r2, [pc, #704]	@ (8003638 <UART_SetConfig+0x350>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d131      	bne.n	80033e0 <UART_SetConfig+0xf8>
 800337c:	4baf      	ldr	r3, [pc, #700]	@ (800363c <UART_SetConfig+0x354>)
 800337e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003380:	2203      	movs	r2, #3
 8003382:	4013      	ands	r3, r2
 8003384:	2b03      	cmp	r3, #3
 8003386:	d01d      	beq.n	80033c4 <UART_SetConfig+0xdc>
 8003388:	d823      	bhi.n	80033d2 <UART_SetConfig+0xea>
 800338a:	2b02      	cmp	r3, #2
 800338c:	d00c      	beq.n	80033a8 <UART_SetConfig+0xc0>
 800338e:	d820      	bhi.n	80033d2 <UART_SetConfig+0xea>
 8003390:	2b00      	cmp	r3, #0
 8003392:	d002      	beq.n	800339a <UART_SetConfig+0xb2>
 8003394:	2b01      	cmp	r3, #1
 8003396:	d00e      	beq.n	80033b6 <UART_SetConfig+0xce>
 8003398:	e01b      	b.n	80033d2 <UART_SetConfig+0xea>
 800339a:	231b      	movs	r3, #27
 800339c:	2218      	movs	r2, #24
 800339e:	189b      	adds	r3, r3, r2
 80033a0:	19db      	adds	r3, r3, r7
 80033a2:	2201      	movs	r2, #1
 80033a4:	701a      	strb	r2, [r3, #0]
 80033a6:	e0b4      	b.n	8003512 <UART_SetConfig+0x22a>
 80033a8:	231b      	movs	r3, #27
 80033aa:	2218      	movs	r2, #24
 80033ac:	189b      	adds	r3, r3, r2
 80033ae:	19db      	adds	r3, r3, r7
 80033b0:	2202      	movs	r2, #2
 80033b2:	701a      	strb	r2, [r3, #0]
 80033b4:	e0ad      	b.n	8003512 <UART_SetConfig+0x22a>
 80033b6:	231b      	movs	r3, #27
 80033b8:	2218      	movs	r2, #24
 80033ba:	189b      	adds	r3, r3, r2
 80033bc:	19db      	adds	r3, r3, r7
 80033be:	2204      	movs	r2, #4
 80033c0:	701a      	strb	r2, [r3, #0]
 80033c2:	e0a6      	b.n	8003512 <UART_SetConfig+0x22a>
 80033c4:	231b      	movs	r3, #27
 80033c6:	2218      	movs	r2, #24
 80033c8:	189b      	adds	r3, r3, r2
 80033ca:	19db      	adds	r3, r3, r7
 80033cc:	2208      	movs	r2, #8
 80033ce:	701a      	strb	r2, [r3, #0]
 80033d0:	e09f      	b.n	8003512 <UART_SetConfig+0x22a>
 80033d2:	231b      	movs	r3, #27
 80033d4:	2218      	movs	r2, #24
 80033d6:	189b      	adds	r3, r3, r2
 80033d8:	19db      	adds	r3, r3, r7
 80033da:	2210      	movs	r2, #16
 80033dc:	701a      	strb	r2, [r3, #0]
 80033de:	e098      	b.n	8003512 <UART_SetConfig+0x22a>
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a96      	ldr	r2, [pc, #600]	@ (8003640 <UART_SetConfig+0x358>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d131      	bne.n	800344e <UART_SetConfig+0x166>
 80033ea:	4b94      	ldr	r3, [pc, #592]	@ (800363c <UART_SetConfig+0x354>)
 80033ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ee:	220c      	movs	r2, #12
 80033f0:	4013      	ands	r3, r2
 80033f2:	2b0c      	cmp	r3, #12
 80033f4:	d01d      	beq.n	8003432 <UART_SetConfig+0x14a>
 80033f6:	d823      	bhi.n	8003440 <UART_SetConfig+0x158>
 80033f8:	2b08      	cmp	r3, #8
 80033fa:	d00c      	beq.n	8003416 <UART_SetConfig+0x12e>
 80033fc:	d820      	bhi.n	8003440 <UART_SetConfig+0x158>
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d002      	beq.n	8003408 <UART_SetConfig+0x120>
 8003402:	2b04      	cmp	r3, #4
 8003404:	d00e      	beq.n	8003424 <UART_SetConfig+0x13c>
 8003406:	e01b      	b.n	8003440 <UART_SetConfig+0x158>
 8003408:	231b      	movs	r3, #27
 800340a:	2218      	movs	r2, #24
 800340c:	189b      	adds	r3, r3, r2
 800340e:	19db      	adds	r3, r3, r7
 8003410:	2200      	movs	r2, #0
 8003412:	701a      	strb	r2, [r3, #0]
 8003414:	e07d      	b.n	8003512 <UART_SetConfig+0x22a>
 8003416:	231b      	movs	r3, #27
 8003418:	2218      	movs	r2, #24
 800341a:	189b      	adds	r3, r3, r2
 800341c:	19db      	adds	r3, r3, r7
 800341e:	2202      	movs	r2, #2
 8003420:	701a      	strb	r2, [r3, #0]
 8003422:	e076      	b.n	8003512 <UART_SetConfig+0x22a>
 8003424:	231b      	movs	r3, #27
 8003426:	2218      	movs	r2, #24
 8003428:	189b      	adds	r3, r3, r2
 800342a:	19db      	adds	r3, r3, r7
 800342c:	2204      	movs	r2, #4
 800342e:	701a      	strb	r2, [r3, #0]
 8003430:	e06f      	b.n	8003512 <UART_SetConfig+0x22a>
 8003432:	231b      	movs	r3, #27
 8003434:	2218      	movs	r2, #24
 8003436:	189b      	adds	r3, r3, r2
 8003438:	19db      	adds	r3, r3, r7
 800343a:	2208      	movs	r2, #8
 800343c:	701a      	strb	r2, [r3, #0]
 800343e:	e068      	b.n	8003512 <UART_SetConfig+0x22a>
 8003440:	231b      	movs	r3, #27
 8003442:	2218      	movs	r2, #24
 8003444:	189b      	adds	r3, r3, r2
 8003446:	19db      	adds	r3, r3, r7
 8003448:	2210      	movs	r2, #16
 800344a:	701a      	strb	r2, [r3, #0]
 800344c:	e061      	b.n	8003512 <UART_SetConfig+0x22a>
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a7c      	ldr	r2, [pc, #496]	@ (8003644 <UART_SetConfig+0x35c>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d106      	bne.n	8003466 <UART_SetConfig+0x17e>
 8003458:	231b      	movs	r3, #27
 800345a:	2218      	movs	r2, #24
 800345c:	189b      	adds	r3, r3, r2
 800345e:	19db      	adds	r3, r3, r7
 8003460:	2200      	movs	r2, #0
 8003462:	701a      	strb	r2, [r3, #0]
 8003464:	e055      	b.n	8003512 <UART_SetConfig+0x22a>
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a77      	ldr	r2, [pc, #476]	@ (8003648 <UART_SetConfig+0x360>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d106      	bne.n	800347e <UART_SetConfig+0x196>
 8003470:	231b      	movs	r3, #27
 8003472:	2218      	movs	r2, #24
 8003474:	189b      	adds	r3, r3, r2
 8003476:	19db      	adds	r3, r3, r7
 8003478:	2200      	movs	r2, #0
 800347a:	701a      	strb	r2, [r3, #0]
 800347c:	e049      	b.n	8003512 <UART_SetConfig+0x22a>
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a6b      	ldr	r2, [pc, #428]	@ (8003630 <UART_SetConfig+0x348>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d13e      	bne.n	8003506 <UART_SetConfig+0x21e>
 8003488:	4b6c      	ldr	r3, [pc, #432]	@ (800363c <UART_SetConfig+0x354>)
 800348a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800348c:	23c0      	movs	r3, #192	@ 0xc0
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	4013      	ands	r3, r2
 8003492:	22c0      	movs	r2, #192	@ 0xc0
 8003494:	0112      	lsls	r2, r2, #4
 8003496:	4293      	cmp	r3, r2
 8003498:	d027      	beq.n	80034ea <UART_SetConfig+0x202>
 800349a:	22c0      	movs	r2, #192	@ 0xc0
 800349c:	0112      	lsls	r2, r2, #4
 800349e:	4293      	cmp	r3, r2
 80034a0:	d82a      	bhi.n	80034f8 <UART_SetConfig+0x210>
 80034a2:	2280      	movs	r2, #128	@ 0x80
 80034a4:	0112      	lsls	r2, r2, #4
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d011      	beq.n	80034ce <UART_SetConfig+0x1e6>
 80034aa:	2280      	movs	r2, #128	@ 0x80
 80034ac:	0112      	lsls	r2, r2, #4
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d822      	bhi.n	80034f8 <UART_SetConfig+0x210>
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d004      	beq.n	80034c0 <UART_SetConfig+0x1d8>
 80034b6:	2280      	movs	r2, #128	@ 0x80
 80034b8:	00d2      	lsls	r2, r2, #3
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d00e      	beq.n	80034dc <UART_SetConfig+0x1f4>
 80034be:	e01b      	b.n	80034f8 <UART_SetConfig+0x210>
 80034c0:	231b      	movs	r3, #27
 80034c2:	2218      	movs	r2, #24
 80034c4:	189b      	adds	r3, r3, r2
 80034c6:	19db      	adds	r3, r3, r7
 80034c8:	2200      	movs	r2, #0
 80034ca:	701a      	strb	r2, [r3, #0]
 80034cc:	e021      	b.n	8003512 <UART_SetConfig+0x22a>
 80034ce:	231b      	movs	r3, #27
 80034d0:	2218      	movs	r2, #24
 80034d2:	189b      	adds	r3, r3, r2
 80034d4:	19db      	adds	r3, r3, r7
 80034d6:	2202      	movs	r2, #2
 80034d8:	701a      	strb	r2, [r3, #0]
 80034da:	e01a      	b.n	8003512 <UART_SetConfig+0x22a>
 80034dc:	231b      	movs	r3, #27
 80034de:	2218      	movs	r2, #24
 80034e0:	189b      	adds	r3, r3, r2
 80034e2:	19db      	adds	r3, r3, r7
 80034e4:	2204      	movs	r2, #4
 80034e6:	701a      	strb	r2, [r3, #0]
 80034e8:	e013      	b.n	8003512 <UART_SetConfig+0x22a>
 80034ea:	231b      	movs	r3, #27
 80034ec:	2218      	movs	r2, #24
 80034ee:	189b      	adds	r3, r3, r2
 80034f0:	19db      	adds	r3, r3, r7
 80034f2:	2208      	movs	r2, #8
 80034f4:	701a      	strb	r2, [r3, #0]
 80034f6:	e00c      	b.n	8003512 <UART_SetConfig+0x22a>
 80034f8:	231b      	movs	r3, #27
 80034fa:	2218      	movs	r2, #24
 80034fc:	189b      	adds	r3, r3, r2
 80034fe:	19db      	adds	r3, r3, r7
 8003500:	2210      	movs	r2, #16
 8003502:	701a      	strb	r2, [r3, #0]
 8003504:	e005      	b.n	8003512 <UART_SetConfig+0x22a>
 8003506:	231b      	movs	r3, #27
 8003508:	2218      	movs	r2, #24
 800350a:	189b      	adds	r3, r3, r2
 800350c:	19db      	adds	r3, r3, r7
 800350e:	2210      	movs	r2, #16
 8003510:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a46      	ldr	r2, [pc, #280]	@ (8003630 <UART_SetConfig+0x348>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d000      	beq.n	800351e <UART_SetConfig+0x236>
 800351c:	e09a      	b.n	8003654 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800351e:	231b      	movs	r3, #27
 8003520:	2218      	movs	r2, #24
 8003522:	189b      	adds	r3, r3, r2
 8003524:	19db      	adds	r3, r3, r7
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	2b08      	cmp	r3, #8
 800352a:	d01d      	beq.n	8003568 <UART_SetConfig+0x280>
 800352c:	dc20      	bgt.n	8003570 <UART_SetConfig+0x288>
 800352e:	2b04      	cmp	r3, #4
 8003530:	d015      	beq.n	800355e <UART_SetConfig+0x276>
 8003532:	dc1d      	bgt.n	8003570 <UART_SetConfig+0x288>
 8003534:	2b00      	cmp	r3, #0
 8003536:	d002      	beq.n	800353e <UART_SetConfig+0x256>
 8003538:	2b02      	cmp	r3, #2
 800353a:	d005      	beq.n	8003548 <UART_SetConfig+0x260>
 800353c:	e018      	b.n	8003570 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800353e:	f7fe fd13 	bl	8001f68 <HAL_RCC_GetPCLK1Freq>
 8003542:	0003      	movs	r3, r0
 8003544:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003546:	e01c      	b.n	8003582 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003548:	4b3c      	ldr	r3, [pc, #240]	@ (800363c <UART_SetConfig+0x354>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2210      	movs	r2, #16
 800354e:	4013      	ands	r3, r2
 8003550:	d002      	beq.n	8003558 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003552:	4b3e      	ldr	r3, [pc, #248]	@ (800364c <UART_SetConfig+0x364>)
 8003554:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003556:	e014      	b.n	8003582 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8003558:	4b3d      	ldr	r3, [pc, #244]	@ (8003650 <UART_SetConfig+0x368>)
 800355a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800355c:	e011      	b.n	8003582 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800355e:	f7fe fc53 	bl	8001e08 <HAL_RCC_GetSysClockFreq>
 8003562:	0003      	movs	r3, r0
 8003564:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003566:	e00c      	b.n	8003582 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003568:	2380      	movs	r3, #128	@ 0x80
 800356a:	021b      	lsls	r3, r3, #8
 800356c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800356e:	e008      	b.n	8003582 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8003570:	2300      	movs	r3, #0
 8003572:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003574:	231a      	movs	r3, #26
 8003576:	2218      	movs	r2, #24
 8003578:	189b      	adds	r3, r3, r2
 800357a:	19db      	adds	r3, r3, r7
 800357c:	2201      	movs	r2, #1
 800357e:	701a      	strb	r2, [r3, #0]
        break;
 8003580:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003584:	2b00      	cmp	r3, #0
 8003586:	d100      	bne.n	800358a <UART_SetConfig+0x2a2>
 8003588:	e133      	b.n	80037f2 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	0013      	movs	r3, r2
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	189b      	adds	r3, r3, r2
 8003594:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003596:	429a      	cmp	r2, r3
 8003598:	d305      	bcc.n	80035a6 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80035a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d906      	bls.n	80035b4 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80035a6:	231a      	movs	r3, #26
 80035a8:	2218      	movs	r2, #24
 80035aa:	189b      	adds	r3, r3, r2
 80035ac:	19db      	adds	r3, r3, r7
 80035ae:	2201      	movs	r2, #1
 80035b0:	701a      	strb	r2, [r3, #0]
 80035b2:	e11e      	b.n	80037f2 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80035b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035b6:	613b      	str	r3, [r7, #16]
 80035b8:	2300      	movs	r3, #0
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	6939      	ldr	r1, [r7, #16]
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	000b      	movs	r3, r1
 80035c2:	0e1b      	lsrs	r3, r3, #24
 80035c4:	0010      	movs	r0, r2
 80035c6:	0205      	lsls	r5, r0, #8
 80035c8:	431d      	orrs	r5, r3
 80035ca:	000b      	movs	r3, r1
 80035cc:	021c      	lsls	r4, r3, #8
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	085b      	lsrs	r3, r3, #1
 80035d4:	60bb      	str	r3, [r7, #8]
 80035d6:	2300      	movs	r3, #0
 80035d8:	60fb      	str	r3, [r7, #12]
 80035da:	68b8      	ldr	r0, [r7, #8]
 80035dc:	68f9      	ldr	r1, [r7, #12]
 80035de:	1900      	adds	r0, r0, r4
 80035e0:	4169      	adcs	r1, r5
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	603b      	str	r3, [r7, #0]
 80035e8:	2300      	movs	r3, #0
 80035ea:	607b      	str	r3, [r7, #4]
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f7fc fe16 	bl	8000220 <__aeabi_uldivmod>
 80035f4:	0002      	movs	r2, r0
 80035f6:	000b      	movs	r3, r1
 80035f8:	0013      	movs	r3, r2
 80035fa:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80035fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80035fe:	23c0      	movs	r3, #192	@ 0xc0
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	429a      	cmp	r2, r3
 8003604:	d309      	bcc.n	800361a <UART_SetConfig+0x332>
 8003606:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003608:	2380      	movs	r3, #128	@ 0x80
 800360a:	035b      	lsls	r3, r3, #13
 800360c:	429a      	cmp	r2, r3
 800360e:	d204      	bcs.n	800361a <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003616:	60da      	str	r2, [r3, #12]
 8003618:	e0eb      	b.n	80037f2 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 800361a:	231a      	movs	r3, #26
 800361c:	2218      	movs	r2, #24
 800361e:	189b      	adds	r3, r3, r2
 8003620:	19db      	adds	r3, r3, r7
 8003622:	2201      	movs	r2, #1
 8003624:	701a      	strb	r2, [r3, #0]
 8003626:	e0e4      	b.n	80037f2 <UART_SetConfig+0x50a>
 8003628:	efff69f3 	.word	0xefff69f3
 800362c:	ffffcfff 	.word	0xffffcfff
 8003630:	40004800 	.word	0x40004800
 8003634:	fffff4ff 	.word	0xfffff4ff
 8003638:	40013800 	.word	0x40013800
 800363c:	40021000 	.word	0x40021000
 8003640:	40004400 	.word	0x40004400
 8003644:	40004c00 	.word	0x40004c00
 8003648:	40005000 	.word	0x40005000
 800364c:	003d0900 	.word	0x003d0900
 8003650:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	69da      	ldr	r2, [r3, #28]
 8003658:	2380      	movs	r3, #128	@ 0x80
 800365a:	021b      	lsls	r3, r3, #8
 800365c:	429a      	cmp	r2, r3
 800365e:	d000      	beq.n	8003662 <UART_SetConfig+0x37a>
 8003660:	e070      	b.n	8003744 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8003662:	231b      	movs	r3, #27
 8003664:	2218      	movs	r2, #24
 8003666:	189b      	adds	r3, r3, r2
 8003668:	19db      	adds	r3, r3, r7
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	2b08      	cmp	r3, #8
 800366e:	d822      	bhi.n	80036b6 <UART_SetConfig+0x3ce>
 8003670:	009a      	lsls	r2, r3, #2
 8003672:	4b67      	ldr	r3, [pc, #412]	@ (8003810 <UART_SetConfig+0x528>)
 8003674:	18d3      	adds	r3, r2, r3
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800367a:	f7fe fc75 	bl	8001f68 <HAL_RCC_GetPCLK1Freq>
 800367e:	0003      	movs	r3, r0
 8003680:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003682:	e021      	b.n	80036c8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003684:	f7fe fc86 	bl	8001f94 <HAL_RCC_GetPCLK2Freq>
 8003688:	0003      	movs	r3, r0
 800368a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800368c:	e01c      	b.n	80036c8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800368e:	4b61      	ldr	r3, [pc, #388]	@ (8003814 <UART_SetConfig+0x52c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2210      	movs	r2, #16
 8003694:	4013      	ands	r3, r2
 8003696:	d002      	beq.n	800369e <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003698:	4b5f      	ldr	r3, [pc, #380]	@ (8003818 <UART_SetConfig+0x530>)
 800369a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800369c:	e014      	b.n	80036c8 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800369e:	4b5f      	ldr	r3, [pc, #380]	@ (800381c <UART_SetConfig+0x534>)
 80036a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80036a2:	e011      	b.n	80036c8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036a4:	f7fe fbb0 	bl	8001e08 <HAL_RCC_GetSysClockFreq>
 80036a8:	0003      	movs	r3, r0
 80036aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80036ac:	e00c      	b.n	80036c8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036ae:	2380      	movs	r3, #128	@ 0x80
 80036b0:	021b      	lsls	r3, r3, #8
 80036b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80036b4:	e008      	b.n	80036c8 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80036b6:	2300      	movs	r3, #0
 80036b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80036ba:	231a      	movs	r3, #26
 80036bc:	2218      	movs	r2, #24
 80036be:	189b      	adds	r3, r3, r2
 80036c0:	19db      	adds	r3, r3, r7
 80036c2:	2201      	movs	r2, #1
 80036c4:	701a      	strb	r2, [r3, #0]
        break;
 80036c6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d100      	bne.n	80036d0 <UART_SetConfig+0x3e8>
 80036ce:	e090      	b.n	80037f2 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036d2:	005a      	lsls	r2, r3, #1
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	085b      	lsrs	r3, r3, #1
 80036da:	18d2      	adds	r2, r2, r3
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	0019      	movs	r1, r3
 80036e2:	0010      	movs	r0, r2
 80036e4:	f7fc fd10 	bl	8000108 <__udivsi3>
 80036e8:	0003      	movs	r3, r0
 80036ea:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ee:	2b0f      	cmp	r3, #15
 80036f0:	d921      	bls.n	8003736 <UART_SetConfig+0x44e>
 80036f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036f4:	2380      	movs	r3, #128	@ 0x80
 80036f6:	025b      	lsls	r3, r3, #9
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d21c      	bcs.n	8003736 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036fe:	b29a      	uxth	r2, r3
 8003700:	200e      	movs	r0, #14
 8003702:	2418      	movs	r4, #24
 8003704:	1903      	adds	r3, r0, r4
 8003706:	19db      	adds	r3, r3, r7
 8003708:	210f      	movs	r1, #15
 800370a:	438a      	bics	r2, r1
 800370c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800370e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003710:	085b      	lsrs	r3, r3, #1
 8003712:	b29b      	uxth	r3, r3
 8003714:	2207      	movs	r2, #7
 8003716:	4013      	ands	r3, r2
 8003718:	b299      	uxth	r1, r3
 800371a:	1903      	adds	r3, r0, r4
 800371c:	19db      	adds	r3, r3, r7
 800371e:	1902      	adds	r2, r0, r4
 8003720:	19d2      	adds	r2, r2, r7
 8003722:	8812      	ldrh	r2, [r2, #0]
 8003724:	430a      	orrs	r2, r1
 8003726:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	1902      	adds	r2, r0, r4
 800372e:	19d2      	adds	r2, r2, r7
 8003730:	8812      	ldrh	r2, [r2, #0]
 8003732:	60da      	str	r2, [r3, #12]
 8003734:	e05d      	b.n	80037f2 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8003736:	231a      	movs	r3, #26
 8003738:	2218      	movs	r2, #24
 800373a:	189b      	adds	r3, r3, r2
 800373c:	19db      	adds	r3, r3, r7
 800373e:	2201      	movs	r2, #1
 8003740:	701a      	strb	r2, [r3, #0]
 8003742:	e056      	b.n	80037f2 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003744:	231b      	movs	r3, #27
 8003746:	2218      	movs	r2, #24
 8003748:	189b      	adds	r3, r3, r2
 800374a:	19db      	adds	r3, r3, r7
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	2b08      	cmp	r3, #8
 8003750:	d822      	bhi.n	8003798 <UART_SetConfig+0x4b0>
 8003752:	009a      	lsls	r2, r3, #2
 8003754:	4b32      	ldr	r3, [pc, #200]	@ (8003820 <UART_SetConfig+0x538>)
 8003756:	18d3      	adds	r3, r2, r3
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800375c:	f7fe fc04 	bl	8001f68 <HAL_RCC_GetPCLK1Freq>
 8003760:	0003      	movs	r3, r0
 8003762:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003764:	e021      	b.n	80037aa <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003766:	f7fe fc15 	bl	8001f94 <HAL_RCC_GetPCLK2Freq>
 800376a:	0003      	movs	r3, r0
 800376c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800376e:	e01c      	b.n	80037aa <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003770:	4b28      	ldr	r3, [pc, #160]	@ (8003814 <UART_SetConfig+0x52c>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2210      	movs	r2, #16
 8003776:	4013      	ands	r3, r2
 8003778:	d002      	beq.n	8003780 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800377a:	4b27      	ldr	r3, [pc, #156]	@ (8003818 <UART_SetConfig+0x530>)
 800377c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800377e:	e014      	b.n	80037aa <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8003780:	4b26      	ldr	r3, [pc, #152]	@ (800381c <UART_SetConfig+0x534>)
 8003782:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003784:	e011      	b.n	80037aa <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003786:	f7fe fb3f 	bl	8001e08 <HAL_RCC_GetSysClockFreq>
 800378a:	0003      	movs	r3, r0
 800378c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800378e:	e00c      	b.n	80037aa <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003790:	2380      	movs	r3, #128	@ 0x80
 8003792:	021b      	lsls	r3, r3, #8
 8003794:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003796:	e008      	b.n	80037aa <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8003798:	2300      	movs	r3, #0
 800379a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800379c:	231a      	movs	r3, #26
 800379e:	2218      	movs	r2, #24
 80037a0:	189b      	adds	r3, r3, r2
 80037a2:	19db      	adds	r3, r3, r7
 80037a4:	2201      	movs	r2, #1
 80037a6:	701a      	strb	r2, [r3, #0]
        break;
 80037a8:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80037aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d020      	beq.n	80037f2 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	085a      	lsrs	r2, r3, #1
 80037b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037b8:	18d2      	adds	r2, r2, r3
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	0019      	movs	r1, r3
 80037c0:	0010      	movs	r0, r2
 80037c2:	f7fc fca1 	bl	8000108 <__udivsi3>
 80037c6:	0003      	movs	r3, r0
 80037c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037cc:	2b0f      	cmp	r3, #15
 80037ce:	d90a      	bls.n	80037e6 <UART_SetConfig+0x4fe>
 80037d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037d2:	2380      	movs	r3, #128	@ 0x80
 80037d4:	025b      	lsls	r3, r3, #9
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d205      	bcs.n	80037e6 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80037da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037dc:	b29a      	uxth	r2, r3
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	60da      	str	r2, [r3, #12]
 80037e4:	e005      	b.n	80037f2 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80037e6:	231a      	movs	r3, #26
 80037e8:	2218      	movs	r2, #24
 80037ea:	189b      	adds	r3, r3, r2
 80037ec:	19db      	adds	r3, r3, r7
 80037ee:	2201      	movs	r2, #1
 80037f0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	2200      	movs	r2, #0
 80037f6:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	2200      	movs	r2, #0
 80037fc:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80037fe:	231a      	movs	r3, #26
 8003800:	2218      	movs	r2, #24
 8003802:	189b      	adds	r3, r3, r2
 8003804:	19db      	adds	r3, r3, r7
 8003806:	781b      	ldrb	r3, [r3, #0]
}
 8003808:	0018      	movs	r0, r3
 800380a:	46bd      	mov	sp, r7
 800380c:	b00e      	add	sp, #56	@ 0x38
 800380e:	bdb0      	pop	{r4, r5, r7, pc}
 8003810:	08003da0 	.word	0x08003da0
 8003814:	40021000 	.word	0x40021000
 8003818:	003d0900 	.word	0x003d0900
 800381c:	00f42400 	.word	0x00f42400
 8003820:	08003dc4 	.word	0x08003dc4

08003824 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003830:	2201      	movs	r2, #1
 8003832:	4013      	ands	r3, r2
 8003834:	d00b      	beq.n	800384e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	4a4a      	ldr	r2, [pc, #296]	@ (8003968 <UART_AdvFeatureConfig+0x144>)
 800383e:	4013      	ands	r3, r2
 8003840:	0019      	movs	r1, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003852:	2202      	movs	r2, #2
 8003854:	4013      	ands	r3, r2
 8003856:	d00b      	beq.n	8003870 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	4a43      	ldr	r2, [pc, #268]	@ (800396c <UART_AdvFeatureConfig+0x148>)
 8003860:	4013      	ands	r3, r2
 8003862:	0019      	movs	r1, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003874:	2204      	movs	r2, #4
 8003876:	4013      	ands	r3, r2
 8003878:	d00b      	beq.n	8003892 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	4a3b      	ldr	r2, [pc, #236]	@ (8003970 <UART_AdvFeatureConfig+0x14c>)
 8003882:	4013      	ands	r3, r2
 8003884:	0019      	movs	r1, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	430a      	orrs	r2, r1
 8003890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003896:	2208      	movs	r2, #8
 8003898:	4013      	ands	r3, r2
 800389a:	d00b      	beq.n	80038b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	4a34      	ldr	r2, [pc, #208]	@ (8003974 <UART_AdvFeatureConfig+0x150>)
 80038a4:	4013      	ands	r3, r2
 80038a6:	0019      	movs	r1, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	430a      	orrs	r2, r1
 80038b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b8:	2210      	movs	r2, #16
 80038ba:	4013      	ands	r3, r2
 80038bc:	d00b      	beq.n	80038d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	4a2c      	ldr	r2, [pc, #176]	@ (8003978 <UART_AdvFeatureConfig+0x154>)
 80038c6:	4013      	ands	r3, r2
 80038c8:	0019      	movs	r1, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038da:	2220      	movs	r2, #32
 80038dc:	4013      	ands	r3, r2
 80038de:	d00b      	beq.n	80038f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	4a25      	ldr	r2, [pc, #148]	@ (800397c <UART_AdvFeatureConfig+0x158>)
 80038e8:	4013      	ands	r3, r2
 80038ea:	0019      	movs	r1, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fc:	2240      	movs	r2, #64	@ 0x40
 80038fe:	4013      	ands	r3, r2
 8003900:	d01d      	beq.n	800393e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	4a1d      	ldr	r2, [pc, #116]	@ (8003980 <UART_AdvFeatureConfig+0x15c>)
 800390a:	4013      	ands	r3, r2
 800390c:	0019      	movs	r1, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800391e:	2380      	movs	r3, #128	@ 0x80
 8003920:	035b      	lsls	r3, r3, #13
 8003922:	429a      	cmp	r2, r3
 8003924:	d10b      	bne.n	800393e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	4a15      	ldr	r2, [pc, #84]	@ (8003984 <UART_AdvFeatureConfig+0x160>)
 800392e:	4013      	ands	r3, r2
 8003930:	0019      	movs	r1, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	430a      	orrs	r2, r1
 800393c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003942:	2280      	movs	r2, #128	@ 0x80
 8003944:	4013      	ands	r3, r2
 8003946:	d00b      	beq.n	8003960 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	4a0e      	ldr	r2, [pc, #56]	@ (8003988 <UART_AdvFeatureConfig+0x164>)
 8003950:	4013      	ands	r3, r2
 8003952:	0019      	movs	r1, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	430a      	orrs	r2, r1
 800395e:	605a      	str	r2, [r3, #4]
  }
}
 8003960:	46c0      	nop			@ (mov r8, r8)
 8003962:	46bd      	mov	sp, r7
 8003964:	b002      	add	sp, #8
 8003966:	bd80      	pop	{r7, pc}
 8003968:	fffdffff 	.word	0xfffdffff
 800396c:	fffeffff 	.word	0xfffeffff
 8003970:	fffbffff 	.word	0xfffbffff
 8003974:	ffff7fff 	.word	0xffff7fff
 8003978:	ffffefff 	.word	0xffffefff
 800397c:	ffffdfff 	.word	0xffffdfff
 8003980:	ffefffff 	.word	0xffefffff
 8003984:	ff9fffff 	.word	0xff9fffff
 8003988:	fff7ffff 	.word	0xfff7ffff

0800398c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b092      	sub	sp, #72	@ 0x48
 8003990:	af02      	add	r7, sp, #8
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2284      	movs	r2, #132	@ 0x84
 8003998:	2100      	movs	r1, #0
 800399a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800399c:	f7fd f9c2 	bl	8000d24 <HAL_GetTick>
 80039a0:	0003      	movs	r3, r0
 80039a2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2208      	movs	r2, #8
 80039ac:	4013      	ands	r3, r2
 80039ae:	2b08      	cmp	r3, #8
 80039b0:	d12c      	bne.n	8003a0c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039b4:	2280      	movs	r2, #128	@ 0x80
 80039b6:	0391      	lsls	r1, r2, #14
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	4a46      	ldr	r2, [pc, #280]	@ (8003ad4 <UART_CheckIdleState+0x148>)
 80039bc:	9200      	str	r2, [sp, #0]
 80039be:	2200      	movs	r2, #0
 80039c0:	f000 f88c 	bl	8003adc <UART_WaitOnFlagUntilTimeout>
 80039c4:	1e03      	subs	r3, r0, #0
 80039c6:	d021      	beq.n	8003a0c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039c8:	f3ef 8310 	mrs	r3, PRIMASK
 80039cc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80039ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80039d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80039d2:	2301      	movs	r3, #1
 80039d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d8:	f383 8810 	msr	PRIMASK, r3
}
 80039dc:	46c0      	nop			@ (mov r8, r8)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2180      	movs	r1, #128	@ 0x80
 80039ea:	438a      	bics	r2, r1
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039f4:	f383 8810 	msr	PRIMASK, r3
}
 80039f8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2220      	movs	r2, #32
 80039fe:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2278      	movs	r2, #120	@ 0x78
 8003a04:	2100      	movs	r1, #0
 8003a06:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e05f      	b.n	8003acc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2204      	movs	r2, #4
 8003a14:	4013      	ands	r3, r2
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	d146      	bne.n	8003aa8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a1c:	2280      	movs	r2, #128	@ 0x80
 8003a1e:	03d1      	lsls	r1, r2, #15
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	4a2c      	ldr	r2, [pc, #176]	@ (8003ad4 <UART_CheckIdleState+0x148>)
 8003a24:	9200      	str	r2, [sp, #0]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f000 f858 	bl	8003adc <UART_WaitOnFlagUntilTimeout>
 8003a2c:	1e03      	subs	r3, r0, #0
 8003a2e:	d03b      	beq.n	8003aa8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a30:	f3ef 8310 	mrs	r3, PRIMASK
 8003a34:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a36:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a38:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	f383 8810 	msr	PRIMASK, r3
}
 8003a44:	46c0      	nop			@ (mov r8, r8)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4921      	ldr	r1, [pc, #132]	@ (8003ad8 <UART_CheckIdleState+0x14c>)
 8003a52:	400a      	ands	r2, r1
 8003a54:	601a      	str	r2, [r3, #0]
 8003a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f383 8810 	msr	PRIMASK, r3
}
 8003a60:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a62:	f3ef 8310 	mrs	r3, PRIMASK
 8003a66:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a68:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	f383 8810 	msr	PRIMASK, r3
}
 8003a76:	46c0      	nop			@ (mov r8, r8)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689a      	ldr	r2, [r3, #8]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2101      	movs	r1, #1
 8003a84:	438a      	bics	r2, r1
 8003a86:	609a      	str	r2, [r3, #8]
 8003a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a8a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a8c:	6a3b      	ldr	r3, [r7, #32]
 8003a8e:	f383 8810 	msr	PRIMASK, r3
}
 8003a92:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2280      	movs	r2, #128	@ 0x80
 8003a98:	2120      	movs	r1, #32
 8003a9a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2278      	movs	r2, #120	@ 0x78
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e011      	b.n	8003acc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2280      	movs	r2, #128	@ 0x80
 8003ab2:	2120      	movs	r1, #32
 8003ab4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2278      	movs	r2, #120	@ 0x78
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	0018      	movs	r0, r3
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	b010      	add	sp, #64	@ 0x40
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	01ffffff 	.word	0x01ffffff
 8003ad8:	fffffedf 	.word	0xfffffedf

08003adc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	603b      	str	r3, [r7, #0]
 8003ae8:	1dfb      	adds	r3, r7, #7
 8003aea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aec:	e04b      	b.n	8003b86 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	3301      	adds	r3, #1
 8003af2:	d048      	beq.n	8003b86 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003af4:	f7fd f916 	bl	8000d24 <HAL_GetTick>
 8003af8:	0002      	movs	r2, r0
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d302      	bcc.n	8003b0a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e04b      	b.n	8003ba6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2204      	movs	r2, #4
 8003b16:	4013      	ands	r3, r2
 8003b18:	d035      	beq.n	8003b86 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	69db      	ldr	r3, [r3, #28]
 8003b20:	2208      	movs	r2, #8
 8003b22:	4013      	ands	r3, r2
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d111      	bne.n	8003b4c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2208      	movs	r2, #8
 8003b2e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	0018      	movs	r0, r3
 8003b34:	f000 f83c 	bl	8003bb0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2284      	movs	r2, #132	@ 0x84
 8003b3c:	2108      	movs	r1, #8
 8003b3e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2278      	movs	r2, #120	@ 0x78
 8003b44:	2100      	movs	r1, #0
 8003b46:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e02c      	b.n	8003ba6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	69da      	ldr	r2, [r3, #28]
 8003b52:	2380      	movs	r3, #128	@ 0x80
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	401a      	ands	r2, r3
 8003b58:	2380      	movs	r3, #128	@ 0x80
 8003b5a:	011b      	lsls	r3, r3, #4
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d112      	bne.n	8003b86 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2280      	movs	r2, #128	@ 0x80
 8003b66:	0112      	lsls	r2, r2, #4
 8003b68:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	f000 f81f 	bl	8003bb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2284      	movs	r2, #132	@ 0x84
 8003b76:	2120      	movs	r1, #32
 8003b78:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2278      	movs	r2, #120	@ 0x78
 8003b7e:	2100      	movs	r1, #0
 8003b80:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e00f      	b.n	8003ba6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	69db      	ldr	r3, [r3, #28]
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	425a      	negs	r2, r3
 8003b96:	4153      	adcs	r3, r2
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	001a      	movs	r2, r3
 8003b9c:	1dfb      	adds	r3, r7, #7
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d0a4      	beq.n	8003aee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	0018      	movs	r0, r3
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	b004      	add	sp, #16
 8003bac:	bd80      	pop	{r7, pc}
	...

08003bb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b08e      	sub	sp, #56	@ 0x38
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bb8:	f3ef 8310 	mrs	r3, PRIMASK
 8003bbc:	617b      	str	r3, [r7, #20]
  return(result);
 8003bbe:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	f383 8810 	msr	PRIMASK, r3
}
 8003bcc:	46c0      	nop			@ (mov r8, r8)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4926      	ldr	r1, [pc, #152]	@ (8003c74 <UART_EndRxTransfer+0xc4>)
 8003bda:	400a      	ands	r2, r1
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003be0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	f383 8810 	msr	PRIMASK, r3
}
 8003be8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bea:	f3ef 8310 	mrs	r3, PRIMASK
 8003bee:	623b      	str	r3, [r7, #32]
  return(result);
 8003bf0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf2:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfa:	f383 8810 	msr	PRIMASK, r3
}
 8003bfe:	46c0      	nop			@ (mov r8, r8)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689a      	ldr	r2, [r3, #8]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	438a      	bics	r2, r1
 8003c0e:	609a      	str	r2, [r3, #8]
 8003c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c12:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c16:	f383 8810 	msr	PRIMASK, r3
}
 8003c1a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d118      	bne.n	8003c56 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c24:	f3ef 8310 	mrs	r3, PRIMASK
 8003c28:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c2a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c2e:	2301      	movs	r3, #1
 8003c30:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f383 8810 	msr	PRIMASK, r3
}
 8003c38:	46c0      	nop			@ (mov r8, r8)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2110      	movs	r1, #16
 8003c46:	438a      	bics	r2, r1
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	f383 8810 	msr	PRIMASK, r3
}
 8003c54:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2280      	movs	r2, #128	@ 0x80
 8003c5a:	2120      	movs	r1, #32
 8003c5c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003c6a:	46c0      	nop			@ (mov r8, r8)
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	b00e      	add	sp, #56	@ 0x38
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	46c0      	nop			@ (mov r8, r8)
 8003c74:	fffffedf 	.word	0xfffffedf

08003c78 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	225a      	movs	r2, #90	@ 0x5a
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2252      	movs	r2, #82	@ 0x52
 8003c92:	2100      	movs	r1, #0
 8003c94:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	0018      	movs	r0, r3
 8003c9a:	f7ff fb11 	bl	80032c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c9e:	46c0      	nop			@ (mov r8, r8)
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	b004      	add	sp, #16
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b086      	sub	sp, #24
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cae:	f3ef 8310 	mrs	r3, PRIMASK
 8003cb2:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cb4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003cb6:	617b      	str	r3, [r7, #20]
 8003cb8:	2301      	movs	r3, #1
 8003cba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f383 8810 	msr	PRIMASK, r3
}
 8003cc2:	46c0      	nop			@ (mov r8, r8)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2140      	movs	r1, #64	@ 0x40
 8003cd0:	438a      	bics	r2, r1
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	f383 8810 	msr	PRIMASK, r3
}
 8003cde:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	0018      	movs	r0, r3
 8003cf0:	f7ff fade 	bl	80032b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cf4:	46c0      	nop			@ (mov r8, r8)
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	b006      	add	sp, #24
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003d04:	46c0      	nop			@ (mov r8, r8)
 8003d06:	46bd      	mov	sp, r7
 8003d08:	b002      	add	sp, #8
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <memset>:
 8003d0c:	0003      	movs	r3, r0
 8003d0e:	1882      	adds	r2, r0, r2
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d100      	bne.n	8003d16 <memset+0xa>
 8003d14:	4770      	bx	lr
 8003d16:	7019      	strb	r1, [r3, #0]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	e7f9      	b.n	8003d10 <memset+0x4>

08003d1c <__libc_init_array>:
 8003d1c:	b570      	push	{r4, r5, r6, lr}
 8003d1e:	2600      	movs	r6, #0
 8003d20:	4c0c      	ldr	r4, [pc, #48]	@ (8003d54 <__libc_init_array+0x38>)
 8003d22:	4d0d      	ldr	r5, [pc, #52]	@ (8003d58 <__libc_init_array+0x3c>)
 8003d24:	1b64      	subs	r4, r4, r5
 8003d26:	10a4      	asrs	r4, r4, #2
 8003d28:	42a6      	cmp	r6, r4
 8003d2a:	d109      	bne.n	8003d40 <__libc_init_array+0x24>
 8003d2c:	2600      	movs	r6, #0
 8003d2e:	f000 f819 	bl	8003d64 <_init>
 8003d32:	4c0a      	ldr	r4, [pc, #40]	@ (8003d5c <__libc_init_array+0x40>)
 8003d34:	4d0a      	ldr	r5, [pc, #40]	@ (8003d60 <__libc_init_array+0x44>)
 8003d36:	1b64      	subs	r4, r4, r5
 8003d38:	10a4      	asrs	r4, r4, #2
 8003d3a:	42a6      	cmp	r6, r4
 8003d3c:	d105      	bne.n	8003d4a <__libc_init_array+0x2e>
 8003d3e:	bd70      	pop	{r4, r5, r6, pc}
 8003d40:	00b3      	lsls	r3, r6, #2
 8003d42:	58eb      	ldr	r3, [r5, r3]
 8003d44:	4798      	blx	r3
 8003d46:	3601      	adds	r6, #1
 8003d48:	e7ee      	b.n	8003d28 <__libc_init_array+0xc>
 8003d4a:	00b3      	lsls	r3, r6, #2
 8003d4c:	58eb      	ldr	r3, [r5, r3]
 8003d4e:	4798      	blx	r3
 8003d50:	3601      	adds	r6, #1
 8003d52:	e7f2      	b.n	8003d3a <__libc_init_array+0x1e>
 8003d54:	08003df0 	.word	0x08003df0
 8003d58:	08003df0 	.word	0x08003df0
 8003d5c:	08003df4 	.word	0x08003df4
 8003d60:	08003df0 	.word	0x08003df0

08003d64 <_init>:
 8003d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d66:	46c0      	nop			@ (mov r8, r8)
 8003d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d6a:	bc08      	pop	{r3}
 8003d6c:	469e      	mov	lr, r3
 8003d6e:	4770      	bx	lr

08003d70 <_fini>:
 8003d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d72:	46c0      	nop			@ (mov r8, r8)
 8003d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d76:	bc08      	pop	{r3}
 8003d78:	469e      	mov	lr, r3
 8003d7a:	4770      	bx	lr
